var searchIndex = {};
searchIndex["repl"] = {"doc":"","items":[],"paths":[]};
searchIndex["gluon"] = {"doc":"This crate contains contains the implementation for the gluon programming language.","items":[[3,"RootedThread","gluon","An instance of `Thread` which is rooted. See the `Thread` type for documentation on interacting\nwith the type.",null,null],[3,"Thread","","Representation of the virtual machine",null,null],[3,"Compiler","","Type which makes parsing, typechecking and compiling an AST into bytecode",null,null],[4,"Error","","Error type wrapping all possible errors that can be generated from gluon",null,null],[13,"Parse","","Error found when parsing gluon code",0,null],[13,"Typecheck","","Error found when typechecking gluon code",0,null],[13,"IO","","Error found when performing an IO action such as loading a file",0,null],[13,"VM","","Error found when executing code in the virtual machine",0,null],[13,"Macro","","Error found when expanding macros",0,null],[13,"Multiple","","Multiple errors where found",0,null],[5,"filename_to_module","","",null,{"inputs":[{"name":"str"}],"output":{"name":"stdstring"}}],[5,"new_vm","","Creates a new virtual machine with support for importing other modules and with all primitives\nloaded.",null,{"inputs":[],"output":{"name":"rootedthread"}}],[0,"compiler_pipeline","","Advanced compiler pipeline which ensures that the compilation phases are run in order even if\nnot the entire compilation procedure is needed.",null,null],[3,"MacroValue","gluon::compiler_pipeline","Result type of successful macro expansion",null,null],[12,"expr","","",1,null],[3,"TypecheckValue","","Result type of successful typechecking",null,null],[12,"expr","","",2,null],[12,"typ","","",2,null],[3,"CompileValue","","Result of successful compilation",null,null],[12,"expr","","",3,null],[12,"typ","","",3,null],[12,"function","","",3,null],[3,"ExecuteValue","","Result of successful execution",null,null],[12,"expr","","",4,null],[12,"typ","","",4,null],[12,"value","","",4,null],[8,"MacroExpandable","","",null,null],[16,"Expr","","",5,null],[11,"expand_macro","","",5,null],[10,"expand_macro_with","","",5,null],[8,"Typecheckable","","",null,null],[16,"Expr","","",6,null],[11,"typecheck","","",6,null],[10,"typecheck_expected","","",6,null],[8,"Compileable","","",null,null],[16,"Expr","","",7,null],[10,"compile","","",7,null],[8,"Executable","","",null,null],[16,"Expr","","",8,null],[10,"run_expr","","",8,null],[10,"load_script","","",8,null],[11,"typecheck_expected","","",1,null],[11,"compile","","",2,null],[11,"run_expr","","",3,null],[11,"load_script","","",3,null],[0,"import","gluon","Implementation of the `import` macro.",null,null],[3,"DefaultImporter","gluon::import","",null,null],[3,"CheckImporter","","",null,null],[12,"0","","",9,null],[3,"Import","","Macro which rewrites occurances of `import &quot;filename&quot;` to a load of that file if it is not\nalready loaded and then a global access to the loaded module",null,null],[12,"paths","","",10,null],[12,"importer","","",10,null],[4,"Error","","Error type for the import macro",null,null],[13,"CyclicDependency","","The importer found a cyclic dependency when loading files",11,null],[13,"String","","Generic message error",11,null],[13,"IO","","The importer could not load the imported file",11,null],[8,"Importer","","",null,null],[10,"import","","",12,null],[11,"fmt","","",11,null],[11,"fmt","","",11,null],[11,"description","","",11,null],[11,"cause","","",11,null],[11,"from","","",11,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"clone","","",13,null],[11,"import","","",13,null],[11,"clone","","",9,null],[11,"new","","",9,{"inputs":[],"output":{"name":"checkimporter"}}],[11,"import","","",9,null],[11,"new","","Creates a new import macro",10,{"inputs":[{"name":"i"}],"output":{"name":"import"}}],[11,"add_path","","Adds a path to the list of paths which the importer uses to find files",10,null],[11,"expand","","",10,null],[0,"io","gluon","",null,null],[5,"load","gluon::io","",null,{"inputs":[{"name":"thread"}],"output":{"name":"result"}}],[6,"Result","gluon","Type alias for results returned by gluon",null,null],[17,"PRELUDE","","",null,null],[11,"fmt","","",0,null],[11,"fmt","","",0,null],[11,"description","","",0,null],[11,"cause","","",0,null],[11,"from","","",0,{"inputs":[{"name":"infile"}],"output":{"name":"error"}}],[11,"from","","",0,{"inputs":[{"name":"infile"}],"output":{"name":"error"}}],[11,"from","","",0,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"from","","",0,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"from","","",0,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"from","","",0,{"inputs":[{"name":"errors"}],"output":{"name":"error"}}],[11,"from","","",0,{"inputs":[{"name":"errors"}],"output":{"name":"error"}}],[11,"new","","Creates a new compiler with default settings",14,{"inputs":[],"output":{"name":"compiler"}}],[11,"implicit_prelude","","Sets wheter the implicit prelude should be include when compiling a file using this\ncompiler (default: true)",14,null],[11,"parse_expr","","Parse `expr_str`, returning an expression if successful",14,null],[11,"parse_partial_expr","","Parse `input`, returning an expression if successful",14,null],[11,"typecheck_expr","","Parse and typecheck `expr_str` returning the typechecked expression and type of the\nexpression",14,null],[11,"typecheck_str","","",14,null],[11,"compile_script","","Compiles `expr` into a function which can be added and run by the `vm`",14,null],[11,"extract_metadata","","Parses and typechecks `expr_str` followed by extracting metadata from the created\nexpression",14,null],[11,"load_script","","Compiles `input` and if it is successful runs the resulting code and stores the resulting\nvalue in the vm.",14,null],[11,"load_file","","Loads `filename` and compiles and runs its input by calling `load_script`",14,null],[11,"run_expr","","Compiles and runs the expression in `expr_str`. If successful the value from running the\nexpression is returned",14,null],[11,"run_io_expr","","Compiles and runs `expr_str`. If the expression is of type `IO a` the action is evaluated\nand a value of type `a` is returned",14,null],[11,"new","","Creates a new virtual machine with an empty global environment",15,{"inputs":[],"output":{"name":"rootedthread"}}],[11,"into_raw","","Converts a `RootedThread` into a raw pointer allowing to be passed through a C api.\nThe reference count for the thread is not modified",15,null],[11,"from_raw","","Converts a raw pointer into a `RootedThread`.\nThe reference count for the thread is not modified so it is up to the caller to ensure that\nthe count is correct.",15,null],[11,"fmt","","",16,null],[11,"traverse","","",16,null],[11,"eq","","",16,null],[11,"push","","",15,null],[11,"fmt","","",15,null],[11,"drop","","",15,null],[11,"new_thread","","Spawns a new gluon thread with its own stack and heap but while still sharing the same\nglobal environment",16,null],[11,"root_thread","","Roots `self`, extending the lifetime of this thread until at least the returned\n`RootedThread` is droppped",16,null],[11,"define_global","","Creates a new global value at `name`.\nFails if a global called `name` already exists.",16,null],[11,"get_global","","Retrieves the global called `name`.\nFails if the global does not exist or it does not have the correct type.",16,null],[11,"find_type_info","","Retrieves type information about the type `name`. Types inside records can be accessed\nusing dot notation (std.prelude.Option)",16,null],[11,"get_type","","Returns the gluon type that was bound to `T`",16,null],[11,"register_type","","Registers the type `T` as being a gluon type called `name` with generic arguments `args`",16,null],[11,"get_env","","Locks and retrieves the global environment of the vm",16,null],[11,"get_macros","","Retrieves the macros defined for this vm",16,null],[11,"collect","","Runs a garbage collection.",16,null],[11,"push","","Pushes a value to the top of the stack",16,null],[11,"pop","","Removes the top value from the stack",16,null],[11,"set_memory_limit","","",16,null],[11,"deref","","",15,null],[11,"clone","","",15,null],[11,"traverse","","",15,null],[11,"context","","",16,null],[11,"root","","Roots a userdata",16,null],[11,"root_string","","Roots a string",16,null],[11,"root_value","","Roots a value",16,null],[11,"root_value_ref","","Roots a value",16,null],[11,"add_bytecode","","",16,null],[11,"call_thunk","","",16,null],[11,"execute_io","","Calls a module, allowed to to run IO expressions",16,null],[11,"call_function","","Calls a function on the stack.\nWhen this function is called it is expected that the function exists at\n`stack.len() - args - 1` and that the arguments are of the correct type",16,null],[11,"resume","","",16,null],[11,"global_env","","",16,null],[11,"set_global","","",16,null],[11,"deep_clone_value","","",16,null]],"paths":[[4,"Error"],[3,"MacroValue"],[3,"TypecheckValue"],[3,"CompileValue"],[3,"ExecuteValue"],[8,"MacroExpandable"],[8,"Typecheckable"],[8,"Compileable"],[8,"Executable"],[3,"CheckImporter"],[3,"Import"],[4,"Error"],[8,"Importer"],[3,"DefaultImporter"],[3,"Compiler"],[3,"RootedThread"],[3,"Thread"]]};
searchIndex["clap"] = {"doc":"A simple-to-use, efficient, and full-featured library for parsing command line arguments and subcommands when writing console/terminal applications.","items":[[3,"Arg","clap","The abstract representation of a command line argument. Used to set all the options and\nrelationships that define a valid argument for the program.",null,null],[3,"ArgGroup","","`ArgGroup`s are a family of related [arguments] and way for you to express, &quot;Any of these\narguments&quot;. By placing arguments in a logical group, you can create easier requirement and\nexclusion rules instead of having to list each argument individually, or when you want a rule\nto apply &quot;any but not all&quot; arguments.",null,null],[3,"ArgMatches","","Used to get information about the arguments that where supplied to the program at runtime by\nthe user. New instances of this struct are obtained by using the [`App::get_matches`] family of\nmethods.",null,null],[3,"SubCommand","","The abstract representation of a command line subcommand.",null,null],[3,"Values","","An iterator for getting multiple values out of an argument via the [`ArgMatches::values_of`]\nmethod.",null,null],[3,"OsValues","","An iterator for getting multiple values out of an argument via the [`ArgMatches::values_of_os`]\nmethod. Usage of this iterator allows values which contain invalid UTF-8 code points unlike\n[`Values`].",null,null],[3,"App","","Used to create a representation of a command line program and all possible command line\narguments. Application settings are set using the &quot;builder pattern&quot; with the\n[`App::get_matches`] family of methods being the terminal methods that starts the\nruntime-parsing process. These methods then return information about the user supplied\narguments (or lack there of).",null,null],[3,"Error","","Command Line Argument Parser Error",null,null],[12,"message","","Formated error message",0,null],[12,"kind","","The type of error",0,null],[12,"info","","Any additional information passed along, such as the argument name that caused the error",0,null],[4,"ArgSettings","","Various settings that apply to arguments and may be set, unset, and checked via getter/setter\nmethods [`Arg::set`], [`Arg::unset`], and [`Arg::is_set`]\n[`Arg::set`]: ./struct.Arg.html#method.set\n[`Arg::unset`]: ./struct.Arg.html#method.unset\n[`Arg::is_set`]: ./struct.Arg.html#method.is_set",null,null],[13,"Required","","The argument must be used",1,null],[13,"Multiple","","The argument may be used multiple times such as `--flag --flag`",1,null],[13,"EmptyValues","","The argument allows empty values such as `--option &quot;&quot;`",1,null],[13,"Global","","The argument should be propagated down through all child [`SubCommands`]\n[`SubCommand`]: ./struct.SubCommand.html",1,null],[13,"Hidden","","The argument should **not** be shown in help text",1,null],[13,"TakesValue","","The argument accepts a value, such as `--option &lt;value&gt;`",1,null],[13,"UseValueDelimiter","","Determines if the argument allows values to be grouped via a delimter",1,null],[13,"NextLineHelp","","Prints the help text on the line after the argument",1,null],[13,"RequireDelimiter","","Requires the use of a value delimiter for all multiple values",1,null],[13,"HidePossibleValues","","Hides the possible values from the help string",1,null],[4,"AppSettings","","Application level settings, which affect how [`App`] operates",null,null],[13,"AllowInvalidUtf8","","Specifies that any invalid UTF-8 code points should *not* be treated as an error.\nThis is the default behavior of `clap`.",2,null],[13,"AllowLeadingHyphen","","Specifies that leading hyphens are allowed in argument *values*, such as negative numbers\nlike `-10`. (which would otherwise be parsed as another flag or option)",2,null],[13,"AllowNegativeNumbers","","Allows negative numbers to pass as values. This is similar to\n`AllowLeadingHyphen` except that it only allows numbers, all\nother undefined leading hyphens will fail to parse.",2,null],[13,"AllowExternalSubcommands","","Specifies that an unexpected positional argument,\nwhich would otherwise cause a [`ErrorKind::UnknownArgument`] error,\nshould instead be treated as a [`SubCommand`] within the [`ArgMatches`] struct.",2,null],[13,"ArgRequiredElseHelp","","Specifies that the help text should be displayed (and then exit gracefully),\nif no arguments are present at runtime (i.e. an empty run such as, `$ myprog`.",2,null],[13,"ColoredHelp","","Uses colorized help messages.",2,null],[13,"ColorAuto","","Enables colored output only when the output is going to a terminal or TTY.",2,null],[13,"ColorAlways","","Enables colored output regardless of whether or not the output is going to a terminal/TTY.",2,null],[13,"ColorNever","","Disables colored output no matter if the output is going to a terminal/TTY, or not.",2,null],[13,"DontDelimitTrailingValues","","Disables the automatic delimiting of values when `--` or [`AppSettings::TrailingVarArg`]\nwas used.",2,null],[13,"DisableVersion","","Disables `-V` and `--version` [`App`] without affecting any of the [`SubCommand`]s\n(Defaults to `false`; application *does* have a version flag)",2,null],[13,"DeriveDisplayOrder","","Displays the arguments and [`SubCommand`]s in the help message in the order that they were\ndeclared in, and not alphabetically which is the default.",2,null],[13,"GlobalVersion","","Specifies to use the version of the current command for all child [`SubCommand`]s.\n(Defaults to `false`; subcommands have independant version strings from their parents.)",2,null],[13,"Hidden","","Specifies that this [`SubCommand`] should be hidden from help messages",2,null],[13,"HidePossibleValuesInHelp","","Tells `clap` *not* to print possible values when displaying help information.\nThis can be useful if there are many values, or they are explained elsewhere.",2,null],[13,"NoBinaryName","","Specifies that the parser should not assume the first argument passed is the binary name.\nThis is normally the case when using a &quot;daemon&quot; style mode, or an interactive CLI where one\none would not normally type the binary or program name for each command.",2,null],[13,"NextLineHelp","","Places the help string for all arguments on the line after the argument.",2,null],[13,"SubcommandsNegateReqs","","Allows [`SubCommand`]s to override all requirements of the parent command.\nFor example if you had a subcommand or top level application with a required argument\nthat is only required as long as there is no subcommand present,\nusing this setting would allow you to set those arguments to [`Arg::required(true)`]\nand yet receive no error so long as the user uses a valid subcommand instead.",2,null],[13,"SubcommandRequiredElseHelp","","Specifies that the help text should be displayed (before exiting gracefully) if no\n[`SubCommand`]s are present at runtime (i.e. an empty run such as `$ myprog`).",2,null],[13,"StrictUtf8","","Specifies that any invalid UTF-8 code points should be treated as an error and fail\nwith a [`ErrorKind::InvalidUtf8`] error.",2,null],[13,"SubcommandRequired","","Allows specifying that if no [`SubCommand`] is present at runtime,\nerror and exit gracefully.",2,null],[13,"TrailingVarArg","","Specifies that the final positional argument is a &quot;VarArg&quot; and that `clap` should not\nattempt to parse any further args.",2,null],[13,"UnifiedHelpMessage","","Groups flags and options together, presenting a more unified help message\n(a la `getopts` or `docopt` style).",2,null],[13,"VersionlessSubcommands","","Disables `-V` and `--version` for all [`SubCommand`]s\n(Defaults to `false`; subcommands *do* have version flags.)",2,null],[13,"WaitOnError","","Will display a message &quot;Press [ENTER]/[RETURN] to continue...&quot; and wait for user before\nexiting",2,null],[4,"ErrorKind","","Command line argument parser kind of error",null,null],[13,"InvalidValue","","Occurs when an [`Arg`] has a set of possible values,\nand the user provides a value which isn&#39;t in that set.",3,null],[13,"UnknownArgument","","Occurs when a user provides a flag, option, argument or subcommand which isn&#39;t defined.",3,null],[13,"InvalidSubcommand","","Occurs when the user provides an unrecognized [`SubCommand`] which meets the threshold for\nbeing similar enough to an existing subcommand.  \nIf it doesn&#39;t meet the threshold, or the &#39;suggestions&#39; feature is disabled,\nthe more general [`UnknownArgument`] error is returned.",3,null],[13,"UnrecognizedSubcommand","","Occurs when the user provides an unrecognized [`SubCommand`] which either\ndoesn&#39;t meet the threshold for being similar enough to an existing subcommand,\nor the &#39;sggestions&#39; feature is disabled.  \nOtherwise the more detailed [`InvalidSubcommand`] error is returned.",3,null],[13,"EmptyValue","","Occurs when the user provides an empty value for an option that does not allow empty\nvalues.",3,null],[13,"ValueValidation","","Occurs when the user provides a value for an argument with a custom validation and the\nvalue fails that validation.",3,null],[13,"TooManyValues","","Occurs when a user provides more values for an argument than were defined by setting\n[`Arg::max_values`].",3,null],[13,"TooFewValues","","Occurs when the user provides fewer values for an argument than were defined by setting\n[`Arg::min_values`].",3,null],[13,"WrongNumberOfValues","","Occurs when the user provides a different number of values for an argument than what&#39;s\nbeen defined by setting [`Arg::number_of_values`] or than was implicitly set by\n[`Arg::value_names`].",3,null],[13,"ArgumentConflict","","Occurs when the user provides two values which conflict with each other and can&#39;t be used\ntogether.",3,null],[13,"MissingRequiredArgument","","Occurs when the user does not provide one or more required arguments.",3,null],[13,"MissingSubcommand","","Occurs when a subcommand is required (as defined by [`AppSettings::SubcommandRequired`]),\nbut the user does not provide one.",3,null],[13,"MissingArgumentOrSubcommand","","Occurs when either an argument or [`SubCommand`] is required, as defined by\n[`AppSettings::ArgRequiredElseHelp`], but the user did not provide one.",3,null],[13,"UnexpectedMultipleUsage","","Occurs when the user provides multiple values to an argument which doesn&#39;t allow that.",3,null],[13,"InvalidUtf8","","Occurs when the user provides a value containing invalid UTF-8 for an argument and\n[`AppSettings::StrictUtf8`] is set.",3,null],[13,"HelpDisplayed","","Not a true &quot;error&quot; as it means `--help` or similar was used.\nThe help message will be sent to `stdout`.",3,null],[13,"VersionDisplayed","","Not a true &quot;error&quot; as it means `--version` or similar was used.\nThe message will be sent to `stdout`.",3,null],[13,"ArgumentNotFound","","Occurs when using the [`value_t!`] and [`values_t!`] macros to convert an argument value\ninto type `T`, but the argument you requested wasn&#39;t used. I.e. you asked for an argument\nwith name `config` to be converted, but `config` wasn&#39;t used by the user.\n[`value_t!`]: ./macro.value_t!.html\n[`values_t!`]: ./macro.values_t!.html",3,null],[13,"Io","","Represents an [I/O error].\nCan occur when writing to `stderr` or `stdout` or reading a configuration file.\n[I/O error]: https://doc.rust-lang.org/std/io/struct.Error.html",3,null],[13,"Format","","Represents a [Format error] (which is a part of [`Display`]).\nTypically caused by writing to `stderr` or `stdout`.\n[`Display`]: https://doc.rust-lang.org/std/fmt/trait.Display.html\n[Format error]: https://doc.rust-lang.org/std/fmt/struct.Error.html",3,null],[4,"Shell","","Describes which shell to produce a completions file for",null,null],[13,"Bash","","Generates a .bash-completion completion file for the Bourne Again SHell (BASH)",4,null],[13,"Fish","","Generates a .fish completion file for the Friendly Interactive SHell (fish)",4,null],[13,"Zsh","","Generates a completion file for the Z SHell (ZSH)",4,null],[11,"clone","","",2,null],[11,"eq","","",2,null],[11,"fmt","","",2,null],[11,"from_str","","",2,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"new","","Creates a new instance of an application requiring a name. The name may be, but doesn&#39;t\nhave to be same as the binary. The name will be displayed to the user when they request to\nprint version or help and usage information.",5,{"inputs":[{"name":"s"}],"output":{"name":"self"}}],[11,"get_name","","Get the name of the app",5,null],[11,"get_bin_name","","Get the name of the binary",5,null],[11,"with_defaults","","Creates a new instance of an application requiring a name, but uses the [`crate_authors!`]\nand [`crate_version!`] macros to fill in the [`App::author`] and [`App::version`] fields.",5,{"inputs":[{"name":"s"}],"output":{"name":"self"}}],[11,"author","","Sets a string of author(s) that will be displayed to the user when they\nrequest the help information with `--help` or `-h`.",5,null],[11,"bin_name","","Overrides the system-determined binary name. This should only be used when absolutely\nneccessary, such as when the binary name for your application is misleading, or perhaps\n*not* how the user should invoke your program.",5,null],[11,"about","","Sets a string describing what the program does. This will be displayed when displaying help\ninformation.",5,null],[11,"after_help","","Adds additional help information to be displayed in addition to auto-generated help. This\ninformation is displayed **after** the auto-generated help information. This is often used\nto describe how to use the arguments, or caveats to be noted.",5,null],[11,"before_help","","Adds additional help information to be displayed in addition to auto-generated help. This\ninformation is displayed **before** the auto-generated help information. This is often used\nfor header information.",5,null],[11,"version","","Sets a string of the version number to be displayed when displaying version or help\ninformation.",5,null],[11,"usage","","Sets a custom usage string to override the auto-generated usage string.",5,null],[11,"help","","Sets a custom help message and overrides the auto-generated one. This should only be used\nwhen the auto-generated message does not suffice.",5,null],[11,"help_short","","Sets the [`short`] for the auto-generated `help` argument.",5,null],[11,"version_short","","Sets the [`short`] for the auto-generated `version` argument.",5,null],[11,"template","","Sets the help template to be used, overriding the default format.",5,null],[11,"setting","","Enables a single command, or [`SubCommand`], level settings.",5,null],[11,"settings","","Enables multiple command, or [`SubCommand`], level settings",5,null],[11,"global_setting","","Enables a single setting that is propogated *down* through all child [`SubCommand`]s.",5,null],[11,"global_settings","","Enables multiple settings which are propogated *down* through all child [`SubCommand`]s.",5,null],[11,"unset_setting","","Disables a single command, or [`SubCommand`], level setting.",5,null],[11,"unset_settings","","Disables multiple command, or [`SubCommand`], level settings.",5,null],[11,"set_term_width","","Sets the terminal width at which to wrap help messages. Defaults to `120`. Using `0` will\nignore terminal widths and use source formatting.",5,null],[11,"max_term_width","","Sets the max terminal width at which to wrap help messages. Using `0` will ignore terminal\nwidths and use source formatting.",5,null],[11,"arg","","Adds an [argument] to the list of valid possibilties.",5,null],[11,"args","","Adds multiple [arguments] to the list of valid possibilties",5,null],[11,"arg_from_usage","","A convenience method for adding a single [argument] from a usage type string. The string\nused follows the same rules and syntax as [`Arg::from_usage`]",5,null],[11,"args_from_usage","","Adds multiple [arguments] at once from a usage string, one per line. See\n[`Arg::from_usage`] for details on the syntax and rules supported.",5,null],[11,"alias","","Allows adding a [`SubCommand`] alias, which function as &quot;hidden&quot; subcommands that\nautomatically dispatch as if this subcommand was used. This is more efficient, and easier\nthan creating multiple hidden subcommands as one only needs to check for the existence of\nthis command, and not all variants.",5,null],[11,"aliases","","Allows adding [`SubCommand`] aliases, which function as &quot;hidden&quot; subcommands that\nautomatically dispatch as if this subcommand was used. This is more efficient, and easier\nthan creating multiple hidden subcommands as one only needs to check for the existence of\nthis command, and not all variants.",5,null],[11,"visible_alias","","Allows adding a [`SubCommand`] alias that functions exactly like those defined with\n[`App::alias`], except that they are visible inside the help message.",5,null],[11,"visible_aliases","","Allows adding multiple [`SubCommand`] aliases that functions exactly like those defined\nwith [`App::aliases`], except that they are visible inside the help message.",5,null],[11,"group","","Adds an [`ArgGroup`] to the application. [`ArgGroup`]s are a family of related arguments.\nBy placing them in a logical group, you can build easier requirement and exclusion rules.\nFor instance, you can make an entire [`ArgGroup`] required, meaning that one (and *only*\none) argument from that group must be present at runtime.",5,null],[11,"groups","","Adds multiple [`ArgGroup`]s to the [`App`] at once.",5,null],[11,"subcommand","","Adds a [`SubCommand`] to the list of valid possibilties. Subcommands are effectively\nsub-[`App`]s, because they can contain their own arguments, subcommands, version, usage,\netc. They also function just like [`App`]s, in that they get their own auto generated help,\nversion, and usage.",5,null],[11,"subcommands","","Adds multiple subcommands to the list of valid possibilties by iterating over an\n[`IntoIterator`] of [`SubCommand`]s",5,null],[11,"display_order","","Allows custom ordering of [`SubCommand`]s within the help message. Subcommands with a lower\nvalue will be displayed first in the help message. This is helpful when one would like to\nemphasise frequently used subcommands, or prioritize those towards the top of the list.\nDuplicate values **are** allowed. Subcommands with duplicate display orders will be\ndisplayed in alphabetical order.",5,null],[11,"print_help","","Prints the full help message to [`io::stdout()`] using a [`BufWriter`]",5,null],[11,"write_help","","Writes the full help message to the user to a [`io::Write`] object",5,null],[11,"write_version","","Writes the version message to the user to a [`io::Write`] object",5,null],[11,"gen_completions","","Generate a completions file for a specified shell at compile time.",5,null],[11,"gen_completions_to","","Generate a completions file for a specified shell at runtime.  Until `cargo install` can\ninstall extra files like a completion script, this may be used e.g. in a command that\noutputs the contents of the completion script, to be redirected into a file by the user.",5,null],[11,"get_matches","","Starts the parsing process, upon a failed parse an error will be displayed to the user and\nthe process will exit with the appropriate error code. By default this method gets all user\nprovided arguments from [`env::args_os`] in order to allow for invalid UTF-8 code points,\nwhich are legal on many platforms.",5,null],[11,"get_matches_safe","","Starts the parsing process. This method will return a [`clap::Result`] type instead of exiting\nthe process on failed parse. By default this method gets matches from [`env::args_os`]",5,null],[11,"get_matches_from","","Starts the parsing process. Like [`App::get_matches`] this method does not return a [`clap::Result`]\nand will automatically exit with an error message. This method, however, lets you specify\nwhat iterator to use when performing matches, such as a [`Vec`] of your making.",5,null],[11,"get_matches_from_safe","","Starts the parsing process. A combination of [`App::get_matches_from`], and\n[`App::get_matches_safe`]",5,null],[11,"get_matches_from_safe_borrow","","Starts the parsing process without consuming the [`App`] struct `self`. This is normally not\nthe desired functionality, instead prefer [`App::get_matches_from_safe`] which *does*\nconsume `self`.",5,null],[11,"clone","","",5,null],[11,"fmt","","",5,null],[11,"default","","",6,{"inputs":[],"output":{"name":"self"}}],[11,"with_name","","Creates a new instance of [`Arg`] using a unique string name. The name will be used to get\ninformation about whether or not the argument was used at runtime, get values, set\nrelationships with other args, etc..",6,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"from_usage","","Creates a new instance of [`Arg`] from a usage string. Allows creation of basic settings\nfor the [`Arg`]. The syntax is flexible, but there are some rules to follow.",6,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"short","","Sets the short version of the argument without the preceding `-`.",6,null],[11,"long","","Sets the long version of the argument without the preceding `--`.",6,null],[11,"alias","","Allows adding a [`Arg`] alias, which function as &quot;hidden&quot; arguments that\nautomatically dispatch as if this argument was used. This is more efficient, and easier\nthan creating multiple hidden arguments as one only needs to check for the existence of\nthis command, and not all variants.",6,null],[11,"aliases","","Allows adding [`Arg`] aliases, which function as &quot;hidden&quot; arguments that\nautomatically dispatch as if this argument was used. This is more efficient, and easier\nthan creating multiple hidden subcommands as one only needs to check for the existence of\nthis command, and not all variants.",6,null],[11,"visible_alias","","Allows adding a [`Arg`] alias that functions exactly like those defined with\n[`Arg::alias`], except that they are visible inside the help message.",6,null],[11,"visible_aliases","","Allows adding multiple [`Arg`] aliases that functions exactly like those defined\nwith [`Arg::aliases`], except that they are visible inside the help message.",6,null],[11,"help","","Sets the help text of the argument that will be displayed to the user when they print the\nusage/help information.",6,null],[11,"required","","Sets whether or not the argument is required by default. Required by default means it is\nrequired, when no other conflicting rules have been evaluated. Conflicting rules take\nprecedence over being required. **Default:** `false`",6,null],[11,"required_unless","","Sets an arg that override this arg&#39;s required setting. (i.e. this arg will be required\nunless this other argument is present).",6,null],[11,"required_unless_all","","Sets args that override this arg&#39;s required setting. (i.e. this arg will be required unless\nall these other arguments are present).",6,null],[11,"required_unless_one","","Sets args that override this arg&#39;s [required] setting. (i.e. this arg will be required\nunless *at least one of* these other arguments are present).",6,null],[11,"conflicts_with","","Sets a conflicting argument by name. I.e. when using this argument,\nthe following argument can&#39;t be present and vice versa.",6,null],[11,"conflicts_with_all","","The same as [`Arg::conflicts_with`] but allows specifying multiple two-way conlicts per\nargument.",6,null],[11,"overrides_with","","Sets a overridable argument by name. I.e. this argument and the following argument\nwill override each other in POSIX style (whichever argument was specified at runtime\n**last** &quot;wins&quot;)",6,null],[11,"overrides_with_all","","Sets multiple mutually overridable arguments by name. I.e. this argument and the following\nargument will override each other in POSIX style (whichever argument was specified at\nruntime **last** &quot;wins&quot;)",6,null],[11,"requires","","Sets an argument by name that is required when this one is present I.e. when\nusing this argument, the following argument *must* be present.",6,null],[11,"requires_all","","Sets multiple arguments by names that are required when this one is present I.e. when\nusing this argument, the following arguments *must* be present.",6,null],[11,"takes_value","","Specifies that the argument takes a value at run time.",6,null],[11,"hide_possible_values","","Specifies if the possible values of an argument should be displayed in the help text or\nnot. Defaults to `false` (i.e. show possible values)",6,null],[11,"index","","Specifies the index of a positional argument **starting at** 1.",6,null],[11,"multiple","","Specifies that the argument may appear more than once. For flags, this results\nin the number of occurrences of the flag being recorded. For example `-ddd` or `-d -d -d`\nwould count as three occurrences. For options there is a distinct difference in multiple\noccurrences vs multiple values.",6,null],[11,"global","","Specifies that an argument can be matched to all child [`SubCommand`]s.",6,null],[11,"empty_values","","Allows an argument to accept explicitly empty values. An empty value must be specified at\nthe command line with an explicit `&quot;&quot;`, or `&#39;&#39;`",6,null],[11,"hidden","","Hides an argument from help message output.",6,null],[11,"possible_values","","Specifies a list of possible values for this argument. At runtime, `clap` verifies that\nonly one of the specified values was used, or fails with an error message.",6,null],[11,"possible_value","","Specifies a possible value for this argument, one at a time. At runtime, `clap` verifies\nthat only one of the specified values was used, or fails with error message.",6,null],[11,"group","","Specifies the name of the [`ArgGroup`] the argument belongs to.",6,null],[11,"groups","","Specifies the names of multiple [`ArgGroup`]&#39;s the argument belongs to.",6,null],[11,"number_of_values","","Specifies how many values are required to satisfy this argument. For example, if you had a\n`-f &lt;file&gt;` argument where you wanted exactly 3 &#39;files&#39; you would set\n`.number_of_values(3)`, and this argument wouldn&#39;t be satisfied unless the user provided\n3 and only 3 values.",6,null],[11,"validator","","Allows one to perform a custom validation on the argument value. You provide a closure\nwhich accepts a [`String`] value, and return a [`Result`] where the [`Err(String)`] is a\nmessage displayed to the user.",6,null],[11,"max_values","","Specifies the *maximum* number of values are for this argument. For example, if you had a\n`-f &lt;file&gt;` argument where you wanted up to 3 &#39;files&#39; you would set `.max_values(3)`, and\nthis argument would be satisfied if the user provided, 1, 2, or 3 values.",6,null],[11,"min_values","","Specifies the *minimum* number of values for this argument. For example, if you had a\n`-f &lt;file&gt;` argument where you wanted at least 2 &#39;files&#39; you would set\n`.min_values(2)`, and this argument would be satisfied if the user provided, 2 or more\nvalues.",6,null],[11,"use_delimiter","","Specifies whether or not an argument should allow grouping of multiple values via a\ndelimiter. I.e. should `--option=val1,val2,val3` be parsed as three values (`val1`, `val2`,\nand `val3`) or as a single value (`val1,val2,val3`). Defaults to using `,` (comma) as the\nvalue delimiter for all arguments that accept values (options and positional arguments)",6,null],[11,"require_delimiter","","Specifies that *multiple values* may only be set using the delimiter. This means if an\nif an option is encountered, and no delimiter is found, it automatically assumed that no\nadditional values for that option follow. This is unlike the default, where it is generally\nassumed that more values will follow regardless of whether or not a delimiter is used.",6,null],[11,"value_delimiter","","Specifies the separator to use when values are clumped together, defaults to `,` (comma).",6,null],[11,"value_names","","Specify multiple names for values of option arguments. These names are cosmetic only, used\nfor help and usage strings only. The names are **not** used to access arguments. The values\nof the arguments are accessed in numeric order (i.e. if you specify two names `one` and\n`two` `one` will be the first matched value, `two` will be the second).",6,null],[11,"value_name","","Specifies the name for value of [option] or [positional] arguments inside of help\ndocumentation. This name is cosmetic only, the name is **not** used to access arguments.\nThis setting can be very helpful when describing the type of input the user should be\nusing, such as `FILE`, `INTERFACE`, etc. Although not required, it&#39;s somewhat convention to\nuse all capital letters for the value name.",6,null],[11,"default_value","","Specifies the value of the argument when *not* specified at runtime.",6,null],[11,"next_line_help","","When set to `true` the help string will be displayed on the line after the argument and\nindented once. This can be helpful for arguments with very long or complex help messages.\nThis can also be helpful for arguments with very long flag names, or many/long value names.",6,null],[11,"display_order","","Allows custom ordering of args within the help message. Args with a lower value will be\ndisplayed first in the help message. This is helpful when one would like to emphasise\nfrequently used args, or prioritize those towards the top of the list. Duplicate values\n**are** allowed. Args with duplicate display orders will be displayed in alphabetical\norder.",6,null],[11,"is_set","","Checks if one of the [`ArgSettings`] settings is set for the argument\n[`ArgSettings`]: ./enum.ArgSettings.html",6,null],[11,"set","","Sets one of the [`ArgSettings`] settings for the argument\n[`ArgSettings`]: ./enum.ArgSettings.html",6,null],[11,"unset","","Unsets one of the [`ArgSettings`] settings for the argument\n[`ArgSettings`]: ./enum.ArgSettings.html",6,null],[11,"from","","",6,{"inputs":[{"name":"arg"}],"output":{"name":"self"}}],[11,"clone","","",6,null],[11,"clone","","",7,null],[11,"fmt","","",7,null],[11,"default","","",7,{"inputs":[],"output":{"name":"self"}}],[11,"value_of","","Gets the value of a specific [option] or [positional] argument (i.e. an argument that takes\nan additional value at runtime). If the option wasn&#39;t present at runtime\nit returns `None`.",7,null],[11,"value_of_lossy","","Gets the lossy value of a specific argument. If the argument wasn&#39;t present at runtime\nit returns `None`. A lossy value is one which contains invalid UTF-8 code points, those\ninvalid points will be replaced with `\\u{FFFD}`",7,null],[11,"value_of_os","","Gets the OS version of a string value of a specific argument. If the option wasn&#39;t present\nat runtime it returns `None`. An OS value on Unix-like systems is any series of bytes,\nregardless of whether or not they contain valid UTF-8 code points. Since [`String`]s in\nRust are guaranteed to be valid UTF-8, a valid filename on a Unix system as an argument\nvalue may contain invalid UTF-8 code points.",7,null],[11,"values_of","","Gets a [`Values`] struct which implements [`Iterator`] for values of a specific argument\n(i.e. an argument that takes multiple values at runtime). If the option wasn&#39;t present at\nruntime it returns `None`",7,null],[11,"values_of_lossy","","Gets the lossy values of a specific argument. If the option wasn&#39;t present at runtime\nit returns `None`. A lossy value is one where if it contains invalid UTF-8 code points,\nthose invalid points will be replaced with `\\u{FFFD}`",7,null],[11,"values_of_os","","Gets a [`OsValues`] struct which is implements [`Iterator`] for [`OsString`] values of a\nspecific argument. If the option wasn&#39;t present at runtime it returns `None`. An OS value\non Unix-like systems is any series of bytes, regardless of whether or not they contain\nvalid UTF-8 code points. Since [`String`]s in Rust are guaranteed to be valid UTF-8, a valid\nfilename as an argument value on Linux (for example) may contain invalid UTF-8 code points.",7,null],[11,"is_present","","Returns `true` if an argument was present at runtime, otherwise `false`.",7,null],[11,"occurrences_of","","Returns the number of times an argument was used at runtime. If an argument isn&#39;t present\nit will return `0`.",7,null],[11,"subcommand_matches","","Because [`Subcommand`]s are essentially &quot;sub-[`App`]s&quot; they have their own [`ArgMatches`]\nas well. This method returns the [`ArgMatches`] for a particular subcommand or `None` if\nthe subcommand wasn&#39;t present at runtime.",7,null],[11,"subcommand_name","","Because [`Subcommand`]s are essentially &quot;sub-[`App`]s&quot; they have their own [`ArgMatches`]\nas well.But simply getting the sub-[`ArgMatches`] doesn&#39;t help much if we don&#39;t also know\nwhich subcommand was actually used. This method returns the name of the subcommand that was\nused at runtime, or `None` if one wasn&#39;t.",7,null],[11,"subcommand","","This brings together [`ArgMatches::subcommand_matches`] and [`ArgMatches::subcommand_name`]\nby returning a tuple with both pieces of information.",7,null],[11,"usage","","Returns a string slice of the usage statement for the [`App`] or [`SubCommand`]",7,null],[11,"clone","","",8,null],[11,"next","","",8,null],[11,"size_hint","","",8,null],[11,"next_back","","",8,null],[11,"clone","","",9,null],[11,"next","","",9,null],[11,"size_hint","","",9,null],[11,"next_back","","",9,null],[11,"clone","","",10,null],[11,"fmt","","",10,null],[11,"with_name","","Creates a new instance of a subcommand requiring a name. The name will be displayed\nto the user when they print version or help and usage information.",10,{"inputs":[{"name":"str"}],"output":{"name":"app"}}],[11,"default","","",11,{"inputs":[],"output":{"name":"arggroup"}}],[11,"with_name","","Creates a new instance of `ArgGroup` using a unique string name. The name will be used to\nget values from the group or refer to the group inside of conflict and requirement rules.",11,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"arg","","Adds an [argument] to this group by name",11,null],[11,"args","","Adds multiple [arguments] to this group by name",11,null],[11,"multiple","","Allows more than one of the [&#39;Arg&#39;]s in this group to be used. (Default: `false`)",11,null],[11,"required","","Sets the group as required or not. A required group will be displayed in the usage string\nof the application in the format `&lt;arg|arg2|arg3&gt;`. A required `ArgGroup` simply states\nthat one argument from this group *must* be present at runtime (unless\nconflicting with another argument).",11,null],[11,"requires","","Sets the requirement rules of this group. This is not to be confused with a\n[required group]. Requirement rules function just like [argument requirement rules], you\ncan name other arguments or groups that must be present when any one of the arguments from\nthis group is used.",11,null],[11,"requires_all","","Sets the requirement rules of this group. This is not to be confused with a\n[required group]. Requirement rules function just like [argument requirement rules], you\ncan name other arguments or groups that must be present when one of the arguments from this\ngroup is used.",11,null],[11,"conflicts_with","","Sets the exclusion rules of this group. Exclusion (aka conflict) rules function just like\n[argument exclusion rules], you can name other arguments or groups that must *not* be\npresent when one of the arguments from this group are used.",11,null],[11,"conflicts_with_all","","Sets the exclusion rules of this group. Exclusion rules function just like\n[argument exclusion rules], you can name other arguments or groups that must *not* be\npresent when one of the arguments from this group are used.",11,null],[11,"fmt","","",11,null],[11,"from","","",11,{"inputs":[{"name":"arggroup"}],"output":{"name":"self"}}],[11,"clone","","",11,null],[11,"clone","","",1,null],[11,"eq","","",1,null],[11,"fmt","","",1,null],[11,"from_str","","",1,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"eq","","",3,null],[11,"clone","","",3,null],[11,"fmt","","",3,null],[11,"fmt","","",0,null],[11,"use_stderr","","Should the message be written to `stdout` or not",0,null],[11,"exit","","Prints the error to `stderr` and exits with a status of `1`",0,null],[11,"with_description","","Create an error with a custom description.",0,{"inputs":[{"name":"str"},{"name":"errorkind"}],"output":{"name":"self"}}],[11,"description","","",0,null],[11,"fmt","","",0,null],[11,"from","","",0,{"inputs":[{"name":"error"}],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"error"}],"output":{"name":"self"}}],[11,"clone","","",4,null],[11,"fmt","","",4,null],[11,"variants","","A list of possible variants in `&amp;&#39;static str` form",4,null],[11,"from_str","","",4,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",4,null],[6,"Result","","Short hand for [`Result`] type\n[`Result`]: https://doc.rust-lang.org/std/result/enum.Result.html",null,null],[14,"value_t!","","Convenience macro getting a typed value `T` where `T` implements [`std::str::FromStr`] from an\nargument value. This macro returns a `Result&lt;T,String&gt;` which allows you as the developer to\ndecide what you&#39;d like to do on a failed parse. There are two types of errors, parse failures\nand those where the argument wasn&#39;t present (such as a non-required argument). You can use\nit to get a single value, or a iterator as with the [`ArgMatches::values_of`]",null,null],[14,"value_t_or_exit!","","Convenience macro getting a typed value `T` where `T` implements [`std::str::FromStr`] or\nexiting upon error, instead of returning a [`Result`] type.",null,null],[14,"values_t!","","Convenience macro getting a typed value [`Vec&lt;T&gt;`] where `T` implements [`std::str::FromStr`]\nThis macro returns a [`clap::Result&lt;Vec&lt;T&gt;&gt;`] which allows you as the developer to decide\nwhat you&#39;d like to do on a failed parse.",null,null],[14,"values_t_or_exit!","","Convenience macro getting a typed value [`Vec&lt;T&gt;`] where `T` implements [`std::str::FromStr`]\nor exiting upon error.",null,null],[14,"_clap_count_exprs!","","Counts the number of comma-delimited expressions passed to it.  The result is a compile-time\nevaluable expression, suitable for use as a static array size, or the value of a `const`.",null,null],[14,"arg_enum!","","Convenience macro to generate more complete enums with variants to be used as a type when\nparsing arguments. This enum also provides a `variants()` function which can be used to\nretrieve a `Vec&lt;&amp;&#39;static str&gt;` of the variant names, as well as implementing [`FromStr`] and\n[`Display`] automatically.",null,null],[14,"crate_version!","","Allows you to pull the version from your Cargo.toml at compile time as\nMAJOR.MINOR.PATCH_PKGVERSION_PRE",null,null],[14,"crate_authors!","","Allows you to pull the authors for the app from your Cargo.toml at\ncompile time as\n&quot;author1 lastname. &lt;author1@example.com&gt;&quot;,\n    &quot;author2 lastname. &lt;author2@example.com&gt;&quot;",null,null],[14,"clap_app!","","Build `App`, `Arg`s, `SubCommand`s and `Group`s with Usage-string like input\nbut without the parsing.",null,null]],"paths":[[3,"Error"],[4,"ArgSettings"],[4,"AppSettings"],[4,"ErrorKind"],[4,"Shell"],[3,"App"],[3,"Arg"],[3,"ArgMatches"],[3,"Values"],[3,"OsValues"],[3,"SubCommand"],[3,"ArgGroup"]]};
searchIndex["gluon_check"] = {"doc":"The `check` crate is responsible for ensuring that an AST expression is actually a valid\nprogram. This currently consits of three larger parts, typechecking, kindchecking and renaming.\nIf an AST passes the checks in `Typecheck::typecheck_expr` (which runs all of theses checks\nthe expression is expected to compile succesfully (if it does not it should be considered an\ninternal compiler error.","items":[[0,"typecheck","gluon_check","The main typechecking interface which is responsible for typechecking expressions, patterns,\netc. Only checks which need to be aware of expressions are handled here the actual unifying and\nchecking of types are done in the `unify_type` and `kindcheck` modules.",null,null],[3,"Typecheck","gluon_check::typecheck","Struct which provides methods to typecheck expressions.",null,null],[4,"TypeError","","Type representing a single error when checking a type",null,null],[13,"UndefinedVariable","","Variable has not been defined before it was used",0,null],[13,"NotAFunction","","Attempt to call a type which is not a function",0,null],[13,"UndefinedType","","Type has not been defined before it was used",0,null],[13,"UndefinedField","","Type were expected to have a certain field",0,null],[13,"PatternError","","Constructor type was found in a pattern but did not have the expected number of arguments",0,null],[13,"Unification","","Errors found when trying to unify two types",0,null],[13,"KindError","","Error were found when trying to unify the kinds of two types",0,null],[13,"Rename","","Errors found during renaming (overload resolution)",0,null],[13,"DuplicateTypeDefinition","","Multiple types were declared with the same name in the same expression",0,null],[13,"DuplicateField","","A field was defined more than once in a record constructor or pattern match",0,null],[13,"InvalidProjection","","Type is not a type which has any fields",0,null],[13,"UndefinedRecord","","Expected to find a record with the following fields",0,null],[12,"fields","gluon_check::typecheck::TypeError","",0,null],[13,"EmptyCase","gluon_check::typecheck","Found a case expression without any alternatives",0,null],[5,"extract_generics","","",null,null],[5,"unroll_typ","","Removes layers of `Type::App` and `Type::Record` by packing them into a single `Type::App` or\n`Type::Record`",null,{"inputs":[{"name":"type"}],"output":{"name":"option"}}],[6,"SpannedTypeError","","",null,null],[6,"Error","","Error returned when unsuccessfully typechecking an expression",null,null],[11,"eq","","",0,null],[11,"ne","","",0,null],[11,"fmt","","",0,null],[11,"from","","",0,{"inputs":[{"name":"error"}],"output":{"name":"typeerror"}}],[11,"from","","",0,{"inputs":[{"name":"renameerror"}],"output":{"name":"typeerror"}}],[11,"fmt","","",0,null],[11,"new","","Create a new typechecker which typechecks expressions in `module`",1,{"inputs":[{"name":"string"},{"name":"symbols"},{"name":"primitiveenv"}],"output":{"name":"typecheck"}}],[11,"typecheck_expr","","Typecheck `expr`. If successful the type of the expression will be returned and all\nidentifiers in `expr` will be filled with the inferred type",1,null],[11,"typecheck_expr_expected","","",1,null],[0,"unify_type","gluon_check","",null,null],[3,"State","gluon_check::unify_type","",null,null],[4,"TypeError","","",null,null],[13,"UndefinedType","","",2,null],[13,"FieldMismatch","","",2,null],[13,"SelfRecursive","","",2,null],[13,"UnableToGeneralize","","",2,null],[13,"MissingFields","","",2,null],[5,"merge_signature","","",null,{"inputs":[{"name":"substitution"},{"name":"scopedmap"},{"name":"u32"},{"name":"state"},{"name":"arctype"},{"name":"arctype"}],"output":{"name":"result"}}],[6,"Error","","",null,null],[6,"UnifierState","","",null,null],[11,"new","","",3,{"inputs":[{"name":"typeenv"},{"name":"substitution"}],"output":{"name":"state"}}],[11,"eq","","",2,null],[11,"ne","","",2,null],[11,"fmt","","",2,null],[11,"from","","",4,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"fmt","","",2,null],[0,"unify","gluon_check","",null,null],[3,"UnifierState","gluon_check::unify","",null,null],[12,"state","","",5,null],[12,"unifier","","",5,null],[4,"Error","","",null,null],[13,"TypeMismatch","","",6,null],[13,"Occurs","","",6,null],[13,"Other","","",6,null],[5,"unify","","Unify `l` and `r` taking into account and updating the substitution `subs` using the\n[Union-Find](https://en.wikipedia.org/wiki/Disjoint-set_data_structure) algorithm to\nresolve which types must be equal.\nIf the unification is successful the returned type is the unified type with as much sharing as\npossible which lets further computions be more efficient.",null,{"inputs":[{"name":"substitution"},{"name":"s"},{"name":"t"},{"name":"t"}],"output":{"name":"result"}}],[5,"intersection","","Calculates the intersection between two types. The intersection between two types is the most\nspecialized type which both types can sucessfully unify to.",null,{"inputs":[{"name":"substitution"},{"name":"s"},{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[8,"Unifier","","A `Unifier` is a type which implements a unifying strategy between two values.",null,null],[10,"report_error","","Reports an error to the `unifier` for cases when returning the error is not possible.",7,{"inputs":[{"name":"unifierstate"},{"name":"error"}],"output":null}],[10,"try_match","","Attempt to unify `l` and `r` using the strategy of `Self`.",7,{"inputs":[{"name":"unifierstate"},{"name":"type"},{"name":"type"}],"output":{"name":"option"}}],[8,"Unifiable","","A type which can be unified by checking for equivalence between the top level of\ntwo instances of the type and then recursively calling into the `unifier` on all sub-terms",null,null],[16,"Error","","",8,null],[10,"zip_match","","Perform one level of equality testing between `self` and `other` and recursively call\nback into the `unifier` for unification on any sub-terms.",8,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"fmt","","",6,null],[11,"fmt","","",6,null],[11,"report_error","","",5,null],[11,"try_match","","",5,null],[0,"kindcheck","gluon_check","",null,null],[3,"KindCheck","gluon_check::kindcheck","Struct containing methods for kindchecking types",null,null],[12,"subs","","",9,null],[4,"KindError","","Enumeration possible errors other than mismatch and occurs when kindchecking",null,null],[13,"UndefinedType","","The type is not defined in the current scope",10,null],[5,"fmt_kind_error","","",null,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[6,"Error","","",null,null],[6,"Result","","",null,null],[11,"new","","",9,{"inputs":[{"name":"kindenv"},{"name":"identenv"}],"output":{"name":"kindcheck"}}],[11,"add_local","","",9,null],[11,"set_variables","","",9,null],[11,"type_kind","","",9,null],[11,"function1_kind","","",9,null],[11,"function2_kind","","",9,null],[11,"row_kind","","",9,null],[11,"kindcheck_type","","",9,null],[11,"kindcheck_expected","","",9,null],[11,"finalize_type","","",9,null],[11,"finalize_generic","","",9,null],[11,"eq","","",10,null],[11,"ne","","",10,null],[11,"fmt","","",10,null],[0,"completion","gluon_check","Primitive auto completion and type quering on ASTs",null,null],[3,"Suggestion","gluon_check::completion","",null,null],[12,"name","","",11,null],[12,"typ","","",11,null],[5,"find","","",null,{"inputs":[{"name":"t"},{"name":"spannedexpr"},{"name":"bytepos"}],"output":{"name":"result"}}],[5,"suggest","","",null,{"inputs":[{"name":"t"},{"name":"spannedexpr"},{"name":"bytepos"}],"output":{"name":"vec"}}],[0,"metadata","gluon_check","",null,null],[5,"metadata","gluon_check::metadata","Queries `expr` for the metadata which it contains.",null,{"inputs":[{"name":"metadataenv"},{"name":"spannedexpr"}],"output":{"name":"metadata"}}]],"paths":[[4,"TypeError"],[3,"Typecheck"],[4,"TypeError"],[3,"State"],[6,"Error"],[3,"UnifierState"],[4,"Error"],[8,"Unifier"],[8,"Unifiable"],[3,"KindCheck"],[4,"KindError"],[3,"Suggestion"]]};
searchIndex["gluon_parser"] = {"doc":"The parser is a bit more complex than it needs to be as it needs to be fully specialized to\navoid a recompilation every time a later part of the compiler is changed. Due to this the\nstring interner and therefore also garbage collector needs to compiled before the parser.","items":[[3,"ParseError","gluon_parser","",null,null],[12,"errors","","",0,null],[3,"StreamType","","",null,null],[3,"Wrapper","","",null,null],[5,"parse_expr","","",null,{"inputs":[{"name":"identenv"},{"name":"str"}],"output":{"name":"result"}}],[5,"parse_expr_","","Parses a gluon expression",null,{"inputs":[{"name":"identenv"},{"name":"str"}],"output":{"name":"result"}}],[0,"lexer","","",null,null],[3,"LocatedStream","gluon_parser::lexer","",null,null],[3,"Offside","","",null,null],[12,"location","","",1,null],[12,"context","","",1,null],[3,"Contexts","","",null,null],[3,"Lexer","","",null,null],[12,"env","","",2,null],[12,"input","","",2,null],[12,"unprocessed_tokens","","",2,null],[12,"indent_levels","","",2,null],[4,"Delimiter","","",null,null],[13,"Brace","","",3,null],[13,"Bracket","","",3,null],[13,"Paren","","",3,null],[4,"IdentType","","",null,null],[13,"Constructor","","Constructors are identifiers starting with an uppercase letter",4,null],[13,"Operator","","An operator in identifier position (Example: (+), (-), (&gt;&gt;=))",4,null],[13,"Variable","","A normal variable",4,null],[4,"Token","","",null,null],[13,"Ident","","",5,null],[13,"Operator","","",5,null],[13,"String","","",5,null],[13,"Char","","",5,null],[13,"Int","","",5,null],[13,"Byte","","",5,null],[13,"Float","","",5,null],[13,"DocComment","","",5,null],[13,"Let","","",5,null],[13,"And","","",5,null],[13,"In","","",5,null],[13,"Type","","",5,null],[13,"Match","","",5,null],[13,"With","","",5,null],[13,"If","","",5,null],[13,"Then","","",5,null],[13,"Else","","",5,null],[13,"Open","","",5,null],[13,"Close","","",5,null],[13,"Lambda","","",5,null],[13,"RightArrow","","",5,null],[13,"Colon","","",5,null],[13,"Dot","","",5,null],[13,"Comma","","",5,null],[13,"Pipe","","",5,null],[13,"Equal","","",5,null],[13,"OpenBlock","","",5,null],[13,"CloseBlock","","",5,null],[13,"Semi","","",5,null],[13,"EOF","","",5,null],[4,"Context","","",null,null],[13,"Block","","Context which contains several expressions/declarations separated by semicolons",6,null],[12,"emit_semi","gluon_parser::lexer::Context","",6,null],[12,"needs_close","","",6,null],[13,"Expr","gluon_parser::lexer","A simple expression",6,null],[13,"Let","","",6,null],[13,"Type","","",6,null],[13,"If","","",6,null],[13,"Then","","",6,null],[13,"Delimiter","","",6,null],[13,"MatchClause","","",6,null],[13,"Lambda","","",6,null],[6,"Error","","",null,null],[6,"SpannedToken","","",null,null],[11,"clone","","",7,null],[11,"uncons","","",7,null],[11,"position","","",7,null],[11,"uncons_range","","",7,null],[11,"uncons_while","","",7,null],[11,"fmt","","",3,null],[11,"eq","","",3,null],[11,"clone","","",3,null],[11,"fmt","","",3,null],[11,"fmt","","",4,null],[11,"eq","","",4,null],[11,"clone","","",4,null],[11,"fmt","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"clone","","",5,null],[11,"fmt","","",5,null],[11,"map","","",5,null],[11,"fmt","","",1,null],[11,"clone","","",1,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"fmt","","",6,null],[11,"clone","","",6,null],[11,"last","","",8,null],[11,"last_mut","","",8,null],[11,"pop","","",8,null],[11,"push","","",8,null],[11,"replace","","",8,null],[11,"new","","",2,{"inputs":[{"name":"i"}],"output":{"name":"lexer"}}],[11,"next_token","","",2,null],[11,"uncons","","",2,null],[11,"position","","",2,null],[6,"Error","gluon_parser","",null,null],[11,"eq","","",0,null],[11,"ne","","",0,null],[11,"fmt","","",0,null],[11,"fmt","","",0,null],[11,"clone","","",9,null],[11,"uncons","","",9,null],[11,"position","","",9,null],[11,"clone","","",10,null],[11,"uncons","","",10,null],[11,"position","","",10,null]],"paths":[[3,"ParseError"],[3,"Offside"],[3,"Lexer"],[4,"Delimiter"],[4,"IdentType"],[4,"Token"],[4,"Context"],[3,"LocatedStream"],[3,"Contexts"],[3,"StreamType"],[3,"Wrapper"]]};
searchIndex["gluon_vm"] = {"doc":"Crate which contain the virtual machine which executes gluon programs","items":[[3,"Variants","gluon_vm","",null,null],[4,"Error","","Representation of all possible errors that can occur when interacting with the `vm` crate",null,null],[13,"Yield","","",0,null],[13,"Dead","","",0,null],[13,"UndefinedBinding","","",0,null],[13,"UndefinedField","","",0,null],[13,"TypeAlreadyExists","","",0,null],[13,"GlobalAlreadyExists","","",0,null],[13,"MetadataDoesNotExist","","",0,null],[13,"WrongType","","",0,null],[13,"OutOfMemory","","",0,null],[12,"limit","gluon_vm::Error","",0,null],[12,"needed","","",0,null],[13,"StackOverflow","gluon_vm","",0,null],[13,"Message","","",0,null],[13,"Panic","","",0,null],[0,"api","","The marshalling api",null,null],[3,"Data","gluon_vm::api","",null,null],[3,"Hole","","Marker type representing a hole",null,null],[3,"Primitive","","",null,null],[3,"RefPrimitive","","",null,null],[3,"Generic","","",null,null],[12,"0","","",1,null],[3,"WithVM","","Wrapper type which passes acts as the type `T` but also passes the `VM` to the called function",null,null],[12,"vm","","",2,null],[12,"value","","",2,null],[3,"OpaqueValue","","Type which represents an array in gluon\nType implementing both `Pushable` and `Getable` of values of `V`.\nThe actual value, `V` is not accessible directly but is only intended to be transferred between\ntwo different threads.",null,null],[3,"Array","","Type which represents an array",null,null],[3,"CPrimitive","","",null,null],[3,"Function","","Type which represents an function in gluon",null,null],[4,"ValueRef","","",null,null],[13,"Byte","","",3,null],[13,"Int","","",3,null],[13,"Float","","",3,null],[13,"String","","",3,null],[13,"Data","","",3,null],[13,"Tag","","",3,null],[13,"Userdata","","",3,null],[13,"Internal","","",3,null],[4,"IO","","Type representing gluon&#39;s IO type#[derive(Debug)]",null,null],[13,"Value","","",4,null],[13,"Exception","","",4,null],[4,"RuntimeResult","","",null,null],[13,"Return","","",5,null],[13,"Panic","","",5,null],[5,"primitive","","",null,null],[5,"primitive_f","","",null,null],[0,"generic","","Module containing types which represent generic variables in gluon&#39;s type system",null,null],[4,"A","gluon_vm::api::generic","",null,null],[4,"B","","",null,null],[4,"C","","",null,null],[4,"D","","",null,null],[4,"E","","",null,null],[4,"F","","",null,null],[4,"G","","",null,null],[4,"H","","",null,null],[4,"I","","",null,null],[4,"J","","",null,null],[4,"K","","",null,null],[4,"L","","",null,null],[4,"M","","",null,null],[4,"N","","",null,null],[4,"O","","",null,null],[4,"P","","",null,null],[4,"Q","","",null,null],[4,"R","","",null,null],[4,"X","","",null,null],[4,"Y","","",null,null],[4,"Z","","",null,null],[11,"eq","","",6,null],[11,"clone","","",6,null],[11,"make_type","","",6,{"inputs":[{"name":"thread"}],"output":{"name":"arctype"}}],[11,"eq","","",7,null],[11,"clone","","",7,null],[11,"make_type","","",7,{"inputs":[{"name":"thread"}],"output":{"name":"arctype"}}],[11,"eq","","",8,null],[11,"clone","","",8,null],[11,"make_type","","",8,{"inputs":[{"name":"thread"}],"output":{"name":"arctype"}}],[11,"eq","","",9,null],[11,"clone","","",9,null],[11,"make_type","","",9,{"inputs":[{"name":"thread"}],"output":{"name":"arctype"}}],[11,"eq","","",10,null],[11,"clone","","",10,null],[11,"make_type","","",10,{"inputs":[{"name":"thread"}],"output":{"name":"arctype"}}],[11,"eq","","",11,null],[11,"clone","","",11,null],[11,"make_type","","",11,{"inputs":[{"name":"thread"}],"output":{"name":"arctype"}}],[11,"eq","","",12,null],[11,"clone","","",12,null],[11,"make_type","","",12,{"inputs":[{"name":"thread"}],"output":{"name":"arctype"}}],[11,"eq","","",13,null],[11,"clone","","",13,null],[11,"make_type","","",13,{"inputs":[{"name":"thread"}],"output":{"name":"arctype"}}],[11,"eq","","",14,null],[11,"clone","","",14,null],[11,"make_type","","",14,{"inputs":[{"name":"thread"}],"output":{"name":"arctype"}}],[11,"eq","","",15,null],[11,"clone","","",15,null],[11,"make_type","","",15,{"inputs":[{"name":"thread"}],"output":{"name":"arctype"}}],[11,"eq","","",16,null],[11,"clone","","",16,null],[11,"make_type","","",16,{"inputs":[{"name":"thread"}],"output":{"name":"arctype"}}],[11,"eq","","",17,null],[11,"clone","","",17,null],[11,"make_type","","",17,{"inputs":[{"name":"thread"}],"output":{"name":"arctype"}}],[11,"eq","","",18,null],[11,"clone","","",18,null],[11,"make_type","","",18,{"inputs":[{"name":"thread"}],"output":{"name":"arctype"}}],[11,"eq","","",19,null],[11,"clone","","",19,null],[11,"make_type","","",19,{"inputs":[{"name":"thread"}],"output":{"name":"arctype"}}],[11,"eq","","",20,null],[11,"clone","","",20,null],[11,"make_type","","",20,{"inputs":[{"name":"thread"}],"output":{"name":"arctype"}}],[11,"eq","","",21,null],[11,"clone","","",21,null],[11,"make_type","","",21,{"inputs":[{"name":"thread"}],"output":{"name":"arctype"}}],[11,"eq","","",22,null],[11,"clone","","",22,null],[11,"make_type","","",22,{"inputs":[{"name":"thread"}],"output":{"name":"arctype"}}],[11,"eq","","",23,null],[11,"clone","","",23,null],[11,"make_type","","",23,{"inputs":[{"name":"thread"}],"output":{"name":"arctype"}}],[11,"eq","","",24,null],[11,"clone","","",24,null],[11,"make_type","","",24,{"inputs":[{"name":"thread"}],"output":{"name":"arctype"}}],[11,"eq","","",25,null],[11,"clone","","",25,null],[11,"make_type","","",25,{"inputs":[{"name":"thread"}],"output":{"name":"arctype"}}],[11,"eq","","",26,null],[11,"clone","","",26,null],[11,"make_type","","",26,{"inputs":[{"name":"thread"}],"output":{"name":"arctype"}}],[0,"record","gluon_vm::api","",null,null],[3,"Record","gluon_vm::api::record","",null,null],[12,"fields","","",27,null],[3,"HList","","",null,null],[12,"0","","",28,null],[12,"1","","",28,null],[8,"Field","","",null,null],[10,"name","","",29,{"inputs":[],"output":{"name":"str"}}],[8,"FieldList","","",null,null],[10,"len","","",30,{"inputs":[],"output":{"name":"vmindex"}}],[8,"FieldTypes","","",null,null],[10,"field_types","","",31,{"inputs":[{"name":"thread"},{"name":"vec"}],"output":null}],[8,"PushableFieldList","","",null,null],[10,"push","","",32,null],[8,"GetableFieldList","","",null,null],[10,"from_value","","",33,null],[11,"split","","",27,null],[11,"len","","",28,{"inputs":[],"output":{"name":"vmindex"}}],[11,"field_types","","",28,{"inputs":[{"name":"thread"},{"name":"vec"}],"output":null}],[11,"push","","",28,null],[11,"from_value","","",28,null],[11,"make_type","","",27,{"inputs":[{"name":"thread"}],"output":{"name":"arctype"}}],[11,"push","","",27,null],[11,"from_value","","",27,{"inputs":[{"name":"thread"},{"name":"variants"}],"output":{"name":"option"}}],[6,"GluonFunction","gluon_vm::api","",null,null],[6,"FunctionRef","","Type which represents a function reference in gluon",null,null],[8,"Userdata","","",null,null],[11,"deep_clone","","",34,null],[8,"VmType","","Trait which maps a type in rust to a type in gluon",null,null],[16,"Type","","A version of `Self` which implements `Any` allowing a `TypeId` to be retrieved",35,null],[11,"make_type","","Creates an gluon type which maps to `Self` in rust",35,{"inputs":[{"name":"thread"}],"output":{"name":"arctype"}}],[11,"extra_args","","How many extra arguments a function returning this type requires.\nUsed for abstract types which when used in return position should act like they still need\nmore arguments before they are called",35,{"inputs":[],"output":{"name":"vmindex"}}],[8,"Pushable","","Trait which allows a rust value to be pushed to the virtual machine",null,null],[10,"push","","Pushes `self` to `stack`. If the call is successful a single element should have been added\nto the stack and `Ok(())` should be returned. If the call is unsuccessful `Status:Error`\nshould be returned and the stack should be left intact",36,null],[11,"status_push","","",36,null],[8,"Getable","","Trait which allows rust values to be retrieved from the virtual machine",null,null],[11,"from_value_unsafe","","unsafe version of from_value which allows references to the internal of GcPtr&#39;s to be\nextracted if `value` is rooted",37,{"inputs":[{"name":"thread"},{"name":"variants"}],"output":{"name":"option"}}],[10,"from_value","","",37,{"inputs":[{"name":"thread"},{"name":"variants"}],"output":{"name":"option"}}],[8,"FunctionType","","Trait which represents a function",null,null],[10,"arguments","","Returns how many arguments the function needs to be provided to call it",38,{"inputs":[],"output":{"name":"vmindex"}}],[8,"VmFunction","","Trait which abstracts over types which can be called by being pulling the arguments it needs\nfrom the virtual machine&#39;s stack",null,null],[10,"unpack_and_call","","",39,null],[11,"fmt","","",3,null],[11,"clone","","",3,null],[11,"eq","","",3,null],[11,"eq","","",3,null],[11,"new","","",3,{"inputs":[{"name":"value"}],"output":{"name":"valueref"}}],[11,"fmt","","",40,null],[11,"eq","","",40,null],[11,"ne","","",40,null],[11,"clone","","",40,null],[11,"tag","","",40,null],[11,"len","","",40,null],[11,"get","","",40,null],[11,"make_type","","",41,{"inputs":[{"name":"thread"}],"output":{"name":"arctype"}}],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"fmt","","",4,null],[11,"eq","","",1,null],[11,"ne","","",1,null],[11,"fmt","","",1,null],[11,"from","","",1,{"inputs":[{"name":"value"}],"output":{"name":"generic"}}],[11,"make_type","","",1,{"inputs":[{"name":"thread"}],"output":{"name":"arctype"}}],[11,"extra_args","","",1,{"inputs":[],"output":{"name":"vmindex"}}],[11,"push","","",1,null],[11,"from_value","","",1,{"inputs":[{"name":"thread"},{"name":"variants"}],"output":{"name":"option"}}],[11,"traverse","","",1,null],[11,"make_type","","",2,{"inputs":[{"name":"thread"}],"output":{"name":"arctype"}}],[11,"extra_args","","",2,{"inputs":[],"output":{"name":"vmindex"}}],[11,"push","","",2,null],[11,"from_value_unsafe","","",2,{"inputs":[{"name":"thread"},{"name":"variants"}],"output":{"name":"option"}}],[11,"from_value","","",2,{"inputs":[{"name":"thread"},{"name":"variants"}],"output":{"name":"option"}}],[11,"make_type","","",5,{"inputs":[{"name":"thread"}],"output":{"name":"arctype"}}],[11,"push","","",5,null],[11,"make_type","","",4,{"inputs":[{"name":"thread"}],"output":{"name":"arctype"}}],[11,"extra_args","","",4,{"inputs":[],"output":{"name":"vmindex"}}],[11,"from_value","","",4,{"inputs":[{"name":"thread"},{"name":"variants"}],"output":{"name":"option"}}],[11,"push","","",4,null],[11,"fmt","","",42,null],[11,"get_value","","Unsafe as `Value` are not rooted",42,null],[11,"get_ref","","",42,null],[11,"make_type","","",42,{"inputs":[{"name":"thread"}],"output":{"name":"arctype"}}],[11,"push","","",42,null],[11,"from_value","","",42,{"inputs":[{"name":"thread"},{"name":"variants"}],"output":{"name":"option"}}],[11,"from_value","","",42,{"inputs":[{"name":"thread"},{"name":"variants"}],"output":{"name":"option"}}],[11,"deref","","",43,null],[11,"vm","","",43,null],[11,"get","","",43,null],[11,"make_type","","",43,{"inputs":[{"name":"thread"}],"output":{"name":"arctype"}}],[11,"push","","",43,null],[11,"from_value","","",43,{"inputs":[{"name":"thread"},{"name":"variants"}],"output":{"name":"option"}}],[11,"make_type","","",44,{"inputs":[{"name":"thread"}],"output":{"name":"arctype"}}],[11,"push","","",44,null],[11,"make_type","","",45,{"inputs":[{"name":"thread"}],"output":{"name":"arctype"}}],[11,"push","","",45,null],[11,"new","","",46,{"inputs":[{"name":"gluonfunction"},{"name":"vmindex"},{"name":"str"}],"output":{"name":"cprimitive"}}],[11,"push","","",46,null],[11,"value","","",47,null],[11,"make_type","","",47,{"inputs":[{"name":"thread"}],"output":{"name":"arctype"}}],[11,"push","","",47,null],[11,"from_value","","",47,{"inputs":[{"name":"thread"},{"name":"variants"}],"output":{"name":"option"}}],[11,"call","","",47,null],[11,"call","","",47,null],[11,"call","","",47,null],[11,"call","","",47,null],[11,"call","","",47,null],[11,"call","","",47,null],[11,"call","","",47,null],[11,"call","","",47,null],[0,"channel","gluon_vm","",null,null],[3,"Sender","gluon_vm::channel","",null,null],[3,"Receiver","","",null,null],[5,"load","","",null,{"inputs":[{"name":"thread"}],"output":{"name":"vmresult"}}],[6,"ChannelRecord","","",null,null],[11,"fmt","","",48,null],[11,"traverse","","",48,null],[11,"traverse","","",49,null],[11,"fmt","","",49,null],[11,"make_type","","",48,{"inputs":[{"name":"thread"}],"output":{"name":"arctype"}}],[11,"make_type","","",49,{"inputs":[{"name":"thread"}],"output":{"name":"arctype"}}],[0,"compiler","gluon_vm","",null,null],[3,"CompiledFunction","gluon_vm::compiler","",null,null],[12,"args","","",50,null],[12,"max_stack_size","","The maximum possible number of stack slots needed for this function",50,null],[12,"id","","",50,null],[12,"typ","","",50,null],[12,"instructions","","",50,null],[12,"inner_functions","","",50,null],[12,"strings","","",50,null],[12,"module_globals","","Storage for globals which are needed by the module which is currently being compiled",50,null],[12,"records","","",50,null],[12,"source_map","","Maps instruction indexes to the line that spawned them",50,null],[3,"Compiler","","",null,null],[4,"Variable","","",null,null],[13,"Stack","","",51,null],[13,"Global","","",51,null],[13,"Constructor","","",51,null],[13,"UpVar","","",51,null],[6,"CExpr","","",null,null],[8,"CompilerEnv","","",null,null],[10,"find_var","","",52,null],[11,"fmt","","",51,null],[11,"clone","","",51,null],[11,"fmt","","",50,null],[11,"new","","",50,{"inputs":[{"name":"vmindex"},{"name":"symbol"},{"name":"arctype"}],"output":{"name":"compiledfunction"}}],[11,"find_kind","","",53,null],[11,"find_type","","",53,null],[11,"find_type_info","","",53,null],[11,"find_record","","",53,null],[11,"new","","",53,{"inputs":[{"name":"compilerenv"},{"name":"globalvmstate"},{"name":"symbolmodule"},{"name":"source"}],"output":{"name":"compiler"}}],[11,"compile_expr","","Compiles an expression to a zero argument function which can be directly fed to the\ninterpreter",53,null],[0,"debug","gluon_vm","",null,null],[5,"load","gluon_vm::debug","",null,{"inputs":[{"name":"thread"}],"output":{"name":"result"}}],[0,"gc","gluon_vm","",null,null],[3,"WriteOnly","gluon_vm::gc","Pointer type which can only be written to.",null,null],[3,"Gc","","A mark and sweep garbage collector.",null,null],[3,"Move","","`DataDef` that moves its value directly into the pointer\nuseful for sized types",null,null],[12,"0","","",54,null],[3,"GcPtr","","A pointer to a garbage collected value.",null,null],[8,"FromPtr","","Trait which creates a typed pointer from a *mut () pointer.\nFor `Sized` types this is just a cast but for unsized types some more metadata must be taken\nfrom the provided `D` value to make it initialize correctly.",null,null],[10,"make_ptr","","",55,null],[8,"DataDef","","A definition of some data which may be allocated by the garbage collector.",null,null],[16,"Value","","The type of the value allocated.",56,null],[10,"size","","Returns how many bytes need to be allocted for this `DataDef`",56,null],[10,"initialize","","Consumes `self` to initialize the allocated value.\nReturns the initialized pointer.",56,null],[8,"Traverseable","","Trait which must be implemented on all root types which contain `GcPtr`\nA type implementing Traverseable must call traverse on each of its fields\nwhich in turn contains `GcPtr`",null,null],[11,"traverse","","",57,null],[11,"as_mut_ptr","","Retrieves the pointer allowing it to be manipulated freely.\nAs it points to uninitialized data care must be taken so to not read it before it has been\ninitialized",58,null],[11,"write","","Writes a value to the pointer and returns a pointer to the now initialized value.",58,null],[11,"write_slice","","",58,null],[11,"write_str","","",58,null],[11,"fmt","","",59,null],[11,"size","","",54,null],[11,"initialize","","",54,null],[11,"clone","","",60,null],[11,"deref","","",60,null],[11,"borrow","","",60,null],[11,"eq","","",60,null],[11,"cmp","","",60,null],[11,"partial_cmp","","",60,null],[11,"hash","","",60,null],[11,"fmt","","",60,null],[11,"fmt","","",60,null],[11,"as_mut","","Unsafe as it is up to the caller to ensure that this pointer is not referenced somewhere\nelse",60,null],[11,"from_raw","","Unsafe as `ptr` must have been allocted by this garbage collector",60,null],[11,"generation","","",60,null],[11,"as_traverseable","","Coerces `self` to a `Traverseable` trait object",60,null],[11,"as_traverseable_string","","Coerces `self` to a `Traverseable` trait object",60,null],[11,"traverse","","",54,null],[11,"traverse","","",60,null],[11,"new","","Constructs a new garbage collector",59,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"gc"}}],[11,"set_memory_limit","","",59,null],[11,"generation","","",59,null],[11,"new_child_gc","","",59,null],[11,"alloc_and_collect","","Allocates a new object. If the garbage collector has hit the collection limit a collection\nwill occur.",59,null],[11,"alloc","","Allocates a new object.",59,null],[11,"alloc_ignore_limit","","",59,null],[11,"check_collect","","",59,null],[11,"collect","","Does a mark and sweep collection by walking from `roots`. This function is unsafe since\nroots need to cover all reachable object.",59,null],[11,"mark","","Marks the GcPtr\nReturns true if the pointer was already marked",59,null],[0,"macros","gluon_vm","Module providing the building blocks to create macros and expand them.",null,null],[3,"MacroEnv","gluon_vm::macros","Type containing macros bound to symbols which can be applied on an AST expression to transform\nit.",null,null],[3,"MacroExpander","","",null,null],[12,"state","","",61,null],[12,"vm","","",61,null],[12,"errors","","",61,null],[6,"Error","","",null,null],[8,"Macro","","A trait which abstracts over macros.",null,null],[10,"expand","","",62,null],[11,"is","","Returns true if the boxed type is the same as `T`",62,null],[11,"downcast_ref","","Returns some reference to the boxed value if it is of type `T`, or\n`None` if it isn&#39;t.",62,null],[11,"downcast_ref_unchecked","","Returns a reference to the boxed value, blindly assuming it to be of type `T`.\nIf you are not *absolutely certain* of `T`, you *must not* call this.",62,null],[11,"downcast_mut","","Returns some mutable reference to the boxed value if it is of type `T`, or\n`None` if it isn&#39;t.",62,null],[11,"downcast_mut_unchecked","","Returns a mutable reference to the boxed value, blindly assuming it to be of type `T`.\nIf you are not *absolutely certain* of `T`, you *must not* call this.",62,null],[11,"downcast","","Returns the boxed value if it is of type `T`, or `Err(Self)` if it isn&#39;t.",62,{"inputs":[{"name":"box"}],"output":{"name":"result"}}],[11,"downcast_unchecked","","Returns the boxed value, blindly assuming it to be of type `T`.\nIf you are not *absolutely certain* of `T`, you *must not* call this.",62,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"new","","Creates a new `MacroEnv`",63,{"inputs":[],"output":{"name":"macroenv"}}],[11,"insert","","Inserts a `Macro` which acts on any occurance of `symbol` when applied to an expression.",63,null],[11,"get","","Retrieves the macro bound to `symbol`",63,null],[11,"run","","Runs the macros in this `MacroEnv` on `expr` using `env` as the context of the expansion",63,null],[11,"new","","",61,{"inputs":[{"name":"thread"}],"output":{"name":"macroexpander"}}],[11,"finish","","",61,null],[11,"run","","",61,null],[11,"visit_expr","","",61,null],[0,"thread","gluon_vm","The thread/vm type",null,null],[3,"RootedValue","gluon_vm::thread","A rooted value",null,null],[3,"Root","","A rooted userdata value",null,null],[3,"RootStr","","A rooted string",null,null],[3,"Thread","","Representation of the virtual machine",null,null],[3,"RootedThread","","An instance of `Thread` which is rooted. See the `Thread` type for documentation on interacting\nwith the type.",null,null],[3,"Context","","",null,null],[12,"stack","","",64,null],[12,"gc","","",64,null],[3,"OwnedContext","","",null,null],[4,"Status","","Enum signaling a successful or unsuccess ful call to an extern function.\nIf an error occured the error message is expected to be on the top of the stack.",null,null],[13,"Ok","","",65,null],[13,"Yield","","",65,null],[13,"Error","","",65,null],[5,"alloc","","",null,{"inputs":[{"name":"gc"},{"name":"thread"},{"name":"stack"},{"name":"d"}],"output":{"name":"result"}}],[6,"HookFn","","",null,null],[8,"ThreadInternal","","Internal functions for interacting with threads. These functions should be considered both\nunsafe and unstable.",null,null],[10,"context","","Locks and retrives this threads stack",66,null],[10,"root","","Roots a userdata",66,null],[10,"root_string","","Roots a string",66,null],[10,"root_value","","Roots a value",66,null],[10,"root_value_ref","","Roots a value",66,null],[10,"add_bytecode","","",66,null],[10,"call_thunk","","Evaluates a zero argument function (a thunk)",66,null],[10,"execute_io","","Executes an `IO` action",66,null],[10,"call_function","","Calls a function on the stack.\nWhen this function is called it is expected that the function exists at\n`stack.len() - args - 1` and that the arguments are of the correct type",66,null],[10,"resume","","",66,null],[10,"global_env","","",66,null],[10,"set_global","","",66,null],[10,"deep_clone_value","","",66,null],[11,"eq","","",65,null],[11,"eq","","",67,null],[11,"ne","","",67,null],[11,"clone","","",67,null],[11,"drop","","",67,null],[11,"fmt","","",67,null],[11,"deref","","",67,null],[11,"vm","","",67,null],[11,"vm_","","",67,null],[11,"drop","","",68,null],[11,"deref","","",68,null],[11,"deref","","",69,null],[11,"fmt","","",70,null],[11,"traverse","","",70,null],[11,"eq","","",70,null],[11,"push","","",71,null],[11,"fmt","","",71,null],[11,"drop","","",71,null],[11,"deref","","",71,null],[11,"clone","","",71,null],[11,"traverse","","",71,null],[11,"new","","Creates a new virtual machine with an empty global environment",71,{"inputs":[],"output":{"name":"rootedthread"}}],[11,"into_raw","","Converts a `RootedThread` into a raw pointer allowing to be passed through a C api.\nThe reference count for the thread is not modified",71,null],[11,"from_raw","","Converts a raw pointer into a `RootedThread`.\nThe reference count for the thread is not modified so it is up to the caller to ensure that\nthe count is correct.",71,null],[11,"new_thread","","Spawns a new gluon thread with its own stack and heap but while still sharing the same\nglobal environment",70,null],[11,"root_thread","","Roots `self`, extending the lifetime of this thread until at least the returned\n`RootedThread` is droppped",70,null],[11,"define_global","","Creates a new global value at `name`.\nFails if a global called `name` already exists.",70,null],[11,"get_global","","Retrieves the global called `name`.\nFails if the global does not exist or it does not have the correct type.",70,null],[11,"find_type_info","","Retrieves type information about the type `name`. Types inside records can be accessed\nusing dot notation (std.prelude.Option)",70,null],[11,"get_type","","Returns the gluon type that was bound to `T`",70,null],[11,"register_type","","Registers the type `T` as being a gluon type called `name` with generic arguments `args`",70,null],[11,"get_env","","Locks and retrieves the global environment of the vm",70,null],[11,"get_macros","","Retrieves the macros defined for this vm",70,null],[11,"collect","","Runs a garbage collection.",70,null],[11,"push","","Pushes a value to the top of the stack",70,null],[11,"pop","","Removes the top value from the stack",70,null],[11,"set_memory_limit","","",70,null],[11,"context","","",70,null],[11,"root","","Roots a userdata",70,null],[11,"root_string","","Roots a string",70,null],[11,"root_value","","Roots a value",70,null],[11,"root_value_ref","","Roots a value",70,null],[11,"add_bytecode","","",70,null],[11,"call_thunk","","",70,null],[11,"execute_io","","Calls a module, allowed to to run IO expressions",70,null],[11,"call_function","","Calls a function on the stack.\nWhen this function is called it is expected that the function exists at\n`stack.len() - args - 1` and that the arguments are of the correct type",70,null],[11,"resume","","",70,null],[11,"global_env","","",70,null],[11,"set_global","","",70,null],[11,"deep_clone_value","","",70,null],[11,"new_data","","",64,null],[11,"alloc_with","","",64,null],[11,"alloc_ignore_limit","","",64,null],[11,"set_hook","","",64,null],[11,"set_max_stack_size","","",64,null],[11,"alloc","","",72,null],[11,"deref","","",72,null],[11,"deref_mut","","",72,null],[0,"primitives","gluon_vm","Module containing functions for interacting with gluon&#39;s primitive types.",null,null],[5,"load","gluon_vm::primitives","",null,{"inputs":[{"name":"thread"}],"output":{"name":"result"}}],[0,"stack","gluon_vm","",null,null],[3,"Frame","gluon_vm::stack","",null,null],[12,"offset","","",73,null],[12,"instruction_index","","",73,null],[12,"state","","",73,null],[12,"excess","","",73,null],[3,"Lock","","",null,null],[3,"Stack","","",null,null],[3,"StackFrame","","",null,null],[12,"stack","","",74,null],[12,"frame","","",74,null],[3,"StacktraceFrame","","",null,null],[12,"name","","",75,null],[12,"line","","",75,null],[3,"Stacktrace","","",null,null],[12,"frames","","",76,null],[4,"State","","",null,null],[13,"Unknown","","",77,null],[13,"Lock","","Locked frame which can only be unlocked by the caller which introduced the lock",77,null],[13,"Excess","","Extra frame introduced to store a call with excess arguments",77,null],[13,"Closure","","",77,null],[13,"Extern","","",77,null],[11,"eq","","",77,null],[11,"ne","","",77,null],[11,"fmt","","",77,null],[11,"clone","","",77,null],[11,"eq","","",73,null],[11,"ne","","",73,null],[11,"fmt","","",73,null],[11,"clone","","",73,null],[11,"fmt","","",78,null],[11,"fmt","","",79,null],[11,"new","","",79,{"inputs":[],"output":{"name":"stack"}}],[11,"pop","","",79,null],[11,"push","","",79,null],[11,"remove_range","","",79,null],[11,"len","","",79,null],[11,"get_values","","",79,null],[11,"get_frames","","",79,null],[11,"current_frame","","",79,null],[11,"release_lock","","Release a lock on the stack.",79,null],[11,"stacktrace","","Creates a stackrace starting from `frame_level`",79,null],[11,"index","","",79,null],[11,"index_mut","","",79,null],[11,"index","","",79,null],[11,"index","","",79,null],[11,"drop","","",74,null],[11,"fmt","","",74,null],[11,"take_stack","","",74,null],[11,"len","","",74,null],[11,"push","","",74,null],[11,"top","","",74,null],[11,"pop","","",74,null],[11,"get_variants","","",74,null],[11,"insert_slice","","",74,null],[11,"remove_range","","",74,null],[11,"get_rooted_value","","",74,null],[11,"get_upvar","","",74,null],[11,"excess_args","","",74,null],[11,"enter_scope","","",74,null],[11,"exit_scope","","",74,null],[11,"frame","","",74,{"inputs":[{"name":"stack"},{"name":"vmindex"},{"name":"state"}],"output":{"name":"stackframe"}}],[11,"current","","",74,{"inputs":[{"name":"stack"}],"output":{"name":"stackframe"}}],[11,"into_lock","","Lock the stack below the current offset",74,null],[11,"deref","","",74,null],[11,"deref_mut","","",74,null],[11,"index","","",74,null],[11,"index_mut","","",74,null],[11,"index","","",74,null],[11,"index_mut","","",74,null],[11,"index","","",74,null],[11,"index_mut","","",74,null],[11,"index","","",74,null],[11,"index_mut","","",74,null],[11,"index","","",74,null],[11,"index_mut","","",74,null],[11,"eq","","",75,null],[11,"ne","","",75,null],[11,"fmt","","",75,null],[11,"eq","","",76,null],[11,"ne","","",76,null],[11,"fmt","","",76,null],[11,"fmt","","",76,null],[0,"types","gluon_vm","",null,null],[3,"TypeInfos","gluon_vm::types","",null,null],[12,"id_to_type","","",80,null],[12,"type_to_id","","",80,null],[4,"Instruction","","Enum which represent the instructions executed by the virtual machine.",null,null],[13,"PushInt","","Push an integer to the stack",81,null],[13,"PushByte","","Push a byte to the stack",81,null],[13,"PushFloat","","Push a float to the stack",81,null],[13,"PushString","","Push a string to the stack by loading the string at `index` in the currently executing\nfunction",81,null],[13,"PushUpVar","","Push a variable to the stack by loading the upvariable at `index` from the currently\nexecuting function",81,null],[13,"Push","","Push the value at `index`",81,null],[13,"PushGlobal","","Push the value at `index`",81,null],[13,"Call","","Call a function by passing it `args` number of arguments. The function is at the index in\nthe stack just before the arguments. After the call is all arguments are removed and the\nfunction is replaced by the result of the call.",81,null],[13,"TailCall","","Tailcalls a function, removing the current stack frame before calling it.\nSee `Call`.",81,null],[13,"Construct","","Constructs a data value tagged by `tag` by taking the top `args` values of the stack.",81,null],[12,"tag","gluon_vm::types::Instruction","The tag of the data",81,null],[12,"args","","How many arguments that is taken from the stack to construct the data.",81,null],[13,"ConstructRecord","gluon_vm::types","",81,null],[12,"record","gluon_vm::types::Instruction","Index to the specification describing which fields this record contains",81,null],[12,"args","","How many arguments that is taken from the stack to construct the data.",81,null],[13,"ConstructArray","gluon_vm::types","Constructs an array containing `args` values.",81,null],[13,"GetOffset","","Retrieves the field at `offset` of an object at the top of the stack. The result of the\nfield access replaces the object on the stack.",81,null],[13,"GetField","","Retrieves the field of a polymorphic record by retrieving the string constant at `index`\nand using that to retrieve lookup the field. The result of the\nfield access replaces the object on the stack.",81,null],[13,"Split","","Splits a object, pushing all contained values to the stack.",81,null],[13,"TestTag","","Tests if the value at the top of the stack is tagged with `tag`. Pushes `True` if the tag\nmatches, otherwise `False`",81,null],[13,"Jump","","Jumps to the instruction at `index` in the currently executing function.",81,null],[13,"CJump","","Jumps to the instruction at `index` in the currently executing function if `True` is at the\ntop of the stack and pops that value.",81,null],[13,"Pop","","Pops the top `n` values from the stack.",81,null],[13,"Slide","","Pops the top value from the stack, then pops `n` more values, finally the first value is\npushed back to the stack.",81,null],[13,"MakeClosure","","Creates a closure with the function at `function_index` of the currently executing function\nand `upvars` upvariables popped from the top of the stack.",81,null],[12,"function_index","gluon_vm::types::Instruction","The index in the currently executing function which the function data is located at",81,null],[12,"upvars","","How many upvariables the closure contains",81,null],[13,"NewClosure","gluon_vm::types","Creates a closure with the function at `function_index` of the currently executing\nfunction. The closure has room for `upvars` upvariables but these are not filled until the\nmatching call to `ClosureClosure` is executed.",81,null],[12,"function_index","gluon_vm::types::Instruction","The index in the currently executing function which the function data is located at",81,null],[12,"upvars","","How many upvariables the closure contains",81,null],[13,"CloseClosure","gluon_vm::types","Fills the previously allocated closure with `n` upvariables.",81,null],[13,"AddInt","","",81,null],[13,"SubtractInt","","",81,null],[13,"MultiplyInt","","",81,null],[13,"DivideInt","","",81,null],[13,"IntLT","","",81,null],[13,"IntEQ","","",81,null],[13,"AddByte","","",81,null],[13,"SubtractByte","","",81,null],[13,"MultiplyByte","","",81,null],[13,"DivideByte","","",81,null],[13,"ByteLT","","",81,null],[13,"ByteEQ","","",81,null],[13,"AddFloat","","",81,null],[13,"SubtractFloat","","",81,null],[13,"MultiplyFloat","","",81,null],[13,"DivideFloat","","",81,null],[13,"FloatLT","","",81,null],[13,"FloatEQ","","",81,null],[6,"VmIndex","","",null,null],[6,"VmTag","","",null,null],[6,"VmInt","","",null,null],[11,"fmt","","",81,null],[11,"clone","","",81,null],[11,"adjust","","Returns by how much the stack is adjusted when executing the instruction `self`.",81,null],[11,"fmt","","",80,null],[11,"find_kind","","",80,null],[11,"find_type","","",80,null],[11,"find_type_info","","",80,null],[11,"find_record","","",80,null],[11,"new","","",80,{"inputs":[],"output":{"name":"typeinfos"}}],[11,"extend","","",80,null],[11,"deep_clone","gluon_vm::api","",34,null],[11,"is","","Returns true if the boxed type is the same as `T`",34,null],[11,"downcast_ref","","Returns some reference to the boxed value if it is of type `T`, or\n`None` if it isn&#39;t.",34,null],[11,"downcast_ref_unchecked","","Returns a reference to the boxed value, blindly assuming it to be of type `T`.\nIf you are not *absolutely certain* of `T`, you *must not* call this.",34,null],[11,"downcast_mut","","Returns some mutable reference to the boxed value if it is of type `T`, or\n`None` if it isn&#39;t.",34,null],[11,"downcast_mut_unchecked","","Returns a mutable reference to the boxed value, blindly assuming it to be of type `T`.\nIf you are not *absolutely certain* of `T`, you *must not* call this.",34,null],[11,"downcast","","Returns the boxed value if it is of type `T`, or `Err(Self)` if it isn&#39;t.",34,{"inputs":[{"name":"box"}],"output":{"name":"result"}}],[11,"downcast_unchecked","","Returns the boxed value, blindly assuming it to be of type `T`.\nIf you are not *absolutely certain* of `T`, you *must not* call this.",34,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"eq","","",34,null],[11,"deep_clone","","",34,null],[0,"internal","gluon_vm","Internal types and functions exposed to the main `gluon` crate",null,null],[3,"ClosureDataDef","gluon_vm::internal","",null,null],[12,"0","","",82,null],[12,"1","","",82,null],[4,"Value","","",null,null],[13,"Byte","","",83,null],[13,"Int","","",83,null],[13,"Float","","",83,null],[13,"String","","",83,null],[13,"Tag","","",83,null],[13,"Data","","",83,null],[13,"Array","","",83,null],[13,"Function","","",83,null],[13,"Closure","","",83,null],[13,"PartialApplication","","",83,null],[13,"Userdata","","",83,null],[13,"Thread","","",83,null],[6,"Result","gluon_vm","Type returned from vm functions which may fail",null,null],[11,"fmt","","",84,null],[11,"new","","Creates a new `Variants` value which assumes that `value` is alive for the lifetime of the\nvalue",84,{"inputs":[{"name":"value"}],"output":{"name":"variants"}}],[11,"as_ref","","Returns an instance of `ValueRef` which allows users to safely retrieve the interals of a\nvalue",84,null],[11,"eq","","",0,null],[11,"ne","","",0,null],[11,"fmt","","",0,null],[11,"fmt","","",0,null],[11,"description","","",0,null],[11,"cause","","",0,null],[14,"primitive!","","",null,null],[14,"types!","","",null,null],[14,"hlist!","","",null,null],[14,"field_decl!","","",null,null],[14,"record_no_decl!","","",null,null],[14,"record!","","Macro that creates a record that can be passed to gluon",null,null],[14,"vm_function!","","",null,null],[14,"on_array!","","",null,null],[11,"from_value","gluon_vm::internal","",83,{"inputs":[{"name":"thread"},{"name":"variants"}],"output":{"name":"option"}}],[11,"push","gluon_vm::types","",85,null],[11,"from_value","","",85,{"inputs":[{"name":"thread"},{"name":"variants"}],"output":{"name":"option"}}],[11,"from_value","gluon_vm::thread","",68,{"inputs":[{"name":"thread"},{"name":"variants"}],"output":{"name":"option"}}],[11,"from_value","","",69,{"inputs":[{"name":"thread"},{"name":"variants"}],"output":{"name":"option"}}],[11,"find_var","gluon_vm::types","",80,null],[11,"traverse","gluon_vm::internal","",82,null],[11,"size","","",82,null],[11,"initialize","","",82,null],[11,"eq","","",83,null],[11,"ne","","",83,null],[11,"clone","","",83,null],[11,"generation","","",83,null],[11,"traverse","","",83,null],[11,"fmt","","",83,null]],"paths":[[4,"Error"],[3,"Generic"],[3,"WithVM"],[4,"ValueRef"],[4,"IO"],[4,"RuntimeResult"],[4,"A"],[4,"B"],[4,"C"],[4,"D"],[4,"E"],[4,"F"],[4,"G"],[4,"H"],[4,"I"],[4,"J"],[4,"K"],[4,"L"],[4,"M"],[4,"N"],[4,"O"],[4,"P"],[4,"Q"],[4,"R"],[4,"X"],[4,"Y"],[4,"Z"],[3,"Record"],[3,"HList"],[8,"Field"],[8,"FieldList"],[8,"FieldTypes"],[8,"PushableFieldList"],[8,"GetableFieldList"],[8,"Userdata"],[8,"VmType"],[8,"Pushable"],[8,"Getable"],[8,"FunctionType"],[8,"VmFunction"],[3,"Data"],[3,"Hole"],[3,"OpaqueValue"],[3,"Array"],[3,"Primitive"],[3,"RefPrimitive"],[3,"CPrimitive"],[3,"Function"],[3,"Sender"],[3,"Receiver"],[3,"CompiledFunction"],[4,"Variable"],[8,"CompilerEnv"],[3,"Compiler"],[3,"Move"],[8,"FromPtr"],[8,"DataDef"],[8,"Traverseable"],[3,"WriteOnly"],[3,"Gc"],[3,"GcPtr"],[3,"MacroExpander"],[8,"Macro"],[3,"MacroEnv"],[3,"Context"],[4,"Status"],[8,"ThreadInternal"],[3,"RootedValue"],[3,"Root"],[3,"RootStr"],[3,"Thread"],[3,"RootedThread"],[3,"OwnedContext"],[3,"Frame"],[3,"StackFrame"],[3,"StacktraceFrame"],[3,"Stacktrace"],[4,"State"],[3,"Lock"],[3,"Stack"],[3,"TypeInfos"],[4,"Instruction"],[3,"ClosureDataDef"],[4,"Value"],[3,"Variants"],[6,"VmInt"]]};
searchIndex["gluon_base"] = {"doc":"The base crate contains pervasive types used in the compiler such as type representations, the\nAST and some basic containers.","items":[[0,"ast","gluon_base","Module containing the types which make up `gluon`&#39;s AST (Abstract Syntax Tree)",null,null],[3,"TypedIdent","gluon_base::ast","",null,null],[12,"typ","","",0,null],[12,"name","","",0,null],[3,"Alternative","","",null,null],[12,"pattern","","",1,null],[12,"expr","","",1,null],[3,"Array","","",null,null],[12,"typ","","",2,null],[12,"exprs","","",2,null],[3,"Lambda","","",null,null],[12,"id","","",3,null],[12,"args","","",3,null],[12,"body","","",3,null],[3,"TypeBinding","","",null,null],[12,"comment","","",4,null],[12,"name","","",4,null],[12,"alias","","",4,null],[3,"ValueBinding","","",null,null],[12,"comment","","",5,null],[12,"name","","",5,null],[12,"typ","","",5,null],[12,"args","","",5,null],[12,"expr","","",5,null],[4,"Literal","","",null,null],[13,"Byte","","",6,null],[13,"Int","","",6,null],[13,"Float","","",6,null],[13,"String","","",6,null],[13,"Char","","",6,null],[4,"Pattern","","",null,null],[13,"Constructor","","",7,null],[13,"Record","","",7,null],[12,"typ","gluon_base::ast::Pattern","",7,null],[12,"types","","",7,null],[12,"fields","","",7,null],[13,"Ident","gluon_base::ast","",7,null],[4,"Expr","","The representation of gluon&#39;s expression syntax",null,null],[13,"Ident","","Identifiers",8,null],[13,"Literal","","Literal values",8,null],[13,"App","","Function application, eg. `f x`",8,null],[13,"Lambda","","Lambda abstraction, eg. `\\x y -&gt; x * y`",8,null],[13,"IfElse","","If-then-else conditional",8,null],[13,"Match","","Pattern match expression",8,null],[13,"Infix","","Infix operator expression eg. `f &gt;&gt; g`",8,null],[13,"Projection","","Record field projection, eg. `value.field`",8,null],[13,"Array","","Array construction",8,null],[13,"Record","","Record construction",8,null],[12,"typ","gluon_base::ast::Expr","",8,null],[12,"types","","",8,null],[12,"exprs","","",8,null],[13,"Tuple","gluon_base::ast","Tuple construction",8,null],[13,"LetBindings","","Declare a series of value bindings",8,null],[13,"TypeBindings","","Declare a series of type aliases",8,null],[13,"Block","","A group of sequenced expressions",8,null],[5,"walk_mut_expr","","",null,{"inputs":[{"name":"v"},{"name":"spannedexpr"}],"output":null}],[5,"walk_mut_pattern","","Walks a pattern, calling `visit_*` on all relevant elements",null,{"inputs":[{"name":"v"},{"name":"pattern"}],"output":null}],[5,"walk_expr","","",null,{"inputs":[{"name":"v"},{"name":"spannedexpr"}],"output":null}],[5,"walk_pattern","","Walks a pattern, calling `visit_*` on all relevant elements",null,{"inputs":[{"name":"v"},{"name":"pattern"}],"output":null}],[5,"is_operator_char","","",null,{"inputs":[{"name":"char"}],"output":{"name":"bool"}}],[6,"SpannedPattern","","Pattern which contains a location",null,null],[6,"SpannedExpr","","Expression which contains a location",null,null],[8,"DisplayEnv","","",null,null],[16,"Ident","","",9,null],[10,"string","","",9,null],[8,"IdentEnv","","",null,null],[10,"from_str","","",10,null],[8,"MutVisitor","","Visitor trait which walks over expressions calling `visit_*` on all encountered elements. By\ndefault the `visit_*` functions just walk the tree. If they are overriden the user will need to\ncall `walk_mut_*` to continue traversing the tree.",null,null],[16,"Ident","","",11,null],[11,"visit_expr","","",11,null],[11,"visit_pattern","","",11,null],[11,"visit_typ","","",11,null],[8,"Visitor","","",null,null],[16,"Ident","","",12,null],[11,"visit_expr","","",12,null],[11,"visit_pattern","","",12,null],[11,"visit_typ","","",12,null],[8,"Typed","","Trait which abstracts over things that have a type.\nIt is not guaranteed that the correct type is returned until after typechecking",null,null],[16,"Ident","","",13,null],[10,"env_type_of","","",13,null],[11,"fmt","","",0,null],[11,"eq","","",0,null],[11,"ne","","",0,null],[11,"clone","","",0,null],[11,"new","","",0,{"inputs":[{"name":"id"}],"output":{"name":"typedident"}}],[11,"as_ref","","",0,null],[11,"fmt","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"clone","","",6,null],[11,"fmt","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"clone","","",7,null],[11,"fmt","","",1,null],[11,"eq","","",1,null],[11,"ne","","",1,null],[11,"clone","","",1,null],[11,"fmt","","",2,null],[11,"eq","","",2,null],[11,"ne","","",2,null],[11,"clone","","",2,null],[11,"fmt","","",3,null],[11,"eq","","",3,null],[11,"ne","","",3,null],[11,"clone","","",3,null],[11,"fmt","","",8,null],[11,"eq","","",8,null],[11,"ne","","",8,null],[11,"clone","","",8,null],[11,"fmt","","",4,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"clone","","",4,null],[11,"fmt","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"clone","","",5,null],[11,"env_type_of","","",0,null],[11,"env_type_of","","",8,null],[11,"env_type_of","","",7,null],[0,"error","gluon_base","Module containing a few common error wrappers which allows more information to be saved for\nlater display to the user",null,null],[3,"Errors","gluon_base::error","An error type which can represent multiple errors.",null,null],[12,"errors","","",14,null],[3,"InFile","","Error type which contains information of which file and where in the file the error occured",null,null],[12,"source_name","","",15,null],[11,"eq","","",14,null],[11,"ne","","",14,null],[11,"fmt","","",14,null],[11,"new","","Creates a new, empty `Errors` instance.",14,{"inputs":[],"output":{"name":"errors"}}],[11,"has_errors","","Returns true if `self` contains any errors",14,null],[11,"error","","Adds an error to `self`",14,null],[11,"fmt","","",14,null],[11,"description","","",14,null],[11,"fmt","","",15,null],[11,"new","","Creates a new `InFile` error which states that the error occured in `file` using the file\ncontents in `source` to provide a context to the span.",15,{"inputs":[{"name":"str"},{"name":"str"},{"name":"errors"}],"output":{"name":"infile"}}],[11,"errors","","",15,null],[11,"fmt","","",15,null],[11,"description","","",15,null],[0,"fixed","gluon_base","Collection types which allows insertion of new values while shared references to its contents\nare alive. This is done by storing each value in a stable memory location and preventing an\nearlier inserted value to be overwritten.",null,null],[3,"FixedMap","gluon_base::fixed","",null,null],[3,"FixedVec","","",null,null],[11,"default","","",16,{"inputs":[],"output":{"name":"fixedmap"}}],[11,"fmt","","",16,null],[11,"new","","",16,{"inputs":[],"output":{"name":"fixedmap"}}],[11,"clear","","",16,null],[11,"try_insert","","",16,null],[11,"len","","",16,null],[11,"is_empty","","",16,null],[11,"get","","",16,null],[11,"fmt","","",17,null],[11,"new","","",17,{"inputs":[],"output":{"name":"fixedvec"}}],[11,"clear","","",17,null],[11,"push","","",17,null],[11,"extend","","",17,null],[11,"borrow","","",17,null],[11,"find","","",17,null],[11,"len","","",17,null],[11,"is_empty","","",17,null],[11,"index","","",17,null],[11,"index_mut","","",17,null],[11,"from_iter","","",17,{"inputs":[{"name":"t"}],"output":{"name":"fixedvec"}}],[0,"fnv","gluon_base","",null,null],[3,"FnvHasher","gluon_base::fnv","An implementation of the Fowler–Noll–Vo hash function.",null,null],[6,"FnvMap","","Non-crypto HashMap using Fnv Hasher",null,null],[6,"FnvSet","","Non-crypto HashSet using Fnv Hasher",null,null],[0,"instantiate","gluon_base","",null,null],[3,"Instantiator","gluon_base::instantiate","",null,null],[12,"named_variables","","",18,null],[4,"Error","","",null,null],[13,"SelfRecursive","","",19,null],[13,"UndefinedType","","",19,null],[5,"remove_aliases","","Removes type aliases from `typ` until it is an actual type",null,{"inputs":[{"name":"typeenv"},{"name":"arctype"}],"output":{"name":"arctype"}}],[5,"remove_aliases_cow","","",null,{"inputs":[{"name":"typeenv"},{"name":"arctype"}],"output":{"name":"cow"}}],[5,"remove_aliases_checked","","Removes all possible aliases while checking that",null,{"inputs":[{"name":"vec"},{"name":"typeenv"},{"name":"arctype"}],"output":{"name":"result"}}],[5,"remove_alias","","",null,{"inputs":[{"name":"typeenv"},{"name":"arctype"}],"output":{"name":"arctype"}}],[5,"maybe_remove_alias","","Expand `typ` if it is an alias that can be expanded and return the expanded type.\nReturns `None` if the type is not an alias or the alias could not be expanded.",null,{"inputs":[{"name":"typeenv"},{"name":"arctype"}],"output":{"name":"result"}}],[5,"type_of_alias","","Returns the type which is aliased by `alias` if it was possible to do a substitution on the\ntype arguments of `alias` using `args`",null,null],[5,"instantiate","","",null,{"inputs":[{"name":"arctype"},{"name":"f"}],"output":{"name":"arctype"}}],[11,"fmt","","",19,null],[11,"fmt","","",19,null],[11,"description","","",19,null],[11,"cause","","",19,null],[11,"default","","",18,{"inputs":[],"output":{"name":"instantiator"}}],[11,"fmt","","",18,null],[11,"new","","",18,{"inputs":[],"output":{"name":"instantiator"}}],[11,"instantiate","","Instantiates a type, replacing all generic variables with fresh type variables",18,null],[11,"instantiate_","","",18,null],[0,"kind","gluon_base","",null,null],[3,"ArcKind","gluon_base::kind","Reference counted kind type.",null,null],[4,"Kind","","Kind representation",null,null],[13,"Variable","","Representation for a kind which is yet to be inferred.",20,null],[13,"Type","","The simplest possible kind. All values in a program have this kind.",20,null],[13,"Row","","Kinds of rows (for polymorphic records).",20,null],[13,"Function","","Constructor which takes two kinds, taking the first as argument and returning the second.",20,null],[5,"walk_kind","","",null,{"inputs":[{"name":"arckind"},{"name":"f"}],"output":null}],[8,"KindEnv","","Trait for values which contains kinded values which can be refered by name",null,null],[10,"find_kind","","Returns the kind of the type `type_name`",21,null],[11,"hash","","",20,null],[11,"eq","","",20,null],[11,"ne","","",20,null],[11,"fmt","","",20,null],[11,"clone","","",20,null],[11,"variable","","",20,{"inputs":[{"name":"u32"}],"output":{"name":"arckind"}}],[11,"typ","","",20,{"inputs":[],"output":{"name":"arckind"}}],[11,"row","","",20,{"inputs":[],"output":{"name":"arckind"}}],[11,"function","","",20,{"inputs":[{"name":"arckind"},{"name":"arckind"}],"output":{"name":"arckind"}}],[11,"fmt","","",20,null],[11,"hash","","",22,null],[11,"eq","","",22,null],[11,"ne","","",22,null],[11,"clone","","",22,null],[11,"deref","","",22,null],[11,"fmt","","",22,null],[11,"fmt","","",22,null],[11,"new","","",22,{"inputs":[{"name":"kind"}],"output":{"name":"arckind"}}],[0,"metadata","gluon_base","",null,null],[3,"Metadata","gluon_base::metadata","",null,null],[12,"comment","","",23,null],[12,"module","","",23,null],[8,"MetadataEnv","","",null,null],[10,"get_metadata","","",24,null],[11,"eq","","",23,null],[11,"ne","","",23,null],[11,"default","","",23,{"inputs":[],"output":{"name":"metadata"}}],[11,"fmt","","",23,null],[11,"clone","","",23,null],[11,"has_data","","",23,null],[0,"pos","gluon_base","Source code locations (borrowed from rustc&#39;s [libsyntax_pos])",null,null],[3,"BytePos","gluon_base::pos","A byte offset in a source string",null,null],[3,"Column","","A `0`-indexed column number, displayed externally as if it were offset from `1`.",null,null],[3,"Line","","A `0`-indexed line number, displayed externally as if it were offset from `1`.",null,null],[3,"Location","","A location in a source file",null,null],[12,"line","","",25,null],[12,"column","","",25,null],[12,"absolute","","",25,null],[3,"ExpansionId","","An expansion identifier tracks wheter a span originated from a macro expansion or not",null,null],[12,"0","","",26,null],[3,"Span","","A span between two locations in a source file",null,null],[12,"start","","",27,null],[12,"end","","",27,null],[12,"expansion_id","","",27,null],[3,"Spanned","","",null,null],[12,"span","","",28,null],[12,"value","","",28,null],[5,"spanned","","",null,{"inputs":[{"name":"span"},{"name":"t"}],"output":{"name":"spanned"}}],[5,"spanned2","","",null,{"inputs":[{"name":"pos"},{"name":"pos"},{"name":"t"}],"output":{"name":"spanned"}}],[17,"NO_EXPANSION","","",null,null],[17,"UNKNOWN_EXPANSION","","",null,null],[11,"fmt","","",29,null],[11,"cmp","","",29,null],[11,"partial_cmp","","",29,null],[11,"lt","","",29,null],[11,"le","","",29,null],[11,"gt","","",29,null],[11,"ge","","",29,null],[11,"hash","","",29,null],[11,"eq","","",29,null],[11,"ne","","",29,null],[11,"default","","",29,{"inputs":[],"output":{"name":"bytepos"}}],[11,"clone","","",29,null],[11,"to_usize","","",29,null],[11,"from","","",29,{"inputs":[{"name":"usize"}],"output":{"name":"bytepos"}}],[11,"add","","",29,null],[11,"add_assign","","",29,null],[11,"sub","","",29,null],[11,"sub_assign","","",29,null],[11,"fmt","","",29,null],[11,"fmt","","",30,null],[11,"cmp","","",30,null],[11,"partial_cmp","","",30,null],[11,"lt","","",30,null],[11,"le","","",30,null],[11,"gt","","",30,null],[11,"ge","","",30,null],[11,"hash","","",30,null],[11,"eq","","",30,null],[11,"ne","","",30,null],[11,"default","","",30,{"inputs":[],"output":{"name":"column"}}],[11,"clone","","",30,null],[11,"to_usize","","",30,null],[11,"from","","",30,{"inputs":[{"name":"usize"}],"output":{"name":"column"}}],[11,"add","","",30,null],[11,"add_assign","","",30,null],[11,"sub","","",30,null],[11,"sub_assign","","",30,null],[11,"fmt","","",30,null],[11,"fmt","","",31,null],[11,"cmp","","",31,null],[11,"partial_cmp","","",31,null],[11,"lt","","",31,null],[11,"le","","",31,null],[11,"gt","","",31,null],[11,"ge","","",31,null],[11,"hash","","",31,null],[11,"eq","","",31,null],[11,"ne","","",31,null],[11,"default","","",31,{"inputs":[],"output":{"name":"line"}}],[11,"clone","","",31,null],[11,"to_usize","","",31,null],[11,"from","","",31,{"inputs":[{"name":"usize"}],"output":{"name":"line"}}],[11,"add","","",31,null],[11,"add_assign","","",31,null],[11,"sub","","",31,null],[11,"sub_assign","","",31,null],[11,"fmt","","",31,null],[11,"partial_cmp","","",25,null],[11,"lt","","",25,null],[11,"le","","",25,null],[11,"gt","","",25,null],[11,"ge","","",25,null],[11,"cmp","","",25,null],[11,"hash","","",25,null],[11,"fmt","","",25,null],[11,"eq","","",25,null],[11,"ne","","",25,null],[11,"clone","","",25,null],[11,"bump","","",25,null],[11,"line_offset","","",25,null],[11,"fmt","","",25,null],[11,"fmt","","",26,null],[11,"eq","","",26,null],[11,"ne","","",26,null],[11,"partial_cmp","","",26,null],[11,"lt","","",26,null],[11,"le","","",26,null],[11,"gt","","",26,null],[11,"ge","","",26,null],[11,"cmp","","",26,null],[11,"default","","",26,{"inputs":[],"output":{"name":"expansionid"}}],[11,"clone","","",26,null],[11,"fmt","","",27,null],[11,"default","","",27,{"inputs":[],"output":{"name":"span"}}],[11,"clone","","",27,null],[11,"eq","","",27,null],[11,"partial_cmp","","",27,null],[11,"cmp","","",27,null],[11,"new","","",27,{"inputs":[{"name":"pos"},{"name":"pos"}],"output":{"name":"span"}}],[11,"contains","","",27,null],[11,"containment","","",27,null],[11,"containment_exclusive","","",27,null],[11,"merge","","",27,null],[11,"fmt","","",28,null],[11,"clone","","",28,null],[11,"eq","","",28,null],[11,"fmt","","",28,null],[0,"scoped_map","gluon_base","A map data type which allows the same key to exist at multiple scope levels",null,null],[3,"ScopedMap","gluon_base::scoped_map","A map struct which allows for the introduction of different scopes\nIntroducing a new scope will make it possible to introduce additional\nvariables with names already defined, shadowing the old name\nAfter exiting a scope the shadowed variable will again be re introduced",null,null],[3,"Iter","","",null,null],[11,"fmt","","",32,null],[11,"new","","",32,{"inputs":[],"output":{"name":"scopedmap"}}],[11,"enter_scope","","Introduces a new scope",32,null],[11,"exit_scope","","Exits the current scope, removing anything inserted since the\nmatching enter_scope call",32,null],[11,"remove","","Removes a previusly inserted value from the map.",32,null],[11,"in_current_scope","","Returns true if the key has a value declared in the last declared scope",32,null],[11,"iter_mut","","Returns an iterator of the (key, values) pairs inserted in the map",32,null],[11,"get","","Returns a reference to the last inserted value corresponding to the key",32,null],[11,"get_all","","Returns a reference to the all inserted value corresponding to the key",32,null],[11,"len","","Returns the number of elements in the container.\nShadowed elements are not counted",32,null],[11,"is_empty","","Returns true if this map is empty",32,null],[11,"clear","","Removes all elements",32,null],[11,"swap","","Swaps the value stored at key, or inserts it if it is not present",32,null],[11,"pop","","",32,null],[11,"get_mut","","",32,null],[11,"insert","","",32,null],[11,"iter","","",32,null],[11,"next","","",33,null],[0,"source","gluon_base","Module containing types and functions for mapping between byte indexes and line and column\nlocations",null,null],[3,"Lines","gluon_base::source","Type which provides a bidirectional mapping between byte offsets and line and column locations\nfor some source file",null,null],[3,"Source","","Type which provides a bidirectional mapping between byte offsets and line and column locations",null,null],[11,"fmt","","",34,null],[11,"clone","","",34,null],[11,"new","","Creates a mapping for `src`",34,{"inputs":[{"name":"str"}],"output":{"name":"lines"}}],[11,"line","","Returns the byte offset of the start of `line_number`",34,null],[11,"location","","Returns the line and column location of `byte`",34,null],[11,"line_number_at_byte","","Returns which line `byte` points to",34,null],[11,"fmt","","",35,null],[11,"clone","","",35,null],[11,"new","","",35,{"inputs":[{"name":"str"}],"output":{"name":"source"}}],[11,"src","","Returns the string which defines the source",35,null],[11,"line","","Returns the byte offset and source of `line_number`",35,null],[11,"line_at_byte","","Returns the line number and the source at `byte`",35,null],[11,"line_number_at_byte","","Returns which line `byte` points to",35,null],[11,"location","","Returns the line and column location of `byte`",35,null],[0,"symbol","gluon_base","Module which contains types working with symbols",null,null],[3,"Symbol","gluon_base::symbol","A symbol uniquely identifies something regardless of its name and which module it originated from",null,null],[3,"SymbolRef","","",null,null],[3,"NameBuf","","",null,null],[3,"Name","","",null,null],[3,"Components","","",null,null],[3,"Symbols","","`Symbols` is a bidirectional mapping between `Symbol`s and their name as represented in a source file\nUsed to make identifiers within a single module point to the same symbol",null,null],[3,"SymbolModule","","`SymbolModule` wraps a `Symbols` struct and adds a prefix to all symbols created by the `symbol` method.\nWhile this prefix does not affect the uniques of a `Symbol` in any way, it does make the origin of a\nsymbol clearer when pretty printing it",null,null],[11,"clone","","",36,null],[11,"deref","","",36,null],[11,"borrow","","",36,null],[11,"as_ref","","",36,null],[11,"fmt","","",36,null],[11,"fmt","","",36,null],[11,"eq","","",36,null],[11,"partial_cmp","","",36,null],[11,"cmp","","",36,null],[11,"hash","","",36,null],[11,"from","","",36,{"inputs":[{"name":"str"}],"output":{"name":"symbol"}}],[11,"fmt","","",37,null],[11,"fmt","","",37,null],[11,"eq","","",37,null],[11,"partial_cmp","","",37,null],[11,"cmp","","",37,null],[11,"hash","","",37,null],[11,"as_ref","","",37,null],[11,"name_eq","","Checks whether the names of two symbols are equal",37,null],[11,"declared_name","","Returns the name of this symbol as it was originally declared (strips location information)",37,null],[11,"hash","","",38,null],[11,"eq","","",38,null],[11,"ne","","",38,null],[11,"fmt","","",38,null],[11,"clone","","",38,null],[11,"hash","","",39,null],[11,"eq","","",39,null],[11,"ne","","",39,null],[11,"fmt","","",39,null],[11,"next","","",40,null],[11,"new","","",39,{"inputs":[{"name":"n"}],"output":{"name":"name"}}],[11,"as_str","","",39,null],[11,"components","","",39,null],[11,"module","","",39,null],[11,"name","","",39,null],[11,"new","","",38,{"inputs":[{"name":"t"}],"output":{"name":"namebuf"}}],[11,"fmt","","",39,null],[11,"fmt","","",38,null],[11,"as_ref","","",39,null],[11,"as_ref","","",38,null],[11,"as_ref","","",38,null],[11,"borrow","","",38,null],[11,"deref","","",38,null],[11,"from","","",38,{"inputs":[{"name":"str"}],"output":{"name":"namebuf"}}],[11,"from","","",38,{"inputs":[{"name":"string"}],"output":{"name":"namebuf"}}],[11,"from","","",38,{"inputs":[{"name":"name"}],"output":{"name":"namebuf"}}],[11,"default","","",41,{"inputs":[],"output":{"name":"symbols"}}],[11,"fmt","","",41,null],[11,"new","","",41,{"inputs":[],"output":{"name":"symbols"}}],[11,"symbol","","Looks up the symbol for `name` or creates a new symbol if it does not exist",41,null],[11,"fmt","","",42,null],[11,"new","","",42,{"inputs":[{"name":"string"},{"name":"symbols"}],"output":{"name":"symbolmodule"}}],[11,"symbol","","Creates an unprefixed symbol, same as `Symbols::symbol`",42,null],[11,"scoped_symbol","","Creates a symbol which is prefixed by the `module` argument passed in `new`",42,null],[11,"string","","",41,null],[11,"string","","",42,null],[11,"from_str","","",42,null],[0,"types","gluon_base","",null,null],[3,"TypeVariable","gluon_base::types","",null,null],[12,"kind","","",43,null],[12,"id","","",43,null],[3,"Generic","","",null,null],[12,"kind","","",44,null],[12,"id","","",44,null],[3,"Alias","","An alias is wrapper around `Type::Alias`, allowing it to be cheaply converted to a type and dereferenced\nto `AliasData`",null,null],[3,"AliasData","","Data for a type alias. Probably you want to use `Alias` instead of this directly as Alias allows for\ncheap conversion back into a type as well.",null,null],[12,"name","","Name of the Alias",45,null],[12,"args","","Arguments to the alias",45,null],[12,"typ","","The type that is being aliased",45,null],[3,"Field","","",null,null],[12,"name","","",46,null],[12,"typ","","",46,null],[3,"ArcType","","A shared type which is atomically reference counted",null,null],[3,"TypeFieldIterator","","",null,null],[3,"RowIterator","","",null,null],[3,"ArgIterator","","",null,null],[12,"typ","","The current type being iterated over. After `None` has been returned this is the return\ntype.",47,null],[3,"DisplayType","","",null,null],[3,"ControlVisitation","","Wrapper type which allows functions to control how to traverse the members of the type",null,null],[12,"0","","",48,null],[4,"BuiltinType","","All the builtin types of gluon",null,null],[13,"String","","Unicode string",49,null],[13,"Byte","","Unsigned byte",49,null],[13,"Char","","Character",49,null],[13,"Int","","Integer number",49,null],[13,"Float","","Floating point number",49,null],[13,"Unit","","The unit type",49,null],[13,"Array","","Type constructor for arrays, `Array a : Type -&gt; Type`",49,null],[13,"Function","","Type constructor for functions, `(-&gt;) a b : Type -&gt; Type -&gt; Type`",49,null],[4,"Type","","The representation of gluon&#39;s types.",null,null],[13,"Hole","","An unbound type `_`, awaiting ascription.",50,null],[13,"Opaque","","An opaque type",50,null],[13,"Builtin","","A builtin type",50,null],[13,"App","","A type application with multiple arguments. For example,\n`Map String Int` would be represented as `App(Map, [String, Int])`.",50,null],[13,"Record","","Record constructor, of kind `Row -&gt; Type`",50,null],[13,"Variant","","Variant constructor, of kind `Row -&gt; Type`",50,null],[13,"EmptyRow","","The empty row, of kind `Row`",50,null],[13,"ExtendRow","","Row extension, of kind `... -&gt; Row -&gt; Row`",50,null],[12,"types","gluon_base::types::Type","The associated types of this record type",50,null],[12,"fields","","The fields of this record type",50,null],[12,"rest","","The rest of the row",50,null],[13,"Ident","gluon_base::types","An identifier type. These are created during parsing, but should all be\nresolved into `Type::Alias`es during type checking.",50,null],[13,"Variable","","An unbound type variable that may be unified with other types. These\nwill eventually be converted into `Type::Generic`s during generalization.",50,null],[13,"Generic","","A variable that needs to be instantiated with a fresh type variable\nwhen the binding is refered to.",50,null],[13,"Alias","","",50,null],[5,"instantiate","","",null,{"inputs":[{"name":"arctype"},{"name":"f"}],"output":{"name":"arctype"}}],[5,"arg_iter","","Constructs an iterator over a functions arguments",null,{"inputs":[{"name":"t"}],"output":{"name":"argiterator"}}],[5,"display_type","","",null,{"inputs":[{"name":"e"},{"name":"type"}],"output":{"name":"displaytype"}}],[5,"walk_type","","",null,{"inputs":[{"name":"t"},{"name":"f"}],"output":null}],[5,"walk_type_","","",null,{"inputs":[{"name":"t"},{"name":"f"}],"output":null}],[5,"fold_type","","",null,{"inputs":[{"name":"t"},{"name":"f"},{"name":"a"}],"output":{"name":"a"}}],[5,"walk_move_type","","Walks through a type calling `f` on each inner type. If `f` return `Some` the type is replaced.",null,{"inputs":[{"name":"t"},{"name":"f"}],"output":{"name":"t"}}],[5,"merge","","Merges two values using `f` if either or both them is `Some(..)`.\nIf both are `None`, `None` is returned.",null,{"inputs":[{"name":"a"},{"name":"option"},{"name":"b"},{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[5,"walk_move_type_opt","","",null,{"inputs":[{"name":"type"},{"name":"f"}],"output":{"name":"option"}}],[5,"walk_move_types","","",null,{"inputs":[{"name":"i"},{"name":"f"}],"output":{"name":"option"}}],[8,"TypeEnv","","Trait for values which contains typed values which can be refered by name",null,null],[10,"find_type","","Returns the type of the value bound at `id`",51,null],[10,"find_type_info","","Returns information about the type `id`",51,null],[10,"find_record","","Returns a record which contains all `fields`. The first element is the record type and the\nsecond is the alias type.",51,null],[8,"PrimitiveEnv","","Trait which is a `TypeEnv` which also provides access to the type representation of some\nprimitive types",null,null],[10,"get_bool","","",52,null],[8,"TypeVisitor","","",null,null],[11,"visit","","",53,null],[8,"Walker","","",null,null],[10,"walk","","",54,null],[11,"hash","","",49,null],[11,"fmt","","",49,null],[11,"eq","","",49,null],[11,"clone","","",49,null],[11,"symbol","","",49,null],[11,"from_str","","",49,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"to_str","","",49,null],[11,"hash","","",43,null],[11,"eq","","",43,null],[11,"ne","","",43,null],[11,"fmt","","",43,null],[11,"clone","","",43,null],[11,"hash","","",44,null],[11,"eq","","",44,null],[11,"ne","","",44,null],[11,"fmt","","",44,null],[11,"clone","","",44,null],[11,"hash","","",55,null],[11,"eq","","",55,null],[11,"ne","","",55,null],[11,"fmt","","",55,null],[11,"clone","","",55,null],[11,"deref","","",55,null],[11,"from","","",55,{"inputs":[{"name":"aliasdata"}],"output":{"name":"alias"}}],[11,"as_ref","","",55,null],[11,"new","","",55,{"inputs":[{"name":"id"},{"name":"vec"},{"name":"t"}],"output":{"name":"alias"}}],[11,"into_type","","",55,null],[11,"make_mut","","",55,{"inputs":[{"name":"alias"}],"output":{"name":"aliasdata"}}],[11,"hash","","",45,null],[11,"eq","","",45,null],[11,"ne","","",45,null],[11,"fmt","","",45,null],[11,"clone","","",45,null],[11,"fmt","","",46,null],[11,"eq","","",46,null],[11,"ne","","",46,null],[11,"hash","","",46,null],[11,"clone","","",46,null],[11,"hash","","",50,null],[11,"eq","","",50,null],[11,"ne","","",50,null],[11,"fmt","","",50,null],[11,"clone","","",50,null],[11,"hole","","",50,{"inputs":[],"output":{"name":"t"}}],[11,"opaque","","",50,{"inputs":[],"output":{"name":"t"}}],[11,"array","","",50,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[11,"app","","",50,{"inputs":[{"name":"t"},{"name":"vec"}],"output":{"name":"t"}}],[11,"variant","","",50,{"inputs":[{"name":"vec"}],"output":{"name":"t"}}],[11,"poly_variant","","",50,{"inputs":[{"name":"vec"},{"name":"t"}],"output":{"name":"t"}}],[11,"record","","",50,{"inputs":[{"name":"vec"},{"name":"vec"}],"output":{"name":"t"}}],[11,"poly_record","","",50,{"inputs":[{"name":"vec"},{"name":"vec"},{"name":"t"}],"output":{"name":"t"}}],[11,"extend_row","","",50,{"inputs":[{"name":"vec"},{"name":"vec"},{"name":"t"}],"output":{"name":"t"}}],[11,"empty_row","","",50,{"inputs":[],"output":{"name":"t"}}],[11,"function","","",50,{"inputs":[{"name":"vec"},{"name":"t"}],"output":{"name":"t"}}],[11,"generic","","",50,{"inputs":[{"name":"generic"}],"output":{"name":"t"}}],[11,"builtin","","",50,{"inputs":[{"name":"builtintype"}],"output":{"name":"t"}}],[11,"variable","","",50,{"inputs":[{"name":"typevariable"}],"output":{"name":"t"}}],[11,"alias","","",50,{"inputs":[{"name":"id"},{"name":"vec"},{"name":"t"}],"output":{"name":"t"}}],[11,"ident","","",50,{"inputs":[{"name":"id"}],"output":{"name":"t"}}],[11,"string","","",50,{"inputs":[],"output":{"name":"t"}}],[11,"char","","",50,{"inputs":[],"output":{"name":"t"}}],[11,"byte","","",50,{"inputs":[],"output":{"name":"t"}}],[11,"int","","",50,{"inputs":[],"output":{"name":"t"}}],[11,"float","","",50,{"inputs":[],"output":{"name":"t"}}],[11,"unit","","",50,{"inputs":[],"output":{"name":"t"}}],[11,"as_function","","",50,null],[11,"as_alias","","",50,null],[11,"name","","Returns the name of `self`\nExample:\nOption a =&gt; Option\nInt =&gt; Int",50,null],[11,"hash","","",56,null],[11,"eq","","",56,null],[11,"ne","","",56,null],[11,"clone","","",56,null],[11,"fmt","","",56,null],[11,"fmt","","",56,null],[11,"deref","","",56,null],[11,"new","","",56,{"inputs":[{"name":"type"}],"output":{"name":"arctype"}}],[11,"type_field_iter","","Returns an iterator over all type fields in a record.\n`{ Test, Test2, x, y } =&gt; [Test, Test2]`",56,null],[11,"row_iter","","Returns an iterator over all fields in a record.\n`{ Test, Test2, x, y } =&gt; [x, y]`",56,null],[11,"into_inner","","",56,null],[11,"from","","",56,{"inputs":[{"name":"type"}],"output":{"name":"arctype"}}],[11,"clone","","",57,null],[11,"next","","",57,null],[11,"clone","","",58,null],[11,"current_type","","",58,null],[11,"next","","",58,null],[11,"next","","",47,null],[11,"level","","Returns the lowest level which this type contains. The level informs from where type\nvariables where created.",56,null],[11,"new","","",43,{"inputs":[{"name":"u32"}],"output":{"name":"typevariable"}}],[11,"with_kind","","",43,{"inputs":[{"name":"kind"},{"name":"u32"}],"output":{"name":"typevariable"}}],[11,"fmt","","",43,null],[11,"fmt","","",44,null],[11,"fmt","","",49,null],[11,"fmt","","",59,null],[11,"fmt","","",50,null],[11,"visit","","",48,null],[11,"env_type_of","gluon_base::pos","",28,null],[11,"with_key","gluon_base::fnv","Create an FNV hasher starting with a state corresponding\nto the hash `key`.",60,{"inputs":[{"name":"u64"}],"output":{"name":"fnvhasher"}}],[11,"default","","",60,{"inputs":[],"output":{"name":"fnvhasher"}}],[11,"finish","","",60,null],[11,"write","","",60,null]],"paths":[[3,"TypedIdent"],[3,"Alternative"],[3,"Array"],[3,"Lambda"],[3,"TypeBinding"],[3,"ValueBinding"],[4,"Literal"],[4,"Pattern"],[4,"Expr"],[8,"DisplayEnv"],[8,"IdentEnv"],[8,"MutVisitor"],[8,"Visitor"],[8,"Typed"],[3,"Errors"],[3,"InFile"],[3,"FixedMap"],[3,"FixedVec"],[3,"Instantiator"],[4,"Error"],[4,"Kind"],[8,"KindEnv"],[3,"ArcKind"],[3,"Metadata"],[8,"MetadataEnv"],[3,"Location"],[3,"ExpansionId"],[3,"Span"],[3,"Spanned"],[3,"BytePos"],[3,"Column"],[3,"Line"],[3,"ScopedMap"],[3,"Iter"],[3,"Lines"],[3,"Source"],[3,"Symbol"],[3,"SymbolRef"],[3,"NameBuf"],[3,"Name"],[3,"Components"],[3,"Symbols"],[3,"SymbolModule"],[3,"TypeVariable"],[3,"Generic"],[3,"AliasData"],[3,"Field"],[3,"ArgIterator"],[3,"ControlVisitation"],[4,"BuiltinType"],[4,"Type"],[8,"TypeEnv"],[8,"PrimitiveEnv"],[8,"TypeVisitor"],[8,"Walker"],[3,"Alias"],[3,"ArcType"],[3,"TypeFieldIterator"],[3,"RowIterator"],[3,"DisplayType"],[3,"FnvHasher"]]};
searchIndex["fnv"] = {"doc":"An implementation of the [Fowler–Noll–Vo hash function][chongo].","items":[[3,"FnvHasher","fnv","An implementation of the Fowler–Noll–Vo hash function.",null,null],[6,"FnvBuildHasher","","A builder for default FNV hashers.",null,null],[6,"FnvHashMap","","A `HashMap` using a default FNV hasher.",null,null],[6,"FnvHashSet","","A `HashSet` using a default FNV hasher.",null,null],[11,"default","","",0,{"inputs":[],"output":{"name":"fnvhasher"}}],[11,"with_key","","Create an FNV hasher starting with a state corresponding\nto the hash `key`.",0,{"inputs":[{"name":"u64"}],"output":{"name":"fnvhasher"}}],[11,"finish","","",0,null],[11,"write","","",0,null]],"paths":[[3,"FnvHasher"]]};
searchIndex["env_logger"] = {"doc":"A logger configured via an environment variable which writes to standard\nerror.","items":[[3,"Logger","env_logger","The logger.",null,null],[3,"LogBuilder","","LogBuilder acts as builder for initializing the Logger.\nIt can be used to customize the log format, change the enviromental variable used\nto provide the logging directives and also set the default log level filter.",null,null],[5,"init","","Initializes the global logger with an env logger.",null,{"inputs":[],"output":{"name":"result"}}],[11,"new","","Initializes the log builder with defaults",0,{"inputs":[],"output":{"name":"logbuilder"}}],[11,"filter","","Adds filters to the logger",0,null],[11,"format","","Sets the format function for formatting the log output.",0,null],[11,"parse","","Parses the directives string in the same form as the RUST_LOG\nenvironment variable.",0,null],[11,"init","","Initializes the global logger with an env logger.",0,null],[11,"build","","Build an env logger.",0,null],[11,"new","","",1,{"inputs":[],"output":{"name":"logger"}}],[11,"filter","","",1,null],[11,"enabled","","",1,null],[11,"log","","",1,null]],"paths":[[3,"LogBuilder"],[3,"Logger"]]};
searchIndex["regex"] = {"doc":"This crate provides a native implementation of regular expressions that is\nheavily based on RE2 both in syntax and in implementation. Notably,\nbackreferences and arbitrary lookahead/lookbehind assertions are not\nprovided. In return, regular expression searching provided by this package\nhas excellent worst-case performance. The specific syntax supported is\ndocumented further down.","items":[[3,"RegexBuilder","regex","A configurable builder for a regular expression.",null,null],[3,"RegexSet","","Match multiple (possibly overlapping) regular expressions in a single scan.",null,null],[3,"SetMatches","","A set of matches returned by a regex set.",null,null],[3,"SetMatchesIntoIter","","An owned iterator over the set of matches from a regex set.",null,null],[3,"SetMatchesIter","","A borrowed iterator over the set of matches from a regex set.",null,null],[3,"Regex","","A compiled regular expression for matching Unicode strings.",null,null],[3,"Captures","","Captures represents a group of captured strings for a single match.",null,null],[3,"SubCaptures","","An iterator over capture groups for a particular match of a regular\nexpression.",null,null],[3,"SubCapturesPos","","An iterator over capture group positions for a particular match of a\nregular expression.",null,null],[3,"SubCapturesNamed","","An Iterator over named capture groups as a tuple with the group\nname and the value.",null,null],[3,"CaptureNames","","An iterator over the names of all possible captures.",null,null],[3,"FindCaptures","","An iterator that yields all non-overlapping capture groups matching a\nparticular regular expression.",null,null],[3,"FindMatches","","An iterator over all non-overlapping matches for a particular string.",null,null],[3,"NoExpand","","NoExpand indicates literal string replacement.",null,null],[12,"0","","",0,null],[3,"RegexSplits","","Yields all substrings delimited by a regular expression match.",null,null],[3,"RegexSplitsN","","Yields at most `N` substrings delimited by a regular expression match.",null,null],[4,"Error","","An error that occurred during parsing or compiling a regular expression.",null,null],[13,"Syntax","","A syntax error.",1,null],[13,"CompiledTooBig","","The compiled program exceeded the set size limit.\nThe argument is the size limit imposed.",1,null],[13,"InvalidSet","","**DEPRECATED:** Will be removed on next major version bump.",1,null],[5,"quote","","Escapes all regular expression meta characters in `text`.",null,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[5,"is_match","","Tests if the given regular expression matches somewhere in the text given.",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"result"}}],[0,"bytes","","Match regular expressions on arbitrary bytes.",null,null],[3,"RegexBuilder","regex::bytes","A configurable builder for a regular expression.",null,null],[3,"RegexSet","","Match multiple (possibly overlapping) regular expressions in a single scan.",null,null],[3,"SetMatches","","A set of matches returned by a regex set.",null,null],[3,"SetMatchesIntoIter","","An owned iterator over the set of matches from a regex set.",null,null],[3,"SetMatchesIter","","A borrowed iterator over the set of matches from a regex set.",null,null],[3,"Regex","","A compiled regular expression for matching arbitrary bytes.",null,null],[3,"FindMatches","","An iterator over all non-overlapping matches for a particular string.",null,null],[3,"FindCaptures","","An iterator that yields all non-overlapping capture groups matching a\nparticular regular expression.",null,null],[3,"Splits","","Yields all substrings delimited by a regular expression match.",null,null],[3,"SplitsN","","Yields at most `N` substrings delimited by a regular expression match.",null,null],[3,"CaptureNames","","An iterator over the names of all possible captures.",null,null],[3,"Captures","","Captures represents a group of captured byte strings for a single match.",null,null],[3,"SubCaptures","","An iterator over capture groups for a particular match of a regular\nexpression.",null,null],[3,"SubCapturesPos","","An iterator over capture group positions for a particular match of a\nregular expression.",null,null],[3,"SubCapturesNamed","","An Iterator over named capture groups as a tuple with the group name and\nthe value.",null,null],[3,"NoExpand","","NoExpand indicates literal byte string replacement.",null,null],[12,"0","","",2,null],[8,"Replacer","","Replacer describes types that can be used to replace matches in a byte\nstring.",null,null],[10,"replace_append","","Appends text to `dst` to replace the current match.",3,null],[11,"no_expansion","","Return a fixed unchanging replacement byte string.",3,null],[11,"fmt","regex","",1,null],[11,"description","","",1,null],[11,"cause","","",1,null],[11,"fmt","","",1,null],[11,"from","","",1,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"new","regex::bytes","Create a new regular expression builder with the given pattern.",4,{"inputs":[{"name":"str"}],"output":{"name":"regexbuilder"}}],[11,"compile","","Consume the builder and compile the regular expression.",4,null],[11,"case_insensitive","","Set the value for the case insensitive (`i`) flag.",4,null],[11,"multi_line","","Set the value for the multi-line matching (`m`) flag.",4,null],[11,"dot_matches_new_line","","Set the value for the any character (`s`) flag, where in `.` matches\nanything when `s` is set and matches anything except for new line when\nit is not set (the default).",4,null],[11,"swap_greed","","Set the value for the greedy swap (`U`) flag.",4,null],[11,"ignore_whitespace","","Set the value for the ignore whitespace (`x`) flag.",4,null],[11,"unicode","","Set the value for the Unicode (`u`) flag.",4,null],[11,"size_limit","","Set the approximate size limit of the compiled regular expression.",4,null],[11,"dfa_size_limit","","Set the approximate size of the cache used by the DFA.",4,null],[11,"new","regex","Create a new regular expression builder with the given pattern.",5,{"inputs":[{"name":"str"}],"output":{"name":"regexbuilder"}}],[11,"compile","","Consume the builder and compile the regular expression.",5,null],[11,"case_insensitive","","Set the value for the case insensitive (`i`) flag.",5,null],[11,"multi_line","","Set the value for the multi-line matching (`m`) flag.",5,null],[11,"dot_matches_new_line","","Set the value for the any character (`s`) flag, where in `.` matches\nanything when `s` is set and matches anything except for new line when\nit is not set (the default).",5,null],[11,"swap_greed","","Set the value for the greedy swap (`U`) flag.",5,null],[11,"ignore_whitespace","","Set the value for the ignore whitespace (`x`) flag.",5,null],[11,"unicode","","Set the value for the Unicode (`u`) flag.",5,null],[11,"size_limit","","Set the approximate size limit of the compiled regular expression.",5,null],[11,"dfa_size_limit","","Set the approximate size of the cache used by the DFA.",5,null],[11,"no_expansion","regex::bytes","Return a fixed unchanging replacement byte string.",3,null],[11,"clone","","",6,null],[11,"fmt","","Shows the original regular expression.",6,null],[11,"fmt","","Shows the original regular expression.",6,null],[11,"from_str","","Attempts to parse a string into a regular expression",6,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"new","","Compiles a regular expression. Once compiled, it can be used repeatedly\nto search, split or replace text in a string.",6,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"with_size_limit","","Compiles a regular expression with the given size limit.",6,{"inputs":[{"name":"usize"},{"name":"str"}],"output":{"name":"result"}}],[11,"is_match","","Returns true if and only if the regex matches the string given.",6,null],[11,"find","","Returns the start and end byte range of the leftmost-first match in\n`text`. If no match exists, then `None` is returned.",6,null],[11,"find_iter","","Returns an iterator for each successive non-overlapping match in\n`text`, returning the start and end byte indices with respect to\n`text`.",6,null],[11,"captures","","Returns the capture groups corresponding to the leftmost-first\nmatch in `text`. Capture group `0` always corresponds to the entire\nmatch. If no match is found, then `None` is returned.",6,null],[11,"captures_iter","","Returns an iterator over all the non-overlapping capture groups matched\nin `text`. This is operationally the same as `find_iter`, except it\nyields information about submatches.",6,null],[11,"split","","Returns an iterator of substrings of `text` delimited by a match of the\nregular expression. Namely, each element of the iterator corresponds to\ntext that *isn&#39;t* matched by the regular expression.",6,null],[11,"splitn","","Returns an iterator of at most `limit` substrings of `text` delimited\nby a match of the regular expression. (A `limit` of `0` will return no\nsubstrings.) Namely, each element of the iterator corresponds to text\nthat *isn&#39;t* matched by the regular expression. The remainder of the\nstring that is not split will be the last element in the iterator.",6,null],[11,"replace","","Replaces the leftmost-first match with the replacement provided. The\nreplacement can be a regular byte string (where `$N` and `$name` are\nexpanded to match capture groups) or a function that takes the matches&#39;\n`Captures` and returns the replaced byte string.",6,null],[11,"replace_all","","Replaces all non-overlapping matches in `text` with the replacement\nprovided. This is the same as calling `replacen` with `limit` set to\n`0`.",6,null],[11,"replacen","","Replaces at most `limit` non-overlapping matches in `text` with the\nreplacement provided. If `limit` is 0, then all non-overlapping matches\nare replaced.",6,null],[11,"shortest_match","","Returns the end location of a match in the text given.",6,null],[11,"as_str","","Returns the original string of this regex.",6,null],[11,"capture_names","","Returns an iterator over the capture names.",6,null],[11,"captures_len","","Returns the number of captures.",6,null],[11,"next","","",7,null],[11,"next","","",8,null],[11,"next","","",9,null],[11,"next","","",10,null],[11,"next","","",11,null],[11,"size_hint","","",11,null],[11,"pos","","Returns the start and end positions of the Nth capture group. Returns\n`None` if `i` is not a valid capture group or if the capture group did\nnot match anything. The positions returned are *always* byte indices\nwith respect to the original byte string matched.",12,null],[11,"at","","Returns the matched string for the capture group `i`.  If `i` isn&#39;t\na valid capture group or didn&#39;t match anything, then `None` is\nreturned.",12,null],[11,"name","","Returns the matched string for the capture group named `name`.  If\n`name` isn&#39;t a valid capture group or didn&#39;t match anything, then\n`None` is returned.",12,null],[11,"iter","","Creates an iterator of all the capture groups in order of appearance\nin the regular expression.",12,null],[11,"iter_pos","","Creates an iterator of all the capture group positions in order of\nappearance in the regular expression. Positions are byte indices\nin terms of the original string matched.",12,null],[11,"iter_named","","Creates an iterator of all named groups as an tuple with the group\nname and the value. The iterator returns these values in arbitrary\norder.",12,null],[11,"expand","","Expands all instances of `$name` in `text` to the corresponding capture\ngroup `name`, and writes them to the `dst` buffer given.",12,null],[11,"len","","Returns the number of captured groups.",12,null],[11,"is_empty","","Returns true if and only if there are no captured groups.",12,null],[11,"fmt","","",12,null],[11,"index","","",12,null],[11,"index","","",12,null],[11,"next","","",13,null],[11,"next","","",14,null],[11,"next","","",15,null],[11,"replace_append","","",2,null],[11,"no_expansion","","",2,null],[11,"clone","regex","",16,null],[11,"new","","Create a new regex set with the given regular expressions.",16,{"inputs":[{"name":"i"}],"output":{"name":"result"}}],[11,"is_match","","Returns true if and only if one of the regexes in this set matches\nthe text given.",16,null],[11,"matches","","Returns the set of regular expressions that match in the given text.",16,null],[11,"len","","Returns the total number of regular expressions in this set.",16,null],[11,"fmt","","",17,null],[11,"clone","","",17,null],[11,"matched_any","","Whether this set contains any matches.",17,null],[11,"matched","","Whether the regex at the given index matched.",17,null],[11,"len","","The total number of regexes in the set that created these matches.",17,null],[11,"iter","","Returns an iterator over indexes in the regex that matched.",17,null],[11,"into_iter","","",17,null],[11,"next","","",18,null],[11,"next_back","","",18,null],[11,"clone","","",19,null],[11,"next","","",19,null],[11,"next_back","","",19,null],[11,"fmt","","",16,null],[11,"clone","regex::bytes","",20,null],[11,"new","","Create a new regex set with the given regular expressions.",20,{"inputs":[{"name":"i"}],"output":{"name":"result"}}],[11,"is_match","","Returns true if and only if one of the regexes in this set matches\nthe text given.",20,null],[11,"matches","","Returns the set of regular expressions that match in the given text.",20,null],[11,"len","","Returns the total number of regular expressions in this set.",20,null],[11,"fmt","","",21,null],[11,"clone","","",21,null],[11,"matched_any","","Whether this set contains any matches.",21,null],[11,"matched","","Whether the regex at the given index matched.",21,null],[11,"len","","The total number of regexes in the set that created these matches.",21,null],[11,"iter","","Returns an iterator over indexes in the regex that matched.",21,null],[11,"into_iter","","",21,null],[11,"next","","",22,null],[11,"next_back","","",22,null],[11,"clone","","",23,null],[11,"next","","",23,null],[11,"next_back","","",23,null],[11,"fmt","","",20,null],[11,"clone","regex","",24,null],[11,"fmt","","Shows the original regular expression.",24,null],[11,"fmt","","Shows the original regular expression.",24,null],[11,"eq","","",24,null],[11,"from_str","","Attempts to parse a string into a regular expression",24,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"new","","Compiles a regular expression. Once compiled, it can be used repeatedly\nto search, split or replace text in a string.",24,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"with_size_limit","","Compiles a regular expression with the given size limit.",24,{"inputs":[{"name":"usize"},{"name":"str"}],"output":{"name":"result"}}],[11,"is_match","","Returns true if and only if the regex matches the string given.",24,null],[11,"find","","Returns the start and end byte range of the leftmost-first match in\n`text`. If no match exists, then `None` is returned.",24,null],[11,"find_iter","","Returns an iterator for each successive non-overlapping match in\n`text`, returning the start and end byte indices with respect to\n`text`.",24,null],[11,"captures","","Returns the capture groups corresponding to the leftmost-first\nmatch in `text`. Capture group `0` always corresponds to the entire\nmatch. If no match is found, then `None` is returned.",24,null],[11,"captures_iter","","Returns an iterator over all the non-overlapping capture groups matched\nin `text`. This is operationally the same as `find_iter`, except it\nyields information about submatches.",24,null],[11,"split","","Returns an iterator of substrings of `text` delimited by a match of the\nregular expression. Namely, each element of the iterator corresponds to\ntext that *isn&#39;t* matched by the regular expression.",24,null],[11,"splitn","","Returns an iterator of at most `limit` substrings of `text` delimited\nby a match of the regular expression. (A `limit` of `0` will return no\nsubstrings.) Namely, each element of the iterator corresponds to text\nthat *isn&#39;t* matched by the regular expression. The remainder of the\nstring that is not split will be the last element in the iterator.",24,null],[11,"replace","","Replaces the leftmost-first match with the replacement provided.\nThe replacement can be a regular string (where `$N` and `$name` are\nexpanded to match capture groups) or a function that takes the matches&#39;\n`Captures` and returns the replaced string.",24,null],[11,"replace_all","","Replaces all non-overlapping matches in `text` with the replacement\nprovided. This is the same as calling `replacen` with `limit` set to\n`0`.",24,null],[11,"replacen","","Replaces at most `limit` non-overlapping matches in `text` with the\nreplacement provided. If `limit` is 0, then all non-overlapping matches\nare replaced.",24,null],[11,"shortest_match","","Returns the end location of a match in the text given.",24,null],[11,"as_str","","Returns the original string of this regex.",24,null],[11,"capture_names","","Returns an iterator over the capture names.",24,null],[11,"captures_len","","Returns the number of captures.",24,null],[11,"next","","",25,null],[11,"size_hint","","",25,null],[11,"reg_replace","","",0,null],[11,"no_expand","","",0,null],[11,"next","","",26,null],[11,"next","","",27,null],[11,"pos","","Returns the start and end positions of the Nth capture group. Returns\n`None` if `i` is not a valid capture group or if the capture group did\nnot match anything. The positions returned are *always* byte indices\nwith respect to the original string matched.",28,null],[11,"at","","Returns the matched string for the capture group `i`.  If `i` isn&#39;t\na valid capture group or didn&#39;t match anything, then `None` is\nreturned.",28,null],[11,"name","","Returns the matched string for the capture group named `name`.  If\n`name` isn&#39;t a valid capture group or didn&#39;t match anything, then\n`None` is returned.",28,null],[11,"iter","","Creates an iterator of all the capture groups in order of appearance\nin the regular expression.",28,null],[11,"iter_pos","","Creates an iterator of all the capture group positions in order of\nappearance in the regular expression. Positions are byte indices\nin terms of the original string matched.",28,null],[11,"iter_named","","Creates an iterator of all named groups as an tuple with the group\nname and the value. The iterator returns these values in arbitrary\norder.",28,null],[11,"expand","","Expands all instances of `$name` in `text` to the corresponding capture\ngroup `name`.",28,null],[11,"len","","Returns the number of captured groups.",28,null],[11,"is_empty","","Returns true if and only if there are no captured groups.",28,null],[11,"fmt","","",28,null],[11,"index","","",28,null],[11,"index","","",28,null],[11,"next","","",29,null],[11,"next","","",30,null],[11,"next","","",31,null],[11,"next","","",32,null],[11,"next","","",33,null],[8,"Replacer","","Replacer describes types that can be used to replace matches in a string.",null,null],[10,"reg_replace","","Returns a possibly owned string that is used to replace the match\ncorresponding to the `caps` capture group.",34,null],[11,"no_expand","","Returns a possibly owned string that never needs expansion.",34,null],[11,"no_expand","","Returns a possibly owned string that never needs expansion.",34,null]],"paths":[[3,"NoExpand"],[4,"Error"],[3,"NoExpand"],[8,"Replacer"],[3,"RegexBuilder"],[3,"RegexBuilder"],[3,"Regex"],[3,"FindMatches"],[3,"FindCaptures"],[3,"Splits"],[3,"SplitsN"],[3,"CaptureNames"],[3,"Captures"],[3,"SubCaptures"],[3,"SubCapturesPos"],[3,"SubCapturesNamed"],[3,"RegexSet"],[3,"SetMatches"],[3,"SetMatchesIntoIter"],[3,"SetMatchesIter"],[3,"RegexSet"],[3,"SetMatches"],[3,"SetMatchesIntoIter"],[3,"SetMatchesIter"],[3,"Regex"],[3,"CaptureNames"],[3,"RegexSplits"],[3,"RegexSplitsN"],[3,"Captures"],[3,"SubCaptures"],[3,"SubCapturesPos"],[3,"SubCapturesNamed"],[3,"FindCaptures"],[3,"FindMatches"],[8,"Replacer"]]};
searchIndex["combine_language"] = {"doc":"# Example","items":[[3,"Lex","combine_language","A lexing parser for a language",null,null],[3,"WhiteSpace","","A whitespace parser for a language",null,null],[3,"Reserved","","Parses a reserved word",null,null],[3,"BetweenChar","","Parses `P` between two delimiter characters",null,null],[3,"Identifier","","Defines how to define an identifier (or operator)",null,null],[12,"start","","Parses a valid starting character for an identifier",0,null],[12,"rest","","Parses the rest of the characthers in a valid identifier",0,null],[12,"reserved","","A number of reserved words which cannot be identifiers",0,null],[3,"LanguageDef","","A struct type which contains the necessary definitions to construct a language parser",null,null],[12,"ident","","How to parse an identifier",1,null],[12,"op","","How to parse an operator",1,null],[12,"comment_line","","Describes the start of a line comment",1,null],[12,"comment_start","","Describes the start of a block comment",1,null],[12,"comment_end","","Describes the end of a block comment",1,null],[3,"LanguageEnv","","A type containing parsers for a specific language.\nFor some parsers there are two version where the parser which ends with a `_` is a variant\nwhich does not skip whitespace and comments after parsing the token itself.",null,null],[3,"Assoc","","Struct for encompassing the associativity of an operator",null,null],[12,"fixity","","Operator fixity",2,null],[12,"precedence","","Operator precedence",2,null],[3,"Expression","","Expression parser which handles binary operators",null,null],[4,"Fixity","","Enumeration on fixities for the expression parser",null,null],[13,"Left","","",3,null],[13,"Right","","",3,null],[5,"expression_parser","","Constructs an expression parser out of a term parser, an operator parser and a function which\ncombines a binary expression to new expressions.",null,{"inputs":[{"name":"p"},{"name":"o"},{"name":"f"}],"output":{"name":"expression"}}],[6,"LanguageParser","","",null,null],[6,"LexLanguageParser","","",null,null],[11,"clone","","",4,null],[11,"parse_stream","","",4,null],[11,"parse_stream_consumed","","",4,null],[11,"parse_lazy","","",4,null],[11,"add_error","","",4,null],[11,"clone","","",5,null],[11,"parse_stream","","",5,null],[11,"parse_stream","","",6,null],[11,"parse_stream_consumed","","",6,null],[11,"parse_lazy","","",6,null],[11,"add_error","","",6,null],[11,"parse_stream","","",7,null],[11,"parse_stream_consumed","","",7,null],[11,"parse_lazy","","",7,null],[11,"add_error","","",7,null],[11,"new","","Constructs a new parser from a language defintion",8,{"inputs":[{"name":"languagedef"}],"output":{"name":"languageenv"}}],[11,"lex","","Creates a lexing parser from `p`",8,null],[11,"white_space","","Skips spaces and comments",8,null],[11,"symbol","","Parses a symbol, lexing the stream if it is successful",8,null],[11,"identifier","","Parses an identifier, failing if it parses something that is a reserved identifier",8,null],[11,"identifier_","","",8,null],[11,"range_identifier","","Parses an identifier, failing if it parses something that is a reserved identifier",8,null],[11,"range_identifier_","","",8,null],[11,"reserved","","Parses the reserved identifier `name`",8,null],[11,"op","","Parses an operator, failing if it parses something that is a reserved operator",8,null],[11,"op_","","",8,null],[11,"range_op","","Parses an identifier, failing if it parses something that is a reserved identifier",8,null],[11,"range_op_","","",8,null],[11,"reserved_op","","Parses the reserved operator `name`",8,null],[11,"reserved_op_","","",8,null],[11,"char_literal","","Parses a character literal taking escape sequences into account",8,null],[11,"char_literal_","","",8,null],[11,"string_literal","","Parses a string literal taking character escapes into account",8,null],[11,"string_literal_","","",8,null],[11,"angles","","Parses `p` inside angle brackets\n`&lt; p &gt;`",8,null],[11,"braces","","Parses `p` inside braces\n`{ p }`",8,null],[11,"brackets","","Parses `p` inside brackets\n`[ p ]`",8,null],[11,"parens","","Parses `p` inside parentheses\n`( p )`",8,null],[11,"integer","","Parses an integer",8,null],[11,"integer_","","",8,null],[11,"float","","Parses a floating point number",8,null],[11,"float_","","",8,null],[11,"fmt","","",3,null],[11,"partial_cmp","","",3,null],[11,"cmp","","",3,null],[11,"eq","","",3,null],[11,"clone","","",3,null],[11,"fmt","","",2,null],[11,"partial_cmp","","",2,null],[11,"lt","","",2,null],[11,"le","","",2,null],[11,"gt","","",2,null],[11,"ge","","",2,null],[11,"cmp","","",2,null],[11,"eq","","",2,null],[11,"ne","","",2,null],[11,"clone","","",2,null],[11,"fmt","","",9,null],[11,"clone","","",9,null],[11,"parse_lazy","","",9,null],[11,"add_error","","",9,null]],"paths":[[3,"Identifier"],[3,"LanguageDef"],[3,"Assoc"],[4,"Fixity"],[3,"Lex"],[3,"WhiteSpace"],[3,"Reserved"],[3,"BetweenChar"],[3,"LanguageEnv"],[3,"Expression"]]};
searchIndex["unicode_segmentation"] = {"doc":"Iterators which split strings on Grapheme Cluster or Word boundaries, according\nto the [Unicode Standard Annex #29](http://www.unicode.org/reports/tr29/) rules.","items":[[3,"Graphemes","unicode_segmentation","External iterator for a string&#39;s\n[grapheme clusters](http://www.unicode.org/reports/tr29/#Grapheme_Cluster_Boundaries).",null,null],[3,"GraphemeIndices","","External iterator for grapheme clusters and byte offsets.",null,null],[3,"UWordBounds","","External iterator for a string&#39;s\n[word boundaries](http://www.unicode.org/reports/tr29/#Word_Boundaries).",null,null],[3,"UWordBoundIndices","","External iterator for word boundaries and byte offsets.",null,null],[3,"UnicodeWords","","An iterator over the substrings of a string which, after splitting the string on\n[word boundaries](http://www.unicode.org/reports/tr29/#Word_Boundaries),\ncontain any characters with the\n[Alphabetic](http://unicode.org/reports/tr44/#Alphabetic)\nproperty, or with\n[General_Category=Number](http://unicode.org/reports/tr44/#General_Category_Values).",null,null],[11,"clone","","",0,null],[11,"next","","",0,null],[11,"size_hint","","",0,null],[11,"next_back","","",0,null],[11,"clone","","",1,null],[11,"size_hint","","",1,null],[11,"next","","",1,null],[11,"next_back","","",1,null],[11,"next","","",2,null],[11,"next_back","","",2,null],[11,"clone","","",3,null],[11,"clone","","",4,null],[11,"next","","",4,null],[11,"size_hint","","",4,null],[11,"next_back","","",4,null],[11,"size_hint","","",3,null],[11,"next","","",3,null],[11,"next_back","","",3,null],[17,"UNICODE_VERSION","","The version of [Unicode](http://www.unicode.org/)\nthat this version of unicode-segmentation is based on.",null,null],[8,"UnicodeSegmentation","","Methods for segmenting strings according to\n[Unicode Standard Annex #29](http://www.unicode.org/reports/tr29/).",null,null],[10,"graphemes","","Returns an iterator over the [grapheme clusters][graphemes] of `self`.",5,null],[10,"grapheme_indices","","Returns an iterator over the grapheme clusters of `self` and their\nbyte offsets. See `graphemes()` for more information.",5,null],[10,"unicode_words","","Returns an iterator over the words of `self`, separated on\n[UAX#29 word boundaries](http://www.unicode.org/reports/tr29/#Word_Boundaries).",5,null],[10,"split_word_bounds","","Returns an iterator over substrings of `self` separated on\n[UAX#29 word boundaries](http://www.unicode.org/reports/tr29/#Word_Boundaries).",5,null],[10,"split_word_bound_indices","","Returns an iterator over substrings of `self`, split on UAX#29 word boundaries,\nand their offsets. See `split_word_bounds()` for more information.",5,null]],"paths":[[3,"GraphemeIndices"],[3,"Graphemes"],[3,"UnicodeWords"],[3,"UWordBounds"],[3,"UWordBoundIndices"],[8,"UnicodeSegmentation"]]};
searchIndex["log"] = {"doc":"A lightweight logging facade.","items":[[3,"LogRecord","log","The &quot;payload&quot; of a log message.",null,null],[3,"LogMetadata","","Metadata about a log message.",null,null],[3,"LogLocation","","The location of a log message.",null,null],[3,"MaxLogLevelFilter","","A token providing read and write access to the global maximum log level\nfilter.",null,null],[3,"SetLoggerError","","The type returned by `set_logger` if `set_logger` has already been called.",null,null],[3,"ShutdownLoggerError","","The type returned by `shutdown_logger_raw` if `shutdown_logger_raw` has\nalready been called or if `set_logger_raw` has not been called yet.",null,null],[4,"LogLevel","","An enum representing the available verbosity levels of the logging framework",null,null],[13,"Error","","The &quot;error&quot; level.",0,null],[13,"Warn","","The &quot;warn&quot; level.",0,null],[13,"Info","","The &quot;info&quot; level.",0,null],[13,"Debug","","The &quot;debug&quot; level.",0,null],[13,"Trace","","The &quot;trace&quot; level.",0,null],[4,"LogLevelFilter","","An enum representing the available verbosity level filters of the logging\nframework.",null,null],[13,"Off","","A level lower than all log levels.",1,null],[13,"Error","","Corresponds to the `Error` log level.",1,null],[13,"Warn","","Corresponds to the `Warn` log level.",1,null],[13,"Info","","Corresponds to the `Info` log level.",1,null],[13,"Debug","","Corresponds to the `Debug` log level.",1,null],[13,"Trace","","Corresponds to the `Trace` log level.",1,null],[5,"max_log_level","","Returns the current maximum log level.",null,{"inputs":[],"output":{"name":"loglevelfilter"}}],[5,"set_logger","","Sets the global logger.",null,{"inputs":[{"name":"m"}],"output":{"name":"result"}}],[5,"set_logger_raw","","Sets the global logger from a raw pointer.",null,{"inputs":[{"name":"m"}],"output":{"name":"result"}}],[5,"shutdown_logger","","Shuts down the global logger.",null,{"inputs":[],"output":{"name":"result"}}],[5,"shutdown_logger_raw","","Shuts down the global logger.",null,{"inputs":[],"output":{"name":"result"}}],[8,"Log","","A trait encapsulating the operations required of a logger",null,null],[10,"enabled","","Determines if a log message with the specified metadata would be\nlogged.",2,null],[10,"log","","Logs the `LogRecord`.",2,null],[11,"fmt","","",0,null],[11,"clone","","",0,null],[11,"eq","","",0,null],[11,"eq","","",0,null],[11,"partial_cmp","","",0,null],[11,"partial_cmp","","",0,null],[11,"cmp","","",0,null],[11,"from_str","","",0,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",0,null],[11,"max","","Returns the most verbose logging level.",0,{"inputs":[],"output":{"name":"loglevel"}}],[11,"to_log_level_filter","","Converts the `LogLevel` to the equivalent `LogLevelFilter`.",0,null],[11,"fmt","","",1,null],[11,"clone","","",1,null],[11,"eq","","",1,null],[11,"eq","","",1,null],[11,"partial_cmp","","",1,null],[11,"partial_cmp","","",1,null],[11,"cmp","","",1,null],[11,"from_str","","",1,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",1,null],[11,"max","","Returns the most verbose logging level filter.",1,{"inputs":[],"output":{"name":"loglevelfilter"}}],[11,"to_log_level","","Converts `self` to the equivalent `LogLevel`.",1,null],[11,"args","","The message body.",3,null],[11,"metadata","","Metadata about the log directive.",3,null],[11,"location","","The location of the log directive.",3,null],[11,"level","","The verbosity level of the message.",3,null],[11,"target","","The name of the target of the directive.",3,null],[11,"level","","The verbosity level of the message.",4,null],[11,"target","","The name of the target of the directive.",4,null],[11,"fmt","","",5,null],[11,"clone","","",5,null],[11,"module_path","","The module path of the message.",5,null],[11,"file","","The source file containing the message.",5,null],[11,"line","","The line containing the message.",5,null],[11,"fmt","","",6,null],[11,"get","","Gets the current maximum log level filter.",6,null],[11,"set","","Sets the maximum log level.",6,null],[11,"fmt","","",7,null],[11,"fmt","","",7,null],[11,"description","","",7,null],[11,"fmt","","",8,null],[11,"fmt","","",8,null],[11,"description","","",8,null],[14,"log!","","The standard logging macro.",null,null],[14,"error!","","Logs a message at the error level.",null,null],[14,"warn!","","Logs a message at the warn level.",null,null],[14,"info!","","Logs a message at the info level.",null,null],[14,"debug!","","Logs a message at the debug level.",null,null],[14,"trace!","","Logs a message at the trace level.",null,null],[14,"log_enabled!","","Determines if a message logged at the specified level in that module will\nbe logged.",null,null]],"paths":[[4,"LogLevel"],[4,"LogLevelFilter"],[8,"Log"],[3,"LogRecord"],[3,"LogMetadata"],[3,"LogLocation"],[3,"MaxLogLevelFilter"],[3,"SetLoggerError"],[3,"ShutdownLoggerError"]]};
searchIndex["rustyline"] = {"doc":"Readline for Rust","items":[[3,"Editor","rustyline","Line editor",null,null],[0,"completion","","Completion API",null,null],[3,"FilenameCompleter","rustyline::completion","",null,null],[5,"extract_word","","Given a `line` and a cursor `pos`ition,\ntry to find backward the start of a word.\nReturn (0, `line[..pos]`) if no break char has been found.\nReturn the word and its start position (idx, `line[idx..pos]`) otherwise.",null,null],[8,"Completer","","To be called for tab-completion.",null,null],[10,"complete","","Takes the currently edited `line` with the cursor `pos`ition and\nreturns the start position and the completion candidates for the partial word to be completed.\n&quot;ls /usr/loc&quot; =&gt; Ok((3, vec![&quot;/usr/local/&quot;]))",0,null],[11,"update","","Updates the edited `line` with the `elected` candidate.",0,null],[11,"new","","",1,{"inputs":[],"output":{"name":"filenamecompleter"}}],[11,"default","","",1,{"inputs":[],"output":{"name":"filenamecompleter"}}],[11,"complete","","",1,null],[0,"error","rustyline","Contains error type for handling I/O and Errno errors",null,null],[4,"ReadlineError","rustyline::error","The error type for Rustyline errors that can arise from\nI/O related errors or Errno when using the nix-rust library",null,null],[13,"Io","","I/O Error",2,null],[13,"Eof","","EOF (Ctrl-D)",2,null],[13,"Interrupted","","Ctrl-C",2,null],[13,"Char","","Chars Error",2,null],[13,"Errno","","Unix Error from syscall",2,null],[11,"fmt","","",2,null],[11,"fmt","","",2,null],[11,"description","","",2,null],[11,"from","","",2,{"inputs":[{"name":"error"}],"output":{"name":"readlineerror"}}],[11,"from","","",2,{"inputs":[{"name":"error"}],"output":{"name":"readlineerror"}}],[11,"from","","",2,{"inputs":[{"name":"charserror"}],"output":{"name":"readlineerror"}}],[0,"history","rustyline","History API",null,null],[3,"History","rustyline::history","",null,null],[11,"new","","",3,{"inputs":[],"output":{"name":"history"}}],[11,"ignore_space","","Tell if lines which begin with a space character are saved or not in the history list.\nBy default, they are saved.",3,null],[11,"ignore_dups","","Tell if lines which match the previous history entry are saved or not in the history list.\nBy default, they are ignored.",3,null],[11,"get","","Return the history entry at position `index`, starting from 0.",3,null],[11,"add","","Add a new entry in the history.",3,null],[11,"len","","Returns the number of entries in the history.",3,null],[11,"is_empty","","Returns true if the history has no entry.",3,null],[11,"set_max_len","","Set the maximum length for the history. This function can be called even\nif there is already some history, the function will make sure to retain\njust the latest `len` elements if the new history length value is smaller\nthan the amount of items already inside the history.",3,null],[11,"save","","Save the history in the specified file.",3,null],[11,"load","","Load the history from the specified file.",3,null],[11,"clear","","Clear history",3,null],[11,"search","","Search history (start position inclusive [0, len-1])\nReturn the absolute index of the nearest history entry that matches `term`.\nReturn None if no entry contains `term` between [start, len -1] for forward search\nor between [0, start] for reverse search.",3,null],[11,"default","","",3,{"inputs":[],"output":{"name":"history"}}],[0,"line_buffer","rustyline","Line buffer with current cursor position",null,null],[3,"LineBuffer","rustyline::line_buffer","",null,null],[4,"WordAction","","",null,null],[13,"CAPITALIZE","","",4,null],[13,"LOWERCASE","","",4,null],[13,"UPPERCASE","","",4,null],[7,"MAX_LINE","","Maximum buffer size for the line read",null,null],[11,"fmt","","",5,null],[11,"with_capacity","","Create a new line buffer with the given maximum `capacity`.",5,{"inputs":[{"name":"usize"}],"output":{"name":"linebuffer"}}],[11,"as_str","","Extracts a string slice containing the entire buffer.",5,null],[11,"into_string","","Converts a buffer into a `String` without copying or allocating.",5,null],[11,"pos","","Current cursor position (byte position)",5,null],[11,"len","","Returns the length of this buffer, in bytes.",5,null],[11,"is_empty","","Returns `true` if this buffer has a length of zero.",5,null],[11,"update","","Set line content (`buf`) and cursor position (`pos`).",5,null],[11,"backup","","Backup `src`",5,null],[11,"insert","","Insert the character `ch` at current cursor position\nand advance cursor position accordingly.\nReturn `None` when maximum buffer size has been reached,\n`true` when the character has been appended to the end of the line.",5,null],[11,"yank","","Yank/paste `text` at current position.\nReturn `None` when maximum buffer size has been reached,\n`true` when the character has been appended to the end of the line.",5,null],[11,"yank_pop","","Delete previously yanked text and yank/paste `text` at current position.",5,null],[11,"move_left","","Move cursor on the left.",5,null],[11,"move_right","","Move cursor on the right.",5,null],[11,"move_home","","Move cursor to the start of the line.",5,null],[11,"move_end","","Move cursor to the end of the line.",5,null],[11,"delete","","Delete the character at the right of the cursor without altering the cursor\nposition. Basically this is what happens with the &quot;Delete&quot; keyboard key.",5,null],[11,"backspace","","Delete the character at the left of the cursor.\nBasically that is what happens with the &quot;Backspace&quot; keyboard key.",5,null],[11,"kill_line","","Kill the text from point to the end of the line.",5,null],[11,"discard_line","","Kill backward from point to the beginning of the line.",5,null],[11,"transpose_chars","","Exchange the char before cursor with the character at cursor.",5,null],[11,"move_to_prev_word","","Moves the cursor to the beginning of previous word.",5,null],[11,"delete_prev_word","","Delete the previous word, maintaining the cursor at the start of the\ncurrent word.",5,null],[11,"next_word_pos","","Returns the position (start, end) of the next word.",5,null],[11,"move_to_next_word","","Moves the cursor to the end of next word.",5,null],[11,"delete_word","","Kill from the cursor to the end of the current word, or, if between words, to the end of the next word.",5,null],[11,"edit_word","","Alter the next word.",5,null],[11,"transpose_words","","Transpose two words",5,null],[11,"replace","","Replaces the content between [`start`..`end`] with `text` and positions the cursor to the end of text.",5,null],[11,"deref","","",5,null],[6,"Result","rustyline","The error type for I/O and Linux Syscalls (Errno)",null,null],[11,"new","","",6,{"inputs":[],"output":{"name":"editor"}}],[11,"readline","","This method will read a line from STDIN and will display a `prompt`",6,null],[11,"history_ignore_dups","","Tell if lines which match the previous history entry are saved or not in the history list.\nBy default, they are ignored.",6,null],[11,"history_ignore_space","","Tell if lines which begin with a space character are saved or not in the history list.\nBy default, they are saved.",6,null],[11,"load_history","","Load the history from the specified file.",6,null],[11,"save_history","","Save the history in the specified file.",6,null],[11,"add_history_entry","","Add a new entry in the history.",6,null],[11,"set_history_max_len","","Set the maximum length for the history.",6,null],[11,"clear_history","","Clear history.",6,null],[11,"get_history","","Return a reference to the history object.",6,null],[11,"set_completer","","Register a callback function to be called for tab-completion.",6,null],[11,"default","","",6,{"inputs":[],"output":{"name":"editor"}}],[11,"fmt","","",6,null]],"paths":[[8,"Completer"],[3,"FilenameCompleter"],[4,"ReadlineError"],[3,"History"],[4,"WordAction"],[3,"LineBuffer"],[3,"Editor"]]};
searchIndex["nix"] = {"doc":"Rust friendly bindings to the various *nix system functions.","items":[[6,"c_int","nix","",null,null],[4,"c_void","","",null,null],[4,"Errno","","",null,null],[13,"UnknownErrno","","",0,null],[13,"EPERM","","",0,null],[13,"ENOENT","","",0,null],[13,"ESRCH","","",0,null],[13,"EINTR","","",0,null],[13,"EIO","","",0,null],[13,"ENXIO","","",0,null],[13,"E2BIG","","",0,null],[13,"ENOEXEC","","",0,null],[13,"EBADF","","",0,null],[13,"ECHILD","","",0,null],[13,"EDEADLK","","",0,null],[13,"ENOMEM","","",0,null],[13,"EACCES","","",0,null],[13,"EFAULT","","",0,null],[13,"ENOTBLK","","",0,null],[13,"EBUSY","","",0,null],[13,"EEXIST","","",0,null],[13,"EXDEV","","",0,null],[13,"ENODEV","","",0,null],[13,"ENOTDIR","","",0,null],[13,"EISDIR","","",0,null],[13,"EINVAL","","",0,null],[13,"ENFILE","","",0,null],[13,"EMFILE","","",0,null],[13,"ENOTTY","","",0,null],[13,"ETXTBSY","","",0,null],[13,"EFBIG","","",0,null],[13,"ENOSPC","","",0,null],[13,"ESPIPE","","",0,null],[13,"EROFS","","",0,null],[13,"EMLINK","","",0,null],[13,"EPIPE","","",0,null],[13,"EDOM","","",0,null],[13,"ERANGE","","",0,null],[13,"EAGAIN","","",0,null],[13,"EINPROGRESS","","",0,null],[13,"EALREADY","","",0,null],[13,"ENOTSOCK","","",0,null],[13,"EDESTADDRREQ","","",0,null],[13,"EMSGSIZE","","",0,null],[13,"EPROTOTYPE","","",0,null],[13,"ENOPROTOOPT","","",0,null],[13,"EPROTONOSUPPORT","","",0,null],[13,"ESOCKTNOSUPPORT","","",0,null],[13,"ENOTSUP","","",0,null],[13,"EPFNOSUPPORT","","",0,null],[13,"EAFNOSUPPORT","","",0,null],[13,"EADDRINUSE","","",0,null],[13,"EADDRNOTAVAIL","","",0,null],[13,"ENETDOWN","","",0,null],[13,"ENETUNREACH","","",0,null],[13,"ENETRESET","","",0,null],[13,"ECONNABORTED","","",0,null],[13,"ECONNRESET","","",0,null],[13,"ENOBUFS","","",0,null],[13,"EISCONN","","",0,null],[13,"ENOTCONN","","",0,null],[13,"ESHUTDOWN","","",0,null],[13,"ETOOMANYREFS","","",0,null],[13,"ETIMEDOUT","","",0,null],[13,"ECONNREFUSED","","",0,null],[13,"ELOOP","","",0,null],[13,"ENAMETOOLONG","","",0,null],[13,"EHOSTDOWN","","",0,null],[13,"EHOSTUNREACH","","",0,null],[13,"ENOTEMPTY","","",0,null],[13,"EPROCLIM","","",0,null],[13,"EUSERS","","",0,null],[13,"EDQUOT","","",0,null],[13,"ESTALE","","",0,null],[13,"EREMOTE","","",0,null],[13,"EBADRPC","","",0,null],[13,"ERPCMISMATCH","","",0,null],[13,"EPROGUNAVAIL","","",0,null],[13,"EPROGMISMATCH","","",0,null],[13,"EPROCUNAVAIL","","",0,null],[13,"ENOLCK","","",0,null],[13,"ENOSYS","","",0,null],[13,"EFTYPE","","",0,null],[13,"EAUTH","","",0,null],[13,"ENEEDAUTH","","",0,null],[13,"EPWROFF","","",0,null],[13,"EDEVERR","","",0,null],[13,"EOVERFLOW","","",0,null],[13,"EBADEXEC","","",0,null],[13,"EBADARCH","","",0,null],[13,"ESHLIBVERS","","",0,null],[13,"EBADMACHO","","",0,null],[13,"ECANCELED","","",0,null],[13,"EIDRM","","",0,null],[13,"ENOMSG","","",0,null],[13,"EILSEQ","","",0,null],[13,"ENOATTR","","",0,null],[13,"EBADMSG","","",0,null],[13,"EMULTIHOP","","",0,null],[13,"ENODATA","","",0,null],[13,"ENOLINK","","",0,null],[13,"ENOSR","","",0,null],[13,"ENOSTR","","",0,null],[13,"EPROTO","","",0,null],[13,"ETIME","","",0,null],[13,"EOPNOTSUPP","","",0,null],[13,"ENOPOLICY","","",0,null],[13,"ENOTRECOVERABLE","","",0,null],[13,"EOWNERDEAD","","",0,null],[13,"EQFULL","","",0,null],[4,"Error","","",null,null],[13,"Sys","","",1,null],[13,"InvalidPath","","",1,null],[0,"errno","","",null,null],[4,"Errno","nix::errno","",null,null],[13,"UnknownErrno","","",0,null],[13,"EPERM","","",0,null],[13,"ENOENT","","",0,null],[13,"ESRCH","","",0,null],[13,"EINTR","","",0,null],[13,"EIO","","",0,null],[13,"ENXIO","","",0,null],[13,"E2BIG","","",0,null],[13,"ENOEXEC","","",0,null],[13,"EBADF","","",0,null],[13,"ECHILD","","",0,null],[13,"EDEADLK","","",0,null],[13,"ENOMEM","","",0,null],[13,"EACCES","","",0,null],[13,"EFAULT","","",0,null],[13,"ENOTBLK","","",0,null],[13,"EBUSY","","",0,null],[13,"EEXIST","","",0,null],[13,"EXDEV","","",0,null],[13,"ENODEV","","",0,null],[13,"ENOTDIR","","",0,null],[13,"EISDIR","","",0,null],[13,"EINVAL","","",0,null],[13,"ENFILE","","",0,null],[13,"EMFILE","","",0,null],[13,"ENOTTY","","",0,null],[13,"ETXTBSY","","",0,null],[13,"EFBIG","","",0,null],[13,"ENOSPC","","",0,null],[13,"ESPIPE","","",0,null],[13,"EROFS","","",0,null],[13,"EMLINK","","",0,null],[13,"EPIPE","","",0,null],[13,"EDOM","","",0,null],[13,"ERANGE","","",0,null],[13,"EAGAIN","","",0,null],[13,"EINPROGRESS","","",0,null],[13,"EALREADY","","",0,null],[13,"ENOTSOCK","","",0,null],[13,"EDESTADDRREQ","","",0,null],[13,"EMSGSIZE","","",0,null],[13,"EPROTOTYPE","","",0,null],[13,"ENOPROTOOPT","","",0,null],[13,"EPROTONOSUPPORT","","",0,null],[13,"ESOCKTNOSUPPORT","","",0,null],[13,"ENOTSUP","","",0,null],[13,"EPFNOSUPPORT","","",0,null],[13,"EAFNOSUPPORT","","",0,null],[13,"EADDRINUSE","","",0,null],[13,"EADDRNOTAVAIL","","",0,null],[13,"ENETDOWN","","",0,null],[13,"ENETUNREACH","","",0,null],[13,"ENETRESET","","",0,null],[13,"ECONNABORTED","","",0,null],[13,"ECONNRESET","","",0,null],[13,"ENOBUFS","","",0,null],[13,"EISCONN","","",0,null],[13,"ENOTCONN","","",0,null],[13,"ESHUTDOWN","","",0,null],[13,"ETOOMANYREFS","","",0,null],[13,"ETIMEDOUT","","",0,null],[13,"ECONNREFUSED","","",0,null],[13,"ELOOP","","",0,null],[13,"ENAMETOOLONG","","",0,null],[13,"EHOSTDOWN","","",0,null],[13,"EHOSTUNREACH","","",0,null],[13,"ENOTEMPTY","","",0,null],[13,"EPROCLIM","","",0,null],[13,"EUSERS","","",0,null],[13,"EDQUOT","","",0,null],[13,"ESTALE","","",0,null],[13,"EREMOTE","","",0,null],[13,"EBADRPC","","",0,null],[13,"ERPCMISMATCH","","",0,null],[13,"EPROGUNAVAIL","","",0,null],[13,"EPROGMISMATCH","","",0,null],[13,"EPROCUNAVAIL","","",0,null],[13,"ENOLCK","","",0,null],[13,"ENOSYS","","",0,null],[13,"EFTYPE","","",0,null],[13,"EAUTH","","",0,null],[13,"ENEEDAUTH","","",0,null],[13,"EPWROFF","","",0,null],[13,"EDEVERR","","",0,null],[13,"EOVERFLOW","","",0,null],[13,"EBADEXEC","","",0,null],[13,"EBADARCH","","",0,null],[13,"ESHLIBVERS","","",0,null],[13,"EBADMACHO","","",0,null],[13,"ECANCELED","","",0,null],[13,"EIDRM","","",0,null],[13,"ENOMSG","","",0,null],[13,"EILSEQ","","",0,null],[13,"ENOATTR","","",0,null],[13,"EBADMSG","","",0,null],[13,"EMULTIHOP","","",0,null],[13,"ENODATA","","",0,null],[13,"ENOLINK","","",0,null],[13,"ENOSR","","",0,null],[13,"ENOSTR","","",0,null],[13,"EPROTO","","",0,null],[13,"ETIME","","",0,null],[13,"EOPNOTSUPP","","",0,null],[13,"ENOPOLICY","","",0,null],[13,"ENOTRECOVERABLE","","",0,null],[13,"EOWNERDEAD","","",0,null],[13,"EQFULL","","",0,null],[5,"from_i32","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"errno"}}],[5,"errno","","Returns the platform-specific value of errno",null,{"inputs":[],"output":{"name":"i32"}}],[11,"eq","nix","",0,null],[11,"clone","","",0,null],[11,"fmt","","",0,null],[17,"ELAST","nix::errno","",null,null],[17,"EWOULDBLOCK","","",null,null],[17,"EDEADLOCK","","",null,null],[17,"EL2NSYNC","","",null,null],[8,"ErrnoSentinel","","The sentinel value indicates that a function failed and more detailed\ninformation about the error can be found in `errno`",null,null],[10,"sentinel","","",2,{"inputs":[],"output":{"name":"self"}}],[11,"last","nix","",0,{"inputs":[],"output":{"name":"self"}}],[11,"desc","","",0,null],[11,"from_i32","","",0,{"inputs":[{"name":"i32"}],"output":{"name":"errno"}}],[11,"clear","","",0,null],[11,"result","","Returns `Ok(value)` if it does not contain the sentinel value. This\nshould not be used when `-1` is not the errno sentinel value.",0,{"inputs":[{"name":"s"}],"output":{"name":"result"}}],[11,"description","","",0,null],[11,"fmt","","",0,null],[0,"features","","",null,null],[5,"socket_atomic_cloexec","nix::features","",null,{"inputs":[],"output":{"name":"bool"}}],[0,"fcntl","nix","",null,null],[3,"OFlag","nix::fcntl","",null,null],[3,"FdFlag","","",null,null],[3,"flock","","",null,null],[12,"l_start","","",3,null],[12,"l_len","","",3,null],[12,"l_pid","","",3,null],[12,"l_type","","",3,null],[12,"l_whence","","",3,null],[12,"l_sysid","","",3,null],[4,"FcntlArg","","",null,null],[13,"F_DUPFD","","",4,null],[13,"F_DUPFD_CLOEXEC","","",4,null],[13,"F_GETFD","","",4,null],[13,"F_SETFD","","",4,null],[13,"F_GETFL","","",4,null],[13,"F_SETFL","","",4,null],[13,"F_SETLK","","",4,null],[13,"F_SETLKW","","",4,null],[13,"F_GETLK","","",4,null],[4,"FlockArg","","",null,null],[13,"LockShared","","",5,null],[13,"LockExclusive","","",5,null],[13,"Unlock","","",5,null],[13,"LockSharedNonblock","","",5,null],[13,"LockExclusiveNonblock","","",5,null],[13,"UnlockNonblock","","",5,null],[5,"open","","",null,{"inputs":[{"name":"p"},{"name":"oflag"},{"name":"mode"}],"output":{"name":"result"}}],[5,"fcntl","","",null,{"inputs":[{"name":"rawfd"},{"name":"fcntlarg"}],"output":{"name":"result"}}],[5,"flock","","",null,{"inputs":[{"name":"rawfd"},{"name":"flockarg"}],"output":{"name":"result"}}],[11,"fmt","","",3,null],[11,"default","","",3,{"inputs":[],"output":{"name":"flock"}}],[11,"clone","","",3,null],[11,"hash","","",6,null],[11,"cmp","","",6,null],[11,"partial_cmp","","",6,null],[11,"lt","","",6,null],[11,"le","","",6,null],[11,"gt","","",6,null],[11,"ge","","",6,null],[11,"clone","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"fmt","","",6,null],[11,"empty","","Returns an empty set of flags.",6,{"inputs":[],"output":{"name":"oflag"}}],[11,"all","","Returns the set containing all flags.",6,{"inputs":[],"output":{"name":"oflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",6,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",6,{"inputs":[{"name":"c_int"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",6,{"inputs":[{"name":"c_int"}],"output":{"name":"oflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",6,null],[11,"is_all","","Returns `true` if all flags are currently set.",6,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",6,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",6,null],[11,"insert","","Inserts the specified flags in-place.",6,null],[11,"remove","","Removes the specified flags in-place.",6,null],[11,"toggle","","Toggles the specified flags in-place.",6,null],[11,"bitor","","Returns the union of the two sets of flags.",6,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",6,null],[11,"bitand","","Returns the intersection between the two sets of flags.",6,null],[11,"sub","","Returns the set difference of the two sets of flags.",6,null],[11,"not","","Returns the complement of this set of flags.",6,null],[11,"from_iter","","",6,{"inputs":[{"name":"t"}],"output":{"name":"oflag"}}],[11,"hash","","",7,null],[11,"cmp","","",7,null],[11,"partial_cmp","","",7,null],[11,"lt","","",7,null],[11,"le","","",7,null],[11,"gt","","",7,null],[11,"ge","","",7,null],[11,"clone","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"fmt","","",7,null],[11,"empty","","Returns an empty set of flags.",7,{"inputs":[],"output":{"name":"fdflag"}}],[11,"all","","Returns the set containing all flags.",7,{"inputs":[],"output":{"name":"fdflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",7,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",7,{"inputs":[{"name":"c_int"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",7,{"inputs":[{"name":"c_int"}],"output":{"name":"fdflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",7,null],[11,"is_all","","Returns `true` if all flags are currently set.",7,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",7,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",7,null],[11,"insert","","Inserts the specified flags in-place.",7,null],[11,"remove","","Removes the specified flags in-place.",7,null],[11,"toggle","","Toggles the specified flags in-place.",7,null],[11,"bitor","","Returns the union of the two sets of flags.",7,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",7,null],[11,"bitand","","Returns the intersection between the two sets of flags.",7,null],[11,"sub","","Returns the set difference of the two sets of flags.",7,null],[11,"not","","Returns the complement of this set of flags.",7,null],[11,"from_iter","","",7,{"inputs":[{"name":"t"}],"output":{"name":"fdflag"}}],[17,"O_ACCMODE","","",null,null],[17,"O_RDONLY","","",null,null],[17,"O_WRONLY","","",null,null],[17,"O_RDWR","","",null,null],[17,"O_CREAT","","",null,null],[17,"O_EXCL","","",null,null],[17,"O_NOCTTY","","",null,null],[17,"O_TRUNC","","",null,null],[17,"O_APPEND","","",null,null],[17,"O_NONBLOCK","","",null,null],[17,"O_DSYNC","","",null,null],[17,"O_DIRECTORY","","",null,null],[17,"O_NOFOLLOW","","",null,null],[17,"O_CLOEXEC","","",null,null],[17,"O_SYNC","","",null,null],[17,"O_NDELAY","","",null,null],[17,"O_FSYNC","","",null,null],[17,"FD_CLOEXEC","","",null,null],[0,"poll","nix","",null,null],[3,"PollFd","nix::poll","",null,null],[12,"fd","","",8,null],[12,"events","","",8,null],[12,"revents","","",8,null],[3,"EventFlags","","",null,null],[5,"poll","","",null,null],[11,"hash","","",9,null],[11,"cmp","","",9,null],[11,"partial_cmp","","",9,null],[11,"lt","","",9,null],[11,"le","","",9,null],[11,"gt","","",9,null],[11,"ge","","",9,null],[11,"clone","","",9,null],[11,"eq","","",9,null],[11,"ne","","",9,null],[11,"fmt","","",9,null],[11,"empty","","Returns an empty set of flags.",9,{"inputs":[],"output":{"name":"eventflags"}}],[11,"all","","Returns the set containing all flags.",9,{"inputs":[],"output":{"name":"eventflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",9,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",9,{"inputs":[{"name":"c_short"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",9,{"inputs":[{"name":"c_short"}],"output":{"name":"eventflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",9,null],[11,"is_all","","Returns `true` if all flags are currently set.",9,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",9,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",9,null],[11,"insert","","Inserts the specified flags in-place.",9,null],[11,"remove","","Removes the specified flags in-place.",9,null],[11,"toggle","","Toggles the specified flags in-place.",9,null],[11,"bitor","","Returns the union of the two sets of flags.",9,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",9,null],[11,"bitand","","Returns the intersection between the two sets of flags.",9,null],[11,"sub","","Returns the set difference of the two sets of flags.",9,null],[11,"not","","Returns the complement of this set of flags.",9,null],[11,"from_iter","","",9,{"inputs":[{"name":"t"}],"output":{"name":"eventflags"}}],[11,"fmt","","",8,null],[11,"clone","","",8,null],[6,"nfds_t","","",null,null],[17,"POLLIN","","",null,null],[17,"POLLPRI","","",null,null],[17,"POLLOUT","","",null,null],[17,"POLLRDNORM","","",null,null],[17,"POLLWRNORM","","",null,null],[17,"POLLRDBAND","","",null,null],[17,"POLLWRBAND","","",null,null],[17,"POLLERR","","",null,null],[17,"POLLHUP","","",null,null],[17,"POLLNVAL","","",null,null],[0,"net","nix","",null,null],[0,"if_","nix::net","Network interface name resolution.",null,null],[5,"if_nametoindex","nix::net::if_","Resolve an interface into a interface number.",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[0,"sys","nix","",null,null],[0,"event","nix::sys","",null,null],[3,"KEvent","nix::sys::event","",null,null],[12,"ident","","",10,null],[12,"filter","","",10,null],[12,"flags","","",10,null],[12,"fflags","","",10,null],[12,"data","","",10,null],[12,"udata","","",10,null],[3,"EventFlag","","",null,null],[3,"FilterFlag","","",null,null],[4,"EventFilter","","",null,null],[13,"EVFILT_READ","","",11,null],[13,"EVFILT_WRITE","","",11,null],[13,"EVFILT_AIO","","",11,null],[13,"EVFILT_VNODE","","",11,null],[13,"EVFILT_PROC","","",11,null],[13,"EVFILT_SIGNAL","","",11,null],[13,"EVFILT_TIMER","","",11,null],[13,"EVFILT_MACHPORT","","",11,null],[13,"EVFILT_FS","","",11,null],[13,"EVFILT_USER","","",11,null],[13,"EVFILT_VM","","",11,null],[13,"EVFILT_SYSCOUNT","","",11,null],[5,"kqueue","","",null,{"inputs":[],"output":{"name":"result"}}],[5,"kevent","","",null,null],[5,"kevent_ts","","",null,null],[5,"ev_set","","",null,{"inputs":[{"name":"kevent"},{"name":"usize"},{"name":"eventfilter"},{"name":"eventflag"},{"name":"filterflag"},{"name":"usize"}],"output":null}],[11,"clone","","",10,null],[17,"EV_ADD","","",null,null],[17,"EV_DELETE","","",null,null],[17,"EV_ENABLE","","",null,null],[17,"EV_DISABLE","","",null,null],[17,"EV_RECEIPT","","",null,null],[17,"EV_ONESHOT","","",null,null],[17,"EV_CLEAR","","",null,null],[17,"EV_DISPATCH","","",null,null],[17,"EV_SYSFLAGS","","",null,null],[17,"EV_FLAG0","","",null,null],[17,"EV_FLAG1","","",null,null],[17,"EV_EOF","","",null,null],[17,"EV_ERROR","","",null,null],[17,"NOTE_TRIGGER","","",null,null],[17,"NOTE_FFNOP","","",null,null],[17,"NOTE_FFAND","","",null,null],[17,"NOTE_FFOR","","",null,null],[17,"NOTE_FFCOPY","","",null,null],[17,"NOTE_FFCTRLMASK","","",null,null],[17,"NOTE_FFLAGSMASK","","",null,null],[17,"NOTE_LOWAT","","",null,null],[17,"NOTE_DELETE","","",null,null],[17,"NOTE_WRITE","","",null,null],[17,"NOTE_EXTEND","","",null,null],[17,"NOTE_ATTRIB","","",null,null],[17,"NOTE_LINK","","",null,null],[17,"NOTE_RENAME","","",null,null],[17,"NOTE_REVOKE","","",null,null],[17,"NOTE_NONE","","",null,null],[17,"NOTE_EXIT","","",null,null],[17,"NOTE_FORK","","",null,null],[17,"NOTE_EXEC","","",null,null],[17,"NOTE_REAP","","",null,null],[17,"NOTE_SIGNAL","","",null,null],[17,"NOTE_EXITSTATUS","","",null,null],[17,"NOTE_RESOURCEEND","","",null,null],[17,"NOTE_APPACTIVE","","",null,null],[17,"NOTE_APPBACKGROUND","","",null,null],[17,"NOTE_APPNONUI","","",null,null],[17,"NOTE_APPINACTIVE","","",null,null],[17,"NOTE_APPALLSTATES","","",null,null],[17,"NOTE_PDATAMASK","","",null,null],[17,"NOTE_PCTRLMASK","","",null,null],[17,"NOTE_EXIT_REPARENTED","","",null,null],[17,"NOTE_VM_PRESSURE","","",null,null],[17,"NOTE_VM_PRESSURE_TERMINATE","","",null,null],[17,"NOTE_VM_PRESSURE_SUDDEN_TERMINATE","","",null,null],[17,"NOTE_VM_ERROR","","",null,null],[17,"NOTE_SECONDS","","",null,null],[17,"NOTE_USECONDS","","",null,null],[17,"NOTE_NSECONDS","","",null,null],[17,"NOTE_ABSOLUTE","","",null,null],[17,"NOTE_TRACK","","",null,null],[17,"NOTE_TRACKERR","","",null,null],[17,"NOTE_CHILD","","",null,null],[17,"EV_POLL","","",null,null],[17,"EV_OOBAND","","",null,null],[11,"eq","","",11,null],[11,"fmt","","",11,null],[11,"clone","","",11,null],[11,"hash","","",12,null],[11,"cmp","","",12,null],[11,"partial_cmp","","",12,null],[11,"lt","","",12,null],[11,"le","","",12,null],[11,"gt","","",12,null],[11,"ge","","",12,null],[11,"clone","","",12,null],[11,"eq","","",12,null],[11,"ne","","",12,null],[11,"fmt","","",12,null],[11,"empty","","Returns an empty set of flags.",12,{"inputs":[],"output":{"name":"eventflag"}}],[11,"all","","Returns the set containing all flags.",12,{"inputs":[],"output":{"name":"eventflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",12,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",12,{"inputs":[{"name":"u16"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",12,{"inputs":[{"name":"u16"}],"output":{"name":"eventflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",12,null],[11,"is_all","","Returns `true` if all flags are currently set.",12,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",12,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",12,null],[11,"insert","","Inserts the specified flags in-place.",12,null],[11,"remove","","Removes the specified flags in-place.",12,null],[11,"toggle","","Toggles the specified flags in-place.",12,null],[11,"bitor","","Returns the union of the two sets of flags.",12,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",12,null],[11,"bitand","","Returns the intersection between the two sets of flags.",12,null],[11,"sub","","Returns the set difference of the two sets of flags.",12,null],[11,"not","","Returns the complement of this set of flags.",12,null],[11,"from_iter","","",12,{"inputs":[{"name":"t"}],"output":{"name":"eventflag"}}],[11,"hash","","",13,null],[11,"cmp","","",13,null],[11,"partial_cmp","","",13,null],[11,"lt","","",13,null],[11,"le","","",13,null],[11,"gt","","",13,null],[11,"ge","","",13,null],[11,"clone","","",13,null],[11,"eq","","",13,null],[11,"ne","","",13,null],[11,"fmt","","",13,null],[11,"empty","","Returns an empty set of flags.",13,{"inputs":[],"output":{"name":"filterflag"}}],[11,"all","","Returns the set containing all flags.",13,{"inputs":[],"output":{"name":"filterflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",13,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",13,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",13,{"inputs":[{"name":"u32"}],"output":{"name":"filterflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",13,null],[11,"is_all","","Returns `true` if all flags are currently set.",13,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",13,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",13,null],[11,"insert","","Inserts the specified flags in-place.",13,null],[11,"remove","","Removes the specified flags in-place.",13,null],[11,"toggle","","Toggles the specified flags in-place.",13,null],[11,"bitor","","Returns the union of the two sets of flags.",13,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",13,null],[11,"bitand","","Returns the intersection between the two sets of flags.",13,null],[11,"sub","","Returns the set difference of the two sets of flags.",13,null],[11,"not","","Returns the complement of this set of flags.",13,null],[11,"from_iter","","",13,{"inputs":[{"name":"t"}],"output":{"name":"filterflag"}}],[0,"ioctl","nix::sys","Provide helpers for making ioctl system calls",null,null],[0,"signal","","",null,null],[17,"SIGHUP","nix::sys::signal","",null,null],[17,"SIGINT","","",null,null],[17,"SIGQUIT","","",null,null],[17,"SIGILL","","",null,null],[17,"SIGABRT","","",null,null],[17,"SIGFPE","","",null,null],[17,"SIGKILL","","",null,null],[17,"SIGSEGV","","",null,null],[17,"SIGPIPE","","",null,null],[17,"SIGALRM","","",null,null],[17,"SIGTERM","","",null,null],[17,"SIGTRAP","","",null,null],[17,"SIGIOT","","",null,null],[17,"SIGBUS","","",null,null],[17,"SIGSYS","","",null,null],[17,"SIGURG","","",null,null],[17,"SIGSTOP","","",null,null],[17,"SIGTSTP","","",null,null],[17,"SIGCONT","","",null,null],[17,"SIGCHLD","","",null,null],[17,"SIGTTIN","","",null,null],[17,"SIGTTOU","","",null,null],[17,"SIGIO","","",null,null],[17,"SIGXCPU","","",null,null],[17,"SIGXFSZ","","",null,null],[17,"SIGVTALRM","","",null,null],[17,"SIGPROF","","",null,null],[17,"SIGWINCH","","",null,null],[17,"SIGUSR1","","",null,null],[17,"SIGUSR2","","",null,null],[3,"SaFlag","","",null,null],[3,"SigFlag","","",null,null],[3,"SigSet","","",null,null],[3,"SigAction","","",null,null],[4,"SigHandler","","",null,null],[13,"SigDfl","","",14,null],[13,"SigIgn","","",14,null],[13,"Handler","","",14,null],[13,"SigAction","","",14,null],[5,"sigaction","","",null,{"inputs":[{"name":"signum"},{"name":"sigaction"}],"output":{"name":"result"}}],[5,"pthread_sigmask","","Manages the signal mask (set of blocked signals) for the calling thread.",null,{"inputs":[{"name":"sigflag"},{"name":"option"},{"name":"option"}],"output":{"name":"result"}}],[5,"kill","","",null,{"inputs":[{"name":"pid_t"},{"name":"signum"}],"output":{"name":"result"}}],[5,"raise","","",null,{"inputs":[{"name":"signum"}],"output":{"name":"result"}}],[6,"SigNum","","",null,null],[17,"SIGEMT","","",null,null],[17,"NSIG","","",null,null],[17,"SA_NOCLDSTOP","","",null,null],[17,"SA_NOCLDWAIT","","",null,null],[17,"SA_NODEFER","","",null,null],[17,"SA_ONSTACK","","",null,null],[17,"SA_RESETHAND","","",null,null],[17,"SA_RESTART","","",null,null],[17,"SA_SIGINFO","","",null,null],[17,"SIG_BLOCK","","",null,null],[17,"SIG_UNBLOCK","","",null,null],[17,"SIG_SETMASK","","",null,null],[11,"hash","","",15,null],[11,"cmp","","",15,null],[11,"partial_cmp","","",15,null],[11,"lt","","",15,null],[11,"le","","",15,null],[11,"gt","","",15,null],[11,"ge","","",15,null],[11,"clone","","",15,null],[11,"eq","","",15,null],[11,"ne","","",15,null],[11,"fmt","","",15,null],[11,"empty","","Returns an empty set of flags.",15,{"inputs":[],"output":{"name":"saflag"}}],[11,"all","","Returns the set containing all flags.",15,{"inputs":[],"output":{"name":"saflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",15,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",15,{"inputs":[{"name":"c_int"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",15,{"inputs":[{"name":"c_int"}],"output":{"name":"saflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",15,null],[11,"is_all","","Returns `true` if all flags are currently set.",15,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",15,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",15,null],[11,"insert","","Inserts the specified flags in-place.",15,null],[11,"remove","","Removes the specified flags in-place.",15,null],[11,"toggle","","Toggles the specified flags in-place.",15,null],[11,"bitor","","Returns the union of the two sets of flags.",15,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",15,null],[11,"bitand","","Returns the intersection between the two sets of flags.",15,null],[11,"sub","","Returns the set difference of the two sets of flags.",15,null],[11,"not","","Returns the complement of this set of flags.",15,null],[11,"from_iter","","",15,{"inputs":[{"name":"t"}],"output":{"name":"saflag"}}],[11,"hash","","",16,null],[11,"cmp","","",16,null],[11,"partial_cmp","","",16,null],[11,"lt","","",16,null],[11,"le","","",16,null],[11,"gt","","",16,null],[11,"ge","","",16,null],[11,"clone","","",16,null],[11,"eq","","",16,null],[11,"ne","","",16,null],[11,"fmt","","",16,null],[11,"empty","","Returns an empty set of flags.",16,{"inputs":[],"output":{"name":"sigflag"}}],[11,"all","","Returns the set containing all flags.",16,{"inputs":[],"output":{"name":"sigflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",16,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",16,{"inputs":[{"name":"c_int"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",16,{"inputs":[{"name":"c_int"}],"output":{"name":"sigflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",16,null],[11,"is_all","","Returns `true` if all flags are currently set.",16,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",16,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",16,null],[11,"insert","","Inserts the specified flags in-place.",16,null],[11,"remove","","Removes the specified flags in-place.",16,null],[11,"toggle","","Toggles the specified flags in-place.",16,null],[11,"bitor","","Returns the union of the two sets of flags.",16,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",16,null],[11,"bitand","","Returns the intersection between the two sets of flags.",16,null],[11,"sub","","Returns the set difference of the two sets of flags.",16,null],[11,"not","","Returns the complement of this set of flags.",16,null],[11,"from_iter","","",16,{"inputs":[{"name":"t"}],"output":{"name":"sigflag"}}],[11,"clone","","",17,null],[11,"all","","",17,{"inputs":[],"output":{"name":"sigset"}}],[11,"empty","","",17,{"inputs":[],"output":{"name":"sigset"}}],[11,"add","","",17,null],[11,"remove","","",17,null],[11,"contains","","",17,null],[11,"thread_get_mask","","Gets the currently blocked (masked) set of signals for the calling thread.",17,{"inputs":[],"output":{"name":"result"}}],[11,"thread_set_mask","","Sets the set of signals as the signal mask for the calling thread.",17,null],[11,"thread_block","","Adds the set of signals to the signal mask for the calling thread.",17,null],[11,"thread_unblock","","Removes the set of signals from the signal mask for the calling thread.",17,null],[11,"thread_swap_mask","","Sets the set of signals as the signal mask, and returns the old mask.",17,null],[11,"wait","","Suspends execution of the calling thread until one of the signals in the\nsignal mask becomes pending, and returns the accepted signal.",17,null],[11,"as_ref","","",17,null],[11,"eq","","",14,null],[11,"ne","","",14,null],[11,"clone","","",14,null],[11,"new","","This function will set or unset the flag `SA_SIGINFO` depending on the\ntype of the `handler` argument.",18,{"inputs":[{"name":"sighandler"},{"name":"saflag"},{"name":"sigset"}],"output":{"name":"sigaction"}}],[0,"socket","nix::sys","Socket interface functions",null,null],[3,"in_addr","nix::sys::socket","",null,null],[12,"s_addr","","",19,null],[3,"in6_addr","","",null,null],[12,"s6_addr","","",20,null],[3,"sockaddr","","",null,null],[12,"sa_len","","",21,null],[12,"sa_family","","",21,null],[12,"sa_data","","",21,null],[3,"sockaddr_in","","",null,null],[12,"sin_len","","",22,null],[12,"sin_family","","",22,null],[12,"sin_port","","",22,null],[12,"sin_addr","","",22,null],[12,"sin_zero","","",22,null],[3,"sockaddr_in6","","",null,null],[12,"sin6_len","","",23,null],[12,"sin6_family","","",23,null],[12,"sin6_port","","",23,null],[12,"sin6_flowinfo","","",23,null],[12,"sin6_addr","","",23,null],[12,"sin6_scope_id","","",23,null],[3,"sockaddr_un","","",null,null],[12,"sun_len","","",24,null],[12,"sun_family","","",24,null],[12,"sun_path","","",24,null],[6,"sa_family_t","","",null,null],[3,"sockaddr_storage","","",null,null],[12,"ss_len","","",25,null],[12,"ss_family","","",25,null],[3,"UnixAddr","","A wrapper around sockaddr_un. We track the length of sun_path,\nbecause it may not be null-terminated (unconnected and abstract\nsockets). Note that the actual sockaddr length is greater by\nsize_of::&lt;sa_family_t&gt;().",null,null],[12,"0","","",26,null],[12,"1","","",26,null],[3,"Ipv4Addr","","",null,null],[12,"0","","",27,null],[3,"Ipv6Addr","","",null,null],[12,"0","","",28,null],[3,"ip_mreq","","",null,null],[12,"imr_multiaddr","","",29,null],[12,"imr_interface","","",29,null],[3,"ipv6_mreq","","",null,null],[12,"ipv6mr_multiaddr","","",30,null],[12,"ipv6mr_interface","","",30,null],[3,"MsgFlags","","",null,null],[3,"SockFlag","","",null,null],[3,"CmsgSpace","","A structure used to make room in a cmsghdr passed to recvmsg. The\nsize and alignment match that of a cmsghdr followed by a T, but the\nfields are not accessible, as the actual types will change on a call\nto recvmsg.",null,null],[3,"RecvMsg","","",null,null],[12,"bytes","","",31,null],[12,"address","","",31,null],[12,"flags","","",31,null],[3,"CmsgIterator","","",null,null],[3,"linger","","",null,null],[12,"l_onoff","","",32,null],[12,"l_linger","","",32,null],[3,"ucred","","",null,null],[4,"AddressFamily","","",null,null],[13,"Unix","","",33,null],[13,"Inet","","",33,null],[13,"Inet6","","",33,null],[4,"SockAddr","","Represents a socket address",null,null],[13,"Inet","","",34,null],[13,"Unix","","",34,null],[4,"InetAddr","","",null,null],[13,"V4","","",35,null],[13,"V6","","",35,null],[4,"IpAddr","","",null,null],[13,"V4","","",36,null],[13,"V6","","",36,null],[4,"SockType","","",null,null],[13,"Stream","","",37,null],[13,"Datagram","","",37,null],[13,"SeqPacket","","",37,null],[13,"Raw","","",37,null],[13,"Rdm","","",37,null],[4,"ControlMessage","","A type-safe wrapper around a single control message. More types may\nbe added to this enum; do not exhaustively pattern-match it.\n[Further reading](http://man7.org/linux/man-pages/man3/cmsg.3.html)",null,null],[13,"ScmRights","","A message of type SCM_RIGHTS, containing an array of file\ndescriptors passed between processes. See the description in the\n&quot;Ancillary messages&quot; section of the\n[unix(7) man page](http://man7.org/linux/man-pages/man7/unix.7.html).",38,null],[4,"SockLevel","","The protocol level at which to get / set socket options. Used as an\nargument to `getsockopt` and `setsockopt`.",null,null],[13,"Socket","","",39,null],[13,"Tcp","","",39,null],[13,"Ip","","",39,null],[13,"Ipv6","","",39,null],[13,"Udp","","",39,null],[4,"Shutdown","","",null,null],[13,"Read","","Further receptions will be disallowed.",40,null],[13,"Write","","Further  transmissions will be disallowed.",40,null],[13,"Both","","Further receptions and transmissions will be disallowed.",40,null],[5,"sendmsg","","Send data in scatter-gather vectors to a socket, possibly accompanied\nby ancillary data. Optionally direct the message at the given address,\nas with sendto.",null,null],[5,"recvmsg","","Receive message in scatter-gather vectors from a socket, and\noptionally receive ancillary data into the provided buffer.\nIf no ancillary data is desired, use () as the type parameter.",null,null],[5,"socket","","Create an endpoint for communication",null,{"inputs":[{"name":"addressfamily"},{"name":"socktype"},{"name":"sockflag"},{"name":"c_int"}],"output":{"name":"result"}}],[5,"socketpair","","Create a pair of connected sockets",null,{"inputs":[{"name":"addressfamily"},{"name":"socktype"},{"name":"c_int"},{"name":"sockflag"}],"output":{"name":"result"}}],[5,"listen","","Listen for connections on a socket",null,{"inputs":[{"name":"rawfd"},{"name":"usize"}],"output":{"name":"result"}}],[5,"bind","","Bind a name to a socket",null,{"inputs":[{"name":"rawfd"},{"name":"sockaddr"}],"output":{"name":"result"}}],[5,"accept","","Accept a connection on a socket",null,{"inputs":[{"name":"rawfd"}],"output":{"name":"result"}}],[5,"accept4","","Accept a connection on a socket",null,{"inputs":[{"name":"rawfd"},{"name":"sockflag"}],"output":{"name":"result"}}],[5,"connect","","Initiate a connection on a socket",null,{"inputs":[{"name":"rawfd"},{"name":"sockaddr"}],"output":{"name":"result"}}],[5,"recv","","Receive data from a connection-oriented socket. Returns the number of\nbytes read",null,null],[5,"recvfrom","","Receive data from a connectionless or connection-oriented socket. Returns\nthe number of bytes read and the socket address of the sender.",null,null],[5,"sendto","","",null,null],[5,"send","","Send data to a connection-oriented socket. Returns the number of bytes read",null,null],[5,"getsockopt","","Get the current value for the requested socket option",null,{"inputs":[{"name":"rawfd"},{"name":"o"}],"output":{"name":"result"}}],[5,"setsockopt","","Sets the value for the requested socket option",null,{"inputs":[{"name":"rawfd"},{"name":"o"},{"name":"val"}],"output":{"name":"result"}}],[5,"getpeername","","Get the address of the peer connected to the socket `fd`.",null,{"inputs":[{"name":"rawfd"}],"output":{"name":"result"}}],[5,"getsockname","","Get the current address to which the socket `fd` is bound.",null,{"inputs":[{"name":"rawfd"}],"output":{"name":"result"}}],[5,"sockaddr_storage_to_addr","","",null,{"inputs":[{"name":"sockaddr_storage"},{"name":"usize"}],"output":{"name":"result"}}],[5,"shutdown","","Shut down part of a full-duplex connection.",null,{"inputs":[{"name":"rawfd"},{"name":"shutdown"}],"output":{"name":"result"}}],[11,"hash","","",33,null],[11,"fmt","","",33,null],[11,"eq","","",33,null],[11,"clone","","",33,null],[11,"from_std","","",35,{"inputs":[{"name":"socketaddr"}],"output":{"name":"inetaddr"}}],[11,"new","","",35,{"inputs":[{"name":"ipaddr"},{"name":"u16"}],"output":{"name":"inetaddr"}}],[11,"ip","","Gets the IP address associated with this socket address.",35,null],[11,"port","","Gets the port number associated with this socket address",35,null],[11,"to_std","","",35,null],[11,"to_str","","",35,null],[11,"eq","","",35,null],[11,"hash","","",35,null],[11,"clone","","",35,null],[11,"fmt","","",35,null],[11,"new_v4","","Create a new IpAddr that contains an IPv4 address.",36,{"inputs":[{"name":"u8"},{"name":"u8"},{"name":"u8"},{"name":"u8"}],"output":{"name":"ipaddr"}}],[11,"new_v6","","Create a new IpAddr that contains an IPv6 address.",36,{"inputs":[{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"}],"output":{"name":"ipaddr"}}],[11,"fmt","","",36,null],[11,"new","","",27,{"inputs":[{"name":"u8"},{"name":"u8"},{"name":"u8"},{"name":"u8"}],"output":{"name":"ipv4addr"}}],[11,"from_std","","",27,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"ipv4addr"}}],[11,"any","","",27,{"inputs":[],"output":{"name":"ipv4addr"}}],[11,"octets","","",27,null],[11,"to_std","","",27,null],[11,"eq","","",27,null],[11,"hash","","",27,null],[11,"clone","","",27,null],[11,"fmt","","",27,null],[11,"clone","","",28,null],[11,"new","","",28,{"inputs":[{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"}],"output":{"name":"ipv6addr"}}],[11,"from_std","","",28,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"ipv6addr"}}],[11,"segments","","Return the eight 16-bit segments that make up this address",28,null],[11,"to_std","","",28,null],[11,"fmt","","",28,null],[11,"new","","Create a new sockaddr_un representing a filesystem path.",26,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"new_abstract","","Create a new sockaddr_un representing an address in the\n&quot;abstract namespace&quot;. This is a Linux-specific extension,\nprimarily used to allow chrooted processes to communicate with\nspecific daemons.",26,null],[11,"path","","If this address represents a filesystem path, return that path.",26,null],[11,"eq","","",26,null],[11,"hash","","",26,null],[11,"clone","","",26,null],[11,"fmt","","",26,null],[11,"new_inet","","",34,{"inputs":[{"name":"inetaddr"}],"output":{"name":"sockaddr"}}],[11,"new_unix","","",34,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"family","","",34,null],[11,"to_str","","",34,null],[11,"as_ffi_pair","","",34,null],[11,"eq","","",34,null],[11,"hash","","",34,null],[11,"clone","","",34,null],[11,"fmt","","",34,null],[11,"hash","","",41,null],[11,"cmp","","",41,null],[11,"partial_cmp","","",41,null],[11,"lt","","",41,null],[11,"le","","",41,null],[11,"gt","","",41,null],[11,"ge","","",41,null],[11,"clone","","",41,null],[11,"eq","","",41,null],[11,"ne","","",41,null],[11,"fmt","","",41,null],[11,"empty","","Returns an empty set of flags.",41,{"inputs":[],"output":{"name":"msgflags"}}],[11,"all","","Returns the set containing all flags.",41,{"inputs":[],"output":{"name":"msgflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",41,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",41,{"inputs":[{"name":"c_int"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",41,{"inputs":[{"name":"c_int"}],"output":{"name":"msgflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",41,null],[11,"is_all","","Returns `true` if all flags are currently set.",41,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",41,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",41,null],[11,"insert","","Inserts the specified flags in-place.",41,null],[11,"remove","","Removes the specified flags in-place.",41,null],[11,"toggle","","Toggles the specified flags in-place.",41,null],[11,"bitor","","Returns the union of the two sets of flags.",41,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",41,null],[11,"bitand","","Returns the intersection between the two sets of flags.",41,null],[11,"sub","","Returns the set difference of the two sets of flags.",41,null],[11,"not","","Returns the complement of this set of flags.",41,null],[11,"from_iter","","",41,{"inputs":[{"name":"t"}],"output":{"name":"msgflags"}}],[11,"clone","","",29,null],[11,"fmt","","",29,null],[11,"new","","",29,{"inputs":[{"name":"ipv4addr"},{"name":"option"}],"output":{"name":"ip_mreq"}}],[11,"new","","",30,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"ipv6_mreq"}}],[0,"sockopt","","",null,null],[3,"ReuseAddr","nix::sys::socket::sockopt","",null,null],[3,"ReusePort","","",null,null],[3,"TcpNoDelay","","",null,null],[3,"Linger","","",null,null],[3,"IpAddMembership","","",null,null],[3,"IpDropMembership","","",null,null],[3,"Ipv6AddMembership","","",null,null],[3,"Ipv6DropMembership","","",null,null],[3,"IpMulticastTtl","","",null,null],[3,"IpMulticastLoop","","",null,null],[3,"ReceiveTimeout","","",null,null],[3,"SendTimeout","","",null,null],[3,"Broadcast","","",null,null],[3,"OobInline","","",null,null],[3,"SocketError","","",null,null],[3,"KeepAlive","","",null,null],[3,"TcpKeepAlive","","",null,null],[3,"RcvBuf","","",null,null],[3,"SndBuf","","",null,null],[3,"SockType","","",null,null],[11,"fmt","","",42,null],[11,"clone","","",42,null],[11,"set","","",42,null],[11,"get","","",42,null],[11,"fmt","","",43,null],[11,"clone","","",43,null],[11,"set","","",43,null],[11,"get","","",43,null],[11,"fmt","","",44,null],[11,"clone","","",44,null],[11,"set","","",44,null],[11,"get","","",44,null],[11,"fmt","","",45,null],[11,"clone","","",45,null],[11,"set","","",45,null],[11,"get","","",45,null],[11,"fmt","","",46,null],[11,"clone","","",46,null],[11,"set","","",46,null],[11,"fmt","","",47,null],[11,"clone","","",47,null],[11,"set","","",47,null],[11,"fmt","","",48,null],[11,"clone","","",48,null],[11,"set","","",48,null],[11,"fmt","","",49,null],[11,"clone","","",49,null],[11,"set","","",49,null],[11,"fmt","","",50,null],[11,"clone","","",50,null],[11,"set","","",50,null],[11,"get","","",50,null],[11,"fmt","","",51,null],[11,"clone","","",51,null],[11,"set","","",51,null],[11,"get","","",51,null],[11,"fmt","","",52,null],[11,"clone","","",52,null],[11,"set","","",52,null],[11,"get","","",52,null],[11,"fmt","","",53,null],[11,"clone","","",53,null],[11,"set","","",53,null],[11,"get","","",53,null],[11,"fmt","","",54,null],[11,"clone","","",54,null],[11,"set","","",54,null],[11,"get","","",54,null],[11,"fmt","","",55,null],[11,"clone","","",55,null],[11,"set","","",55,null],[11,"get","","",55,null],[11,"fmt","","",56,null],[11,"clone","","",56,null],[11,"get","","",56,null],[11,"fmt","","",57,null],[11,"clone","","",57,null],[11,"set","","",57,null],[11,"get","","",57,null],[11,"fmt","","",58,null],[11,"clone","","",58,null],[11,"set","","",58,null],[11,"get","","",58,null],[11,"fmt","","",59,null],[11,"clone","","",59,null],[11,"set","","",59,null],[11,"get","","",59,null],[11,"fmt","","",60,null],[11,"clone","","",60,null],[11,"set","","",60,null],[11,"get","","",60,null],[11,"fmt","","",61,null],[11,"clone","","",61,null],[11,"get","","",61,null],[6,"IpMulticastTtl","nix::sys::socket","",null,null],[6,"InAddrT","","",null,null],[17,"AF_UNIX","","",null,null],[17,"AF_LOCAL","","",null,null],[17,"AF_INET","","",null,null],[17,"AF_INET6","","",null,null],[17,"SOCK_STREAM","","",null,null],[17,"SOCK_DGRAM","","",null,null],[17,"SOCK_SEQPACKET","","",null,null],[17,"SOCK_RAW","","",null,null],[17,"SOCK_RDM","","",null,null],[17,"SOL_SOCKET","","",null,null],[17,"IPPROTO_IP","","",null,null],[17,"IPPROTO_IPV6","","",null,null],[17,"IPPROTO_TCP","","",null,null],[17,"IPPROTO_UDP","","",null,null],[17,"SO_ACCEPTCONN","","",null,null],[17,"SO_BROADCAST","","",null,null],[17,"SO_DEBUG","","",null,null],[17,"SO_DONTTRUNC","","",null,null],[17,"SO_ERROR","","",null,null],[17,"SO_DONTROUTE","","",null,null],[17,"SO_KEEPALIVE","","",null,null],[17,"SO_LABEL","","",null,null],[17,"SO_LINGER","","",null,null],[17,"SO_NREAD","","",null,null],[17,"SO_NKE","","",null,null],[17,"SO_NOSIGPIPE","","",null,null],[17,"SO_NOADDRERR","","",null,null],[17,"SO_NOTIFYCONFLICT","","",null,null],[17,"SO_NP_EXTENSIONS","","",null,null],[17,"SO_NWRITE","","",null,null],[17,"SO_OOBINLINE","","",null,null],[17,"SO_PEERLABEL","","",null,null],[17,"SO_RCVBUF","","",null,null],[17,"SO_RCVLOWAT","","",null,null],[17,"SO_SNDLOWAT","","",null,null],[17,"SO_RCVTIMEO","","",null,null],[17,"SO_SNDTIMEO","","",null,null],[17,"SO_RANDOMPORT","","",null,null],[17,"SO_RESTRICTIONS","","",null,null],[17,"SO_RESTRICT_DENYIN","","",null,null],[17,"SO_RESTRICT_DENYOUT","","",null,null],[17,"SO_REUSEADDR","","",null,null],[17,"SO_REUSEPORT","","",null,null],[17,"SO_REUSESHAREUID","","",null,null],[17,"SO_SNDBUF","","",null,null],[17,"SO_TIMESTAMP","","",null,null],[17,"SO_TIMESTAMP_MONOTONIC","","",null,null],[17,"SO_TYPE","","",null,null],[17,"SO_WANTMORE","","",null,null],[17,"SO_WANTOOBFLAG","","",null,null],[17,"SO_RESTRICT_DENYSET","","",null,null],[17,"TCP_NODELAY","","",null,null],[17,"TCP_MAXSEG","","",null,null],[17,"TCP_KEEPALIVE","","",null,null],[17,"IP_MULTICAST_IF","","",null,null],[17,"IP_MULTICAST_TTL","","",null,null],[17,"IP_MULTICAST_LOOP","","",null,null],[17,"IP_ADD_MEMBERSHIP","","",null,null],[17,"IP_DROP_MEMBERSHIP","","",null,null],[17,"IPV6_JOIN_GROUP","","",null,null],[17,"IPV6_LEAVE_GROUP","","",null,null],[17,"INADDR_ANY","","",null,null],[17,"INADDR_NONE","","",null,null],[17,"INADDR_BROADCAST","","",null,null],[17,"MSG_OOB","","",null,null],[17,"MSG_PEEK","","",null,null],[17,"MSG_EOR","","",null,null],[17,"MSG_TRUNC","","",null,null],[17,"MSG_CTRUNC","","",null,null],[17,"MSG_DONTWAIT","","",null,null],[17,"SHUT_RD","","",null,null],[17,"SHUT_WR","","",null,null],[17,"SHUT_RDWR","","",null,null],[17,"SCM_RIGHTS","","",null,null],[17,"SOCK_NONBLOCK","","",null,null],[17,"SOCK_CLOEXEC","","",null,null],[8,"GetSockOpt","","Represents a socket option that can be accessed or set. Used as an argument\nto `getsockopt`",null,null],[16,"Val","","",62,null],[8,"SetSockOpt","","Represents a socket option that can be accessed or set. Used as an argument\nto `setsockopt`",null,null],[16,"Val","","",63,null],[11,"fmt","","",37,null],[11,"eq","","",37,null],[11,"clone","","",37,null],[11,"hash","","",64,null],[11,"cmp","","",64,null],[11,"partial_cmp","","",64,null],[11,"lt","","",64,null],[11,"le","","",64,null],[11,"gt","","",64,null],[11,"ge","","",64,null],[11,"clone","","",64,null],[11,"eq","","",64,null],[11,"ne","","",64,null],[11,"fmt","","",64,null],[11,"empty","","Returns an empty set of flags.",64,{"inputs":[],"output":{"name":"sockflag"}}],[11,"all","","Returns the set containing all flags.",64,{"inputs":[],"output":{"name":"sockflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",64,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",64,{"inputs":[{"name":"c_int"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",64,{"inputs":[{"name":"c_int"}],"output":{"name":"sockflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",64,null],[11,"is_all","","Returns `true` if all flags are currently set.",64,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",64,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",64,null],[11,"insert","","Inserts the specified flags in-place.",64,null],[11,"remove","","Removes the specified flags in-place.",64,null],[11,"toggle","","Toggles the specified flags in-place.",64,null],[11,"bitor","","Returns the union of the two sets of flags.",64,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",64,null],[11,"bitand","","Returns the intersection between the two sets of flags.",64,null],[11,"sub","","Returns the set difference of the two sets of flags.",64,null],[11,"not","","Returns the complement of this set of flags.",64,null],[11,"from_iter","","",64,{"inputs":[{"name":"t"}],"output":{"name":"sockflag"}}],[11,"new","","Create a CmsgSpace&lt;T&gt;. The structure is used only for space, so\nthe fields are uninitialized.",65,{"inputs":[],"output":{"name":"self"}}],[11,"cmsgs","","Iterate over the valid control messages pointed to by this\nmsghdr.",31,null],[11,"next","","",66,null],[11,"fmt","","",32,null],[11,"clone","","",32,null],[11,"fmt","","",67,null],[11,"eq","","",67,null],[11,"ne","","",67,null],[11,"clone","","",67,null],[11,"fmt","","",40,null],[11,"eq","","",40,null],[11,"clone","","",40,null],[0,"stat","nix::sys","",null,null],[6,"dev_t","nix::sys::stat","",null,null],[3,"FileStat","","",null,null],[12,"st_dev","","",68,null],[12,"st_mode","","",68,null],[12,"st_nlink","","",68,null],[12,"st_ino","","",68,null],[12,"st_uid","","",68,null],[12,"st_gid","","",68,null],[12,"st_rdev","","",68,null],[12,"st_atime","","",68,null],[12,"st_atime_nsec","","",68,null],[12,"st_mtime","","",68,null],[12,"st_mtime_nsec","","",68,null],[12,"st_ctime","","",68,null],[12,"st_ctime_nsec","","",68,null],[12,"st_birthtime","","",68,null],[12,"st_birthtime_nsec","","",68,null],[12,"st_size","","",68,null],[12,"st_blocks","","",68,null],[12,"st_blksize","","",68,null],[12,"st_flags","","",68,null],[12,"st_gen","","",68,null],[12,"st_lspare","","",68,null],[12,"st_qspare","","",68,null],[3,"SFlag","","",null,null],[3,"Mode","","",null,null],[5,"mknod","","",null,{"inputs":[{"name":"p"},{"name":"sflag"},{"name":"mode"},{"name":"dev_t"}],"output":{"name":"result"}}],[5,"umask","","",null,{"inputs":[{"name":"mode"}],"output":{"name":"mode"}}],[5,"stat","","",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"lstat","","",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"fstat","","",null,{"inputs":[{"name":"rawfd"}],"output":{"name":"result"}}],[17,"S_IFREG","","",null,null],[17,"S_IFCHR","","",null,null],[17,"S_IFBLK","","",null,null],[17,"S_IFIFO","","",null,null],[17,"S_IFSOCK","","",null,null],[17,"S_IRWXU","","",null,null],[17,"S_IRUSR","","",null,null],[17,"S_IWUSR","","",null,null],[17,"S_IXUSR","","",null,null],[17,"S_IRWXG","","",null,null],[17,"S_IRGRP","","",null,null],[17,"S_IWGRP","","",null,null],[17,"S_IXGRP","","",null,null],[17,"S_IRWXO","","",null,null],[17,"S_IROTH","","",null,null],[17,"S_IWOTH","","",null,null],[17,"S_IXOTH","","",null,null],[17,"S_ISUID","","",null,null],[17,"S_ISGID","","",null,null],[17,"S_ISVTX","","",null,null],[11,"hash","","",69,null],[11,"cmp","","",69,null],[11,"partial_cmp","","",69,null],[11,"lt","","",69,null],[11,"le","","",69,null],[11,"gt","","",69,null],[11,"ge","","",69,null],[11,"clone","","",69,null],[11,"eq","","",69,null],[11,"ne","","",69,null],[11,"fmt","","",69,null],[11,"empty","","Returns an empty set of flags.",69,{"inputs":[],"output":{"name":"sflag"}}],[11,"all","","Returns the set containing all flags.",69,{"inputs":[],"output":{"name":"sflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",69,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",69,{"inputs":[{"name":"mode_t"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",69,{"inputs":[{"name":"mode_t"}],"output":{"name":"sflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",69,null],[11,"is_all","","Returns `true` if all flags are currently set.",69,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",69,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",69,null],[11,"insert","","Inserts the specified flags in-place.",69,null],[11,"remove","","Removes the specified flags in-place.",69,null],[11,"toggle","","Toggles the specified flags in-place.",69,null],[11,"bitor","","Returns the union of the two sets of flags.",69,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",69,null],[11,"bitand","","Returns the intersection between the two sets of flags.",69,null],[11,"sub","","Returns the set difference of the two sets of flags.",69,null],[11,"not","","Returns the complement of this set of flags.",69,null],[11,"from_iter","","",69,{"inputs":[{"name":"t"}],"output":{"name":"sflag"}}],[11,"hash","","",70,null],[11,"cmp","","",70,null],[11,"partial_cmp","","",70,null],[11,"lt","","",70,null],[11,"le","","",70,null],[11,"gt","","",70,null],[11,"ge","","",70,null],[11,"clone","","",70,null],[11,"eq","","",70,null],[11,"ne","","",70,null],[11,"fmt","","",70,null],[11,"empty","","Returns an empty set of flags.",70,{"inputs":[],"output":{"name":"mode"}}],[11,"all","","Returns the set containing all flags.",70,{"inputs":[],"output":{"name":"mode"}}],[11,"bits","","Returns the raw value of the flags currently stored.",70,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",70,{"inputs":[{"name":"mode_t"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",70,{"inputs":[{"name":"mode_t"}],"output":{"name":"mode"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",70,null],[11,"is_all","","Returns `true` if all flags are currently set.",70,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",70,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",70,null],[11,"insert","","Inserts the specified flags in-place.",70,null],[11,"remove","","Removes the specified flags in-place.",70,null],[11,"toggle","","Toggles the specified flags in-place.",70,null],[11,"bitor","","Returns the union of the two sets of flags.",70,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",70,null],[11,"bitand","","Returns the intersection between the two sets of flags.",70,null],[11,"sub","","Returns the set difference of the two sets of flags.",70,null],[11,"not","","Returns the complement of this set of flags.",70,null],[11,"from_iter","","",70,{"inputs":[{"name":"t"}],"output":{"name":"mode"}}],[0,"termios","nix::sys","",null,null],[3,"Termios","nix::sys::termios","",null,null],[12,"c_iflag","","",71,null],[12,"c_oflag","","",71,null],[12,"c_cflag","","",71,null],[12,"c_lflag","","",71,null],[12,"c_cc","","",71,null],[12,"c_ispeed","","",71,null],[12,"c_ospeed","","",71,null],[3,"InputFlags","","",null,null],[3,"OutputFlags","","",null,null],[3,"ControlFlags","","",null,null],[3,"LocalFlags","","",null,null],[4,"SetArg","","",null,null],[13,"TCSANOW","","",72,null],[13,"TCSADRAIN","","",72,null],[13,"TCSAFLUSH","","",72,null],[13,"TCSASOFT","","",72,null],[4,"FlushArg","","",null,null],[13,"TCIFLUSH","","",73,null],[13,"TCOFLUSH","","",73,null],[13,"TCIOFLUSH","","",73,null],[4,"FlowArg","","",null,null],[13,"TCOOFF","","",74,null],[13,"TCOON","","",74,null],[13,"TCIOFF","","",74,null],[13,"TCION","","",74,null],[5,"cfgetispeed","","",null,{"inputs":[{"name":"termios"}],"output":{"name":"speed_t"}}],[5,"cfgetospeed","","",null,{"inputs":[{"name":"termios"}],"output":{"name":"speed_t"}}],[5,"cfsetispeed","","",null,{"inputs":[{"name":"termios"},{"name":"speed_t"}],"output":{"name":"result"}}],[5,"cfsetospeed","","",null,{"inputs":[{"name":"termios"},{"name":"speed_t"}],"output":{"name":"result"}}],[5,"tcgetattr","","",null,{"inputs":[{"name":"rawfd"}],"output":{"name":"result"}}],[5,"tcsetattr","","",null,{"inputs":[{"name":"rawfd"},{"name":"setarg"},{"name":"termios"}],"output":{"name":"result"}}],[5,"tcdrain","","",null,{"inputs":[{"name":"rawfd"}],"output":{"name":"result"}}],[5,"tcflow","","",null,{"inputs":[{"name":"rawfd"},{"name":"flowarg"}],"output":{"name":"result"}}],[5,"tcflush","","",null,{"inputs":[{"name":"rawfd"},{"name":"flusharg"}],"output":{"name":"result"}}],[5,"tcsendbreak","","",null,{"inputs":[{"name":"rawfd"},{"name":"c_int"}],"output":{"name":"result"}}],[11,"clone","","",71,null],[11,"hash","","",75,null],[11,"cmp","","",75,null],[11,"partial_cmp","","",75,null],[11,"lt","","",75,null],[11,"le","","",75,null],[11,"gt","","",75,null],[11,"ge","","",75,null],[11,"clone","","",75,null],[11,"eq","","",75,null],[11,"ne","","",75,null],[11,"fmt","","",75,null],[11,"empty","","Returns an empty set of flags.",75,{"inputs":[],"output":{"name":"inputflags"}}],[11,"all","","Returns the set containing all flags.",75,{"inputs":[],"output":{"name":"inputflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",75,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",75,{"inputs":[{"name":"tcflag_t"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",75,{"inputs":[{"name":"tcflag_t"}],"output":{"name":"inputflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",75,null],[11,"is_all","","Returns `true` if all flags are currently set.",75,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",75,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",75,null],[11,"insert","","Inserts the specified flags in-place.",75,null],[11,"remove","","Removes the specified flags in-place.",75,null],[11,"toggle","","Toggles the specified flags in-place.",75,null],[11,"bitor","","Returns the union of the two sets of flags.",75,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",75,null],[11,"bitand","","Returns the intersection between the two sets of flags.",75,null],[11,"sub","","Returns the set difference of the two sets of flags.",75,null],[11,"not","","Returns the complement of this set of flags.",75,null],[11,"from_iter","","",75,{"inputs":[{"name":"t"}],"output":{"name":"inputflags"}}],[11,"hash","","",76,null],[11,"cmp","","",76,null],[11,"partial_cmp","","",76,null],[11,"lt","","",76,null],[11,"le","","",76,null],[11,"gt","","",76,null],[11,"ge","","",76,null],[11,"clone","","",76,null],[11,"eq","","",76,null],[11,"ne","","",76,null],[11,"fmt","","",76,null],[11,"empty","","Returns an empty set of flags.",76,{"inputs":[],"output":{"name":"outputflags"}}],[11,"all","","Returns the set containing all flags.",76,{"inputs":[],"output":{"name":"outputflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",76,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",76,{"inputs":[{"name":"tcflag_t"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",76,{"inputs":[{"name":"tcflag_t"}],"output":{"name":"outputflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",76,null],[11,"is_all","","Returns `true` if all flags are currently set.",76,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",76,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",76,null],[11,"insert","","Inserts the specified flags in-place.",76,null],[11,"remove","","Removes the specified flags in-place.",76,null],[11,"toggle","","Toggles the specified flags in-place.",76,null],[11,"bitor","","Returns the union of the two sets of flags.",76,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",76,null],[11,"bitand","","Returns the intersection between the two sets of flags.",76,null],[11,"sub","","Returns the set difference of the two sets of flags.",76,null],[11,"not","","Returns the complement of this set of flags.",76,null],[11,"from_iter","","",76,{"inputs":[{"name":"t"}],"output":{"name":"outputflags"}}],[11,"hash","","",77,null],[11,"cmp","","",77,null],[11,"partial_cmp","","",77,null],[11,"lt","","",77,null],[11,"le","","",77,null],[11,"gt","","",77,null],[11,"ge","","",77,null],[11,"clone","","",77,null],[11,"eq","","",77,null],[11,"ne","","",77,null],[11,"fmt","","",77,null],[11,"empty","","Returns an empty set of flags.",77,{"inputs":[],"output":{"name":"controlflags"}}],[11,"all","","Returns the set containing all flags.",77,{"inputs":[],"output":{"name":"controlflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",77,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",77,{"inputs":[{"name":"tcflag_t"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",77,{"inputs":[{"name":"tcflag_t"}],"output":{"name":"controlflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",77,null],[11,"is_all","","Returns `true` if all flags are currently set.",77,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",77,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",77,null],[11,"insert","","Inserts the specified flags in-place.",77,null],[11,"remove","","Removes the specified flags in-place.",77,null],[11,"toggle","","Toggles the specified flags in-place.",77,null],[11,"bitor","","Returns the union of the two sets of flags.",77,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",77,null],[11,"bitand","","Returns the intersection between the two sets of flags.",77,null],[11,"sub","","Returns the set difference of the two sets of flags.",77,null],[11,"not","","Returns the complement of this set of flags.",77,null],[11,"from_iter","","",77,{"inputs":[{"name":"t"}],"output":{"name":"controlflags"}}],[11,"hash","","",78,null],[11,"cmp","","",78,null],[11,"partial_cmp","","",78,null],[11,"lt","","",78,null],[11,"le","","",78,null],[11,"gt","","",78,null],[11,"ge","","",78,null],[11,"clone","","",78,null],[11,"eq","","",78,null],[11,"ne","","",78,null],[11,"fmt","","",78,null],[11,"empty","","Returns an empty set of flags.",78,{"inputs":[],"output":{"name":"localflags"}}],[11,"all","","Returns the set containing all flags.",78,{"inputs":[],"output":{"name":"localflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",78,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",78,{"inputs":[{"name":"tcflag_t"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",78,{"inputs":[{"name":"tcflag_t"}],"output":{"name":"localflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",78,null],[11,"is_all","","Returns `true` if all flags are currently set.",78,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",78,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",78,null],[11,"insert","","Inserts the specified flags in-place.",78,null],[11,"remove","","Removes the specified flags in-place.",78,null],[11,"toggle","","Toggles the specified flags in-place.",78,null],[11,"bitor","","Returns the union of the two sets of flags.",78,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",78,null],[11,"bitand","","Returns the intersection between the two sets of flags.",78,null],[11,"sub","","Returns the set difference of the two sets of flags.",78,null],[11,"not","","Returns the complement of this set of flags.",78,null],[11,"from_iter","","",78,{"inputs":[{"name":"t"}],"output":{"name":"localflags"}}],[11,"clone","","",72,null],[11,"clone","","",73,null],[11,"clone","","",74,null],[6,"tcflag_t","","",null,null],[6,"cc_t","","",null,null],[6,"speed_t","","",null,null],[17,"VEOF","","",null,null],[17,"VEOL","","",null,null],[17,"VEOL2","","",null,null],[17,"VERASE","","",null,null],[17,"VWERASE","","",null,null],[17,"VKILL","","",null,null],[17,"VREPRINT","","",null,null],[17,"VINTR","","",null,null],[17,"VQUIT","","",null,null],[17,"VSUSP","","",null,null],[17,"VDSUSP","","",null,null],[17,"VSTART","","",null,null],[17,"VSTOP","","",null,null],[17,"VLNEXT","","",null,null],[17,"VDISCARD","","",null,null],[17,"VMIN","","",null,null],[17,"VTIME","","",null,null],[17,"VSTATUS","","",null,null],[17,"NCCS","","",null,null],[17,"IGNBRK","","",null,null],[17,"BRKINT","","",null,null],[17,"IGNPAR","","",null,null],[17,"PARMRK","","",null,null],[17,"INPCK","","",null,null],[17,"ISTRIP","","",null,null],[17,"INLCR","","",null,null],[17,"IGNCR","","",null,null],[17,"ICRNL","","",null,null],[17,"IXON","","",null,null],[17,"IXOFF","","",null,null],[17,"IXANY","","",null,null],[17,"IMAXBEL","","",null,null],[17,"IUTF8","","",null,null],[17,"OPOST","","",null,null],[17,"ONLCR","","",null,null],[17,"OXTABS","","",null,null],[17,"ONOEOT","","",null,null],[17,"CIGNORE","","",null,null],[17,"CSIZE","","",null,null],[17,"CS5","","",null,null],[17,"CS6","","",null,null],[17,"CS7","","",null,null],[17,"CS8","","",null,null],[17,"CSTOPB","","",null,null],[17,"CREAD","","",null,null],[17,"PARENB","","",null,null],[17,"PARODD","","",null,null],[17,"HUPCL","","",null,null],[17,"CLOCAL","","",null,null],[17,"CCTS_OFLOW","","",null,null],[17,"CRTSCTS","","",null,null],[17,"CRTS_IFLOW","","",null,null],[17,"CDTR_IFLOW","","",null,null],[17,"CDSR_OFLOW","","",null,null],[17,"CCAR_OFLOW","","",null,null],[17,"MDMBUF","","",null,null],[17,"ECHOKE","","",null,null],[17,"ECHOE","","",null,null],[17,"ECHOK","","",null,null],[17,"ECHO","","",null,null],[17,"ECHONL","","",null,null],[17,"ECHOPRT","","",null,null],[17,"ECHOCTL","","",null,null],[17,"ISIG","","",null,null],[17,"ICANON","","",null,null],[17,"ALTWERASE","","",null,null],[17,"IEXTEN","","",null,null],[17,"EXTPROC","","",null,null],[17,"TOSTOP","","",null,null],[17,"FLUSHO","","",null,null],[17,"NOKERNINFO","","",null,null],[17,"PENDIN","","",null,null],[17,"NOFLSH","","",null,null],[17,"NL0","","",null,null],[17,"NL1","","",null,null],[17,"NL2","","",null,null],[17,"NL3","","",null,null],[17,"TAB0","","",null,null],[17,"TAB1","","",null,null],[17,"TAB2","","",null,null],[17,"TAB3","","",null,null],[17,"CR0","","",null,null],[17,"CR1","","",null,null],[17,"CR2","","",null,null],[17,"CR3","","",null,null],[17,"FF0","","",null,null],[17,"FF1","","",null,null],[17,"BS0","","",null,null],[17,"BS1","","",null,null],[17,"VT0","","",null,null],[17,"VT1","","",null,null],[0,"wait","nix::sys","",null,null],[3,"WaitPidFlag","nix::sys::wait","",null,null],[4,"WaitStatus","","",null,null],[13,"Exited","","",79,null],[13,"Signaled","","",79,null],[13,"Stopped","","",79,null],[13,"Continued","","",79,null],[13,"StillAlive","","",79,null],[5,"waitpid","","",null,{"inputs":[{"name":"pid_t"},{"name":"option"}],"output":{"name":"result"}}],[5,"wait","","",null,{"inputs":[],"output":{"name":"result"}}],[17,"WNOHANG","","",null,null],[11,"hash","","",80,null],[11,"cmp","","",80,null],[11,"partial_cmp","","",80,null],[11,"lt","","",80,null],[11,"le","","",80,null],[11,"gt","","",80,null],[11,"ge","","",80,null],[11,"clone","","",80,null],[11,"eq","","",80,null],[11,"ne","","",80,null],[11,"fmt","","",80,null],[11,"empty","","Returns an empty set of flags.",80,{"inputs":[],"output":{"name":"waitpidflag"}}],[11,"all","","Returns the set containing all flags.",80,{"inputs":[],"output":{"name":"waitpidflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",80,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",80,{"inputs":[{"name":"c_int"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",80,{"inputs":[{"name":"c_int"}],"output":{"name":"waitpidflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",80,null],[11,"is_all","","Returns `true` if all flags are currently set.",80,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",80,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",80,null],[11,"insert","","Inserts the specified flags in-place.",80,null],[11,"remove","","Removes the specified flags in-place.",80,null],[11,"toggle","","Toggles the specified flags in-place.",80,null],[11,"bitor","","Returns the union of the two sets of flags.",80,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",80,null],[11,"bitand","","Returns the intersection between the two sets of flags.",80,null],[11,"sub","","Returns the set difference of the two sets of flags.",80,null],[11,"not","","Returns the complement of this set of flags.",80,null],[11,"from_iter","","",80,{"inputs":[{"name":"t"}],"output":{"name":"waitpidflag"}}],[11,"fmt","","",79,null],[11,"clone","","",79,null],[11,"eq","","",79,null],[11,"ne","","",79,null],[0,"mman","nix::sys","",null,null],[3,"MapFlags","nix::sys::mman","",null,null],[3,"MsFlags","","",null,null],[3,"ProtFlags","","",null,null],[5,"mlock","","",null,null],[5,"munlock","","",null,null],[5,"mmap","","Calls to mmap are inherently unsafe, so they must be made in an unsafe block. Typically\na higher-level abstraction will hide the unsafe interactions with the mmap&#39;d region.",null,null],[5,"munmap","","",null,null],[5,"madvise","","",null,null],[5,"msync","","",null,null],[5,"shm_open","","",null,{"inputs":[{"name":"p"},{"name":"oflag"},{"name":"mode"}],"output":{"name":"result"}}],[5,"shm_unlink","","",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"hash","","",81,null],[11,"cmp","","",81,null],[11,"partial_cmp","","",81,null],[11,"lt","","",81,null],[11,"le","","",81,null],[11,"gt","","",81,null],[11,"ge","","",81,null],[11,"clone","","",81,null],[11,"eq","","",81,null],[11,"ne","","",81,null],[11,"fmt","","",81,null],[11,"empty","","Returns an empty set of flags.",81,{"inputs":[],"output":{"name":"mapflags"}}],[11,"all","","Returns the set containing all flags.",81,{"inputs":[],"output":{"name":"mapflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",81,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",81,{"inputs":[{"name":"c_int"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",81,{"inputs":[{"name":"c_int"}],"output":{"name":"mapflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",81,null],[11,"is_all","","Returns `true` if all flags are currently set.",81,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",81,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",81,null],[11,"insert","","Inserts the specified flags in-place.",81,null],[11,"remove","","Removes the specified flags in-place.",81,null],[11,"toggle","","Toggles the specified flags in-place.",81,null],[11,"bitor","","Returns the union of the two sets of flags.",81,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",81,null],[11,"bitand","","Returns the intersection between the two sets of flags.",81,null],[11,"sub","","Returns the set difference of the two sets of flags.",81,null],[11,"not","","Returns the complement of this set of flags.",81,null],[11,"from_iter","","",81,{"inputs":[{"name":"t"}],"output":{"name":"mapflags"}}],[11,"hash","","",82,null],[11,"cmp","","",82,null],[11,"partial_cmp","","",82,null],[11,"lt","","",82,null],[11,"le","","",82,null],[11,"gt","","",82,null],[11,"ge","","",82,null],[11,"clone","","",82,null],[11,"eq","","",82,null],[11,"ne","","",82,null],[11,"fmt","","",82,null],[11,"empty","","Returns an empty set of flags.",82,{"inputs":[],"output":{"name":"msflags"}}],[11,"all","","Returns the set containing all flags.",82,{"inputs":[],"output":{"name":"msflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",82,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",82,{"inputs":[{"name":"c_int"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",82,{"inputs":[{"name":"c_int"}],"output":{"name":"msflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",82,null],[11,"is_all","","Returns `true` if all flags are currently set.",82,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",82,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",82,null],[11,"insert","","Inserts the specified flags in-place.",82,null],[11,"remove","","Removes the specified flags in-place.",82,null],[11,"toggle","","Toggles the specified flags in-place.",82,null],[11,"bitor","","Returns the union of the two sets of flags.",82,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",82,null],[11,"bitand","","Returns the intersection between the two sets of flags.",82,null],[11,"sub","","Returns the set difference of the two sets of flags.",82,null],[11,"not","","Returns the complement of this set of flags.",82,null],[11,"from_iter","","",82,{"inputs":[{"name":"t"}],"output":{"name":"msflags"}}],[6,"MmapAdvise","","",null,null],[17,"MAP_FILE","","",null,null],[17,"MAP_SHARED","","",null,null],[17,"MAP_PRIVATE","","",null,null],[17,"MAP_FIXED","","",null,null],[17,"MAP_ANON","","",null,null],[17,"MAP_NOCACHE","","",null,null],[17,"MAP_JIT","","",null,null],[17,"MADV_NORMAL","","",null,null],[17,"MADV_RANDOM","","",null,null],[17,"MADV_SEQUENTIAL","","",null,null],[17,"MADV_WILLNEED","","",null,null],[17,"MADV_DONTNEED","","",null,null],[17,"MADV_FREE","","",null,null],[17,"MADV_ZERO_WIRED_PAGES","","",null,null],[17,"MADV_FREE_REUSABLE","","",null,null],[17,"MADV_FREE_REUSE","","",null,null],[17,"MADV_CAN_REUSE","","",null,null],[17,"MS_ASYNC","","",null,null],[17,"MS_INVALIDATE","","",null,null],[17,"MS_KILLPAGES","","",null,null],[17,"MS_DEACTIVATE","","",null,null],[17,"MS_SYNC","","",null,null],[17,"MAP_FAILED","","",null,null],[17,"PROT_NONE","","",null,null],[17,"PROT_READ","","",null,null],[17,"PROT_WRITE","","",null,null],[17,"PROT_EXEC","","",null,null],[11,"hash","","",83,null],[11,"cmp","","",83,null],[11,"partial_cmp","","",83,null],[11,"lt","","",83,null],[11,"le","","",83,null],[11,"gt","","",83,null],[11,"ge","","",83,null],[11,"clone","","",83,null],[11,"eq","","",83,null],[11,"ne","","",83,null],[11,"fmt","","",83,null],[11,"empty","","Returns an empty set of flags.",83,{"inputs":[],"output":{"name":"protflags"}}],[11,"all","","Returns the set containing all flags.",83,{"inputs":[],"output":{"name":"protflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",83,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",83,{"inputs":[{"name":"c_int"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",83,{"inputs":[{"name":"c_int"}],"output":{"name":"protflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",83,null],[11,"is_all","","Returns `true` if all flags are currently set.",83,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",83,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",83,null],[11,"insert","","Inserts the specified flags in-place.",83,null],[11,"remove","","Removes the specified flags in-place.",83,null],[11,"toggle","","Toggles the specified flags in-place.",83,null],[11,"bitor","","Returns the union of the two sets of flags.",83,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",83,null],[11,"bitand","","Returns the intersection between the two sets of flags.",83,null],[11,"sub","","Returns the set difference of the two sets of flags.",83,null],[11,"not","","Returns the complement of this set of flags.",83,null],[11,"from_iter","","",83,{"inputs":[{"name":"t"}],"output":{"name":"protflags"}}],[0,"uio","nix::sys","",null,null],[3,"IoVec","nix::sys::uio","",null,null],[5,"writev","","",null,null],[5,"readv","","",null,null],[5,"pwrite","","",null,null],[5,"pread","","",null,null],[11,"as_slice","","",84,null],[11,"from_slice","","",84,null],[11,"from_mut_slice","","",84,null],[0,"time","nix::sys","",null,null],[3,"TimeVal","nix::sys::time","",null,null],[12,"tv_sec","","",85,null],[12,"tv_usec","","",85,null],[11,"fmt","","",85,null],[11,"cmp","","",85,null],[11,"partial_cmp","","",85,null],[11,"lt","","",85,null],[11,"le","","",85,null],[11,"gt","","",85,null],[11,"ge","","",85,null],[11,"eq","","",85,null],[11,"ne","","",85,null],[11,"clone","","",85,null],[11,"zero","","",85,{"inputs":[],"output":{"name":"timeval"}}],[11,"hours","","",85,{"inputs":[{"name":"i64"}],"output":{"name":"timeval"}}],[11,"minutes","","",85,{"inputs":[{"name":"i64"}],"output":{"name":"timeval"}}],[11,"seconds","","",85,{"inputs":[{"name":"i64"}],"output":{"name":"timeval"}}],[11,"milliseconds","","",85,{"inputs":[{"name":"i64"}],"output":{"name":"timeval"}}],[11,"microseconds","","Makes a new `TimeVal` with given number of microseconds.",85,{"inputs":[{"name":"i64"}],"output":{"name":"timeval"}}],[11,"num_hours","","",85,null],[11,"num_minutes","","",85,null],[11,"num_seconds","","",85,null],[11,"num_milliseconds","","",85,null],[11,"num_microseconds","","",85,null],[11,"neg","","",85,null],[11,"add","","",85,null],[11,"sub","","",85,null],[11,"mul","","",85,null],[11,"div","","",85,null],[11,"fmt","","",85,null],[0,"select","nix::sys","",null,null],[3,"FdSet","nix::sys::select","",null,null],[5,"select","","",null,{"inputs":[{"name":"c_int"},{"name":"option"},{"name":"option"},{"name":"option"},{"name":"option"}],"output":{"name":"result"}}],[17,"FD_SETSIZE","","",null,null],[11,"new","","",86,{"inputs":[],"output":{"name":"fdset"}}],[11,"insert","","",86,null],[11,"remove","","",86,null],[11,"contains","","",86,null],[11,"clear","","",86,null],[0,"statvfs","nix::sys","FFI for statvfs functions",null,null],[5,"statvfs","nix::sys::statvfs","Fill an existing `Statvfs` object with information about the `path`",null,{"inputs":[{"name":"p"},{"name":"statvfs"}],"output":{"name":"result"}}],[5,"fstatvfs","","Fill an existing `Statvfs` object with information about `fd`",null,{"inputs":[{"name":"t"},{"name":"statvfs"}],"output":{"name":"result"}}],[0,"vfs","","Structs related to the `statvfs` and `fstatvfs` functions",null,null],[3,"FsFlags","nix::sys::statvfs::vfs","Mount Flags",null,null],[3,"Statvfs","","The posix statvfs struct",null,null],[12,"f_bsize","","Filesystem block size. This is the value that will lead to\nmost efficient use of the filesystem",87,null],[12,"f_frsize","","Fragment Size -- actual minimum unit of allocation on this\nfilesystem",87,null],[12,"f_blocks","","Total number of blocks on the filesystem",87,null],[12,"f_bfree","","Number of unused blocks on the filesystem, including those\nreserved for root",87,null],[12,"f_bavail","","Number of blocks available to non-root users",87,null],[12,"f_files","","Total number of inodes available on the filesystem",87,null],[12,"f_ffree","","Number of inodes available on the filesystem",87,null],[12,"f_favail","","Number of inodes available to non-root users",87,null],[12,"f_fsid","","File System ID",87,null],[12,"f_flag","","Mount Flags",87,null],[12,"f_namemax","","Maximum filename length",87,null],[17,"RDONLY","","Read Only",null,null],[17,"NOSUID","","Do not allow the set-uid bits to have an effect",null,null],[17,"NODEV","","Do not interpret character or block-special devices",null,null],[17,"NOEXEC","","Do not allow execution of binaries on the filesystem",null,null],[17,"SYNCHRONOUS","","All IO should be done synchronously",null,null],[17,"MANDLOCK","","Allow mandatory locks on the filesystem",null,null],[17,"WRITE","","",null,null],[17,"APPEND","","",null,null],[17,"IMMUTABLE","","",null,null],[17,"NOATIME","","Do not update access times on files",null,null],[17,"NODIRATIME","","Do not update access times on files",null,null],[17,"RELATIME","","Update access time relative to modify/change time",null,null],[11,"hash","","",88,null],[11,"cmp","","",88,null],[11,"partial_cmp","","",88,null],[11,"lt","","",88,null],[11,"le","","",88,null],[11,"gt","","",88,null],[11,"ge","","",88,null],[11,"clone","","",88,null],[11,"eq","","",88,null],[11,"ne","","",88,null],[11,"default","","",88,{"inputs":[],"output":{"name":"fsflags"}}],[11,"fmt","","",88,null],[11,"empty","","Returns an empty set of flags.",88,{"inputs":[],"output":{"name":"fsflags"}}],[11,"all","","Returns the set containing all flags.",88,{"inputs":[],"output":{"name":"fsflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",88,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",88,{"inputs":[{"name":"c_ulong"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",88,{"inputs":[{"name":"c_ulong"}],"output":{"name":"fsflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",88,null],[11,"is_all","","Returns `true` if all flags are currently set.",88,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",88,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",88,null],[11,"insert","","Inserts the specified flags in-place.",88,null],[11,"remove","","Removes the specified flags in-place.",88,null],[11,"toggle","","Toggles the specified flags in-place.",88,null],[11,"bitor","","Returns the union of the two sets of flags.",88,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",88,null],[11,"bitand","","Returns the intersection between the two sets of flags.",88,null],[11,"sub","","Returns the set difference of the two sets of flags.",88,null],[11,"not","","Returns the complement of this set of flags.",88,null],[11,"from_iter","","",88,{"inputs":[{"name":"t"}],"output":{"name":"fsflags"}}],[11,"clone","","",87,null],[11,"fmt","","",87,null],[11,"for_path","","Create a new `Statvfs` object and fill it with information about\nthe mount that contains `path`",87,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"update_with_path","","Replace information in this struct with information about `path`",87,null],[11,"for_fd","","Create a new `Statvfs` object and fill it with information from fd",87,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[11,"update_with_fd","","Replace information in this struct with information about `fd`",87,null],[11,"default","","Create a statvfs object initialized to all zeros",87,{"inputs":[],"output":{"name":"self"}}],[0,"unistd","nix","Standard symbolic constants and types",null,null],[4,"Fork","nix::unistd","",null,null],[13,"Parent","","",89,null],[13,"Child","","",89,null],[5,"fork","","",null,{"inputs":[],"output":{"name":"result"}}],[5,"getpid","","",null,{"inputs":[],"output":{"name":"pid_t"}}],[5,"getppid","","",null,{"inputs":[],"output":{"name":"pid_t"}}],[5,"setpgid","","",null,{"inputs":[{"name":"pid_t"},{"name":"pid_t"}],"output":{"name":"result"}}],[5,"dup","","",null,{"inputs":[{"name":"rawfd"}],"output":{"name":"result"}}],[5,"dup2","","",null,{"inputs":[{"name":"rawfd"},{"name":"rawfd"}],"output":{"name":"result"}}],[5,"dup3","","",null,{"inputs":[{"name":"rawfd"},{"name":"rawfd"},{"name":"oflag"}],"output":{"name":"result"}}],[5,"chdir","","",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"chown","","",null,{"inputs":[{"name":"p"},{"name":"option"},{"name":"option"}],"output":{"name":"result"}}],[5,"execv","","",null,null],[5,"execve","","",null,null],[5,"execvp","","",null,null],[5,"daemon","","",null,{"inputs":[{"name":"bool"},{"name":"bool"}],"output":{"name":"result"}}],[5,"sethostname","","",null,null],[5,"gethostname","","",null,null],[5,"close","","",null,{"inputs":[{"name":"rawfd"}],"output":{"name":"result"}}],[5,"read","","",null,null],[5,"write","","",null,null],[5,"pipe","","",null,{"inputs":[],"output":{"name":"result"}}],[5,"pipe2","","",null,{"inputs":[{"name":"oflag"}],"output":{"name":"result"}}],[5,"ftruncate","","",null,{"inputs":[{"name":"rawfd"},{"name":"off_t"}],"output":{"name":"result"}}],[5,"isatty","","",null,{"inputs":[{"name":"rawfd"}],"output":{"name":"result"}}],[5,"unlink","","",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"chroot","","",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"fsync","","",null,{"inputs":[{"name":"rawfd"}],"output":{"name":"result"}}],[5,"fdatasync","","",null,{"inputs":[{"name":"rawfd"}],"output":{"name":"result"}}],[5,"getuid","","",null,{"inputs":[],"output":{"name":"uid_t"}}],[5,"geteuid","","",null,{"inputs":[],"output":{"name":"uid_t"}}],[5,"getgid","","",null,{"inputs":[],"output":{"name":"gid_t"}}],[5,"getegid","","",null,{"inputs":[],"output":{"name":"gid_t"}}],[5,"setuid","","",null,{"inputs":[{"name":"uid_t"}],"output":{"name":"result"}}],[5,"setgid","","",null,{"inputs":[{"name":"gid_t"}],"output":{"name":"result"}}],[11,"clone","","",89,null],[11,"is_child","","",89,null],[11,"is_parent","","",89,null],[6,"Result","nix","",null,null],[8,"NixPath","","",null,null],[10,"len","","",90,null],[10,"with_nix_path","","",90,null],[11,"eq","","",1,null],[11,"ne","","",1,null],[11,"fmt","","",1,null],[11,"clone","","",1,null],[11,"from_errno","","",1,{"inputs":[{"name":"errno"}],"output":{"name":"error"}}],[11,"last","","",1,{"inputs":[],"output":{"name":"error"}}],[11,"invalid_argument","","",1,{"inputs":[],"output":{"name":"error"}}],[11,"errno","","",1,null],[11,"from","","",1,{"inputs":[{"name":"errno"}],"output":{"name":"error"}}],[11,"description","","",1,null],[11,"fmt","","",1,null],[11,"clone","nix::sys::socket","",19,null],[11,"clone","","",20,null],[11,"clone","","",21,null],[11,"clone","","",23,null],[11,"clone","","",24,null],[11,"clone","","",25,null],[11,"clone","nix::sys::stat","",68,null],[11,"clone","nix::sys::socket","",22,null]],"paths":[[4,"Errno"],[4,"Error"],[8,"ErrnoSentinel"],[3,"flock"],[4,"FcntlArg"],[4,"FlockArg"],[3,"OFlag"],[3,"FdFlag"],[3,"PollFd"],[3,"EventFlags"],[3,"KEvent"],[4,"EventFilter"],[3,"EventFlag"],[3,"FilterFlag"],[4,"SigHandler"],[3,"SaFlag"],[3,"SigFlag"],[3,"SigSet"],[3,"SigAction"],[3,"in_addr"],[3,"in6_addr"],[3,"sockaddr"],[3,"sockaddr_in"],[3,"sockaddr_in6"],[3,"sockaddr_un"],[3,"sockaddr_storage"],[3,"UnixAddr"],[3,"Ipv4Addr"],[3,"Ipv6Addr"],[3,"ip_mreq"],[3,"ipv6_mreq"],[3,"RecvMsg"],[3,"linger"],[4,"AddressFamily"],[4,"SockAddr"],[4,"InetAddr"],[4,"IpAddr"],[4,"SockType"],[4,"ControlMessage"],[4,"SockLevel"],[4,"Shutdown"],[3,"MsgFlags"],[3,"ReuseAddr"],[3,"ReusePort"],[3,"TcpNoDelay"],[3,"Linger"],[3,"IpAddMembership"],[3,"IpDropMembership"],[3,"Ipv6AddMembership"],[3,"Ipv6DropMembership"],[3,"IpMulticastTtl"],[3,"IpMulticastLoop"],[3,"ReceiveTimeout"],[3,"SendTimeout"],[3,"Broadcast"],[3,"OobInline"],[3,"SocketError"],[3,"KeepAlive"],[3,"TcpKeepAlive"],[3,"RcvBuf"],[3,"SndBuf"],[3,"SockType"],[8,"GetSockOpt"],[8,"SetSockOpt"],[3,"SockFlag"],[3,"CmsgSpace"],[3,"CmsgIterator"],[3,"ucred"],[3,"FileStat"],[3,"SFlag"],[3,"Mode"],[3,"Termios"],[4,"SetArg"],[4,"FlushArg"],[4,"FlowArg"],[3,"InputFlags"],[3,"OutputFlags"],[3,"ControlFlags"],[3,"LocalFlags"],[4,"WaitStatus"],[3,"WaitPidFlag"],[3,"MapFlags"],[3,"MsFlags"],[3,"ProtFlags"],[3,"IoVec"],[3,"TimeVal"],[3,"FdSet"],[3,"Statvfs"],[3,"FsFlags"],[4,"Fork"],[8,"NixPath"]]};
searchIndex["pretty"] = {"doc":"This crate defines a\n[Wadler-style](http://homepages.inf.ed.ac.uk/wadler/papers/prettier/prettier.pdf)\npretty-printing API.","items":[[3,"BoxDoc","pretty","",null,null],[3,"DocBuilder","","The `DocBuilder` type allows for convenient appending of documents even for arena allocated\ndocuments by storing the arena inline.",null,null],[12,"0","","",0,null],[12,"1","","",0,null],[3,"RefDoc","","Newtype wrapper for `&amp;doc::Doc`",null,null],[3,"BoxAllocator","","",null,null],[4,"Doc","","The concrete document type. This type is not meant to be used directly. Instead use the static\nfunctions on `Doc` or the methods on an `DocAllocator`.",null,null],[13,"Nil","","",1,null],[13,"Append","","",1,null],[13,"Group","","",1,null],[13,"Nest","","",1,null],[13,"Newline","","",1,null],[13,"Text","","",1,null],[11,"partial_cmp","","",1,null],[11,"lt","","",1,null],[11,"le","","",1,null],[11,"gt","","",1,null],[11,"ge","","",1,null],[11,"eq","","",1,null],[11,"ne","","",1,null],[11,"cmp","","",1,null],[11,"fmt","","",1,null],[11,"clone","","",1,null],[11,"from","","",1,{"inputs":[{"name":"s"}],"output":{"name":"doc"}}],[11,"render","","Writes a rendered document.",1,null],[6,"Arena","","An arena which can be used to allocate `Doc` values.",null,null],[8,"DocAllocator","","The `DocAllocator` trait abstracts over a type which can allocate (pointers to) `Doc`.",null,null],[16,"Doc","","",2,null],[10,"alloc","","",2,null],[11,"nil","","",2,null],[11,"newline","","",2,null],[11,"as_string","","",2,null],[11,"text","","",2,null],[11,"concat","","",2,null],[11,"partial_cmp","","",3,null],[11,"lt","","",3,null],[11,"le","","",3,null],[11,"gt","","",3,null],[11,"ge","","",3,null],[11,"eq","","",3,null],[11,"ne","","",3,null],[11,"cmp","","",3,null],[11,"clone","","",3,null],[11,"fmt","","",3,null],[11,"deref","","",3,null],[11,"into","","",0,null],[11,"append","","",0,null],[11,"group","","",0,null],[11,"nest","","",0,null],[11,"partial_cmp","","",4,null],[11,"lt","","",4,null],[11,"le","","",4,null],[11,"gt","","",4,null],[11,"ge","","",4,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"cmp","","",4,null],[11,"clone","","",4,null],[11,"fmt","","",4,null],[11,"deref","","",4,null],[11,"alloc","","",5,null],[11,"alloc","","",6,null],[11,"nil","","",1,{"inputs":[],"output":{"name":"doc"}}],[11,"as_string","","",1,{"inputs":[{"name":"t"}],"output":{"name":"doc"}}],[11,"newline","","",1,{"inputs":[],"output":{"name":"doc"}}],[11,"text","","",1,{"inputs":[{"name":"t"}],"output":{"name":"doc"}}],[11,"append","","",1,null],[11,"concat","","",1,null],[11,"group","","",1,null],[11,"nest","","",1,null]],"paths":[[3,"DocBuilder"],[4,"Doc"],[8,"DocAllocator"],[3,"BoxDoc"],[3,"RefDoc"],[6,"Arena"],[3,"BoxAllocator"]]};
searchIndex["typed_arena"] = {"doc":"The arena, a fast but limited type of allocator.","items":[[3,"Arena","typed_arena","",null,null],[11,"new","","",0,{"inputs":[],"output":{"name":"arena"}}],[11,"with_capacity","","",0,{"inputs":[{"name":"usize"}],"output":{"name":"arena"}}],[11,"alloc","","Allocates a value in the arena, and returns a mutable reference\nto that value.",0,null],[11,"alloc_extend","","Uses the contents of an iterator to allocate values in the arena.\nReturns a mutable slice that contains these values.",0,null],[11,"alloc_uninitialized","","Allocates space for a given number of values, but doesn&#39;t initialize it.",0,null],[11,"uninitialized_array","","Returns unused space.",0,null],[11,"into_vec","","",0,null]],"paths":[[3,"Arena"]]};
searchIndex["combine"] = {"doc":"This crate contains parser combinators, roughly based on the Haskell library\n[parsec](http://hackage.haskell.org/package/parsec).","items":[[3,"ParseError","combine","Struct which hold information about an error that occured at a specific position.\nCan hold multiple instances of `Error` if more that one error occured in the same position.",null,null],[12,"position","","The position where the error occured",0,null],[12,"errors","","A vector containing specific information on what errors occured at `position`",0,null],[3,"State","","The `State&lt;I&gt;` struct keeps track of the current position in the stream `I` using the\n`Positioner` trait to update the position.",null,null],[12,"position","","The current position",1,null],[12,"input","","The input stream used when items are requested",1,null],[5,"from_iter","","Converts an `Iterator` into a stream.",null,{"inputs":[{"name":"i"}],"output":{"name":"iteratorstream"}}],[5,"any","","Parses any token",null,{"inputs":[],"output":{"name":"any"}}],[5,"between","","Parses `open` followed by `parser` followed by `close`\nReturns the value of `parser`",null,{"inputs":[{"name":"l"},{"name":"r"},{"name":"p"}],"output":{"name":"between"}}],[5,"chainl1","","Parses `p` 1 or more times separated by `op`\nThe value returned is the one produced by the left associative application of `op`",null,{"inputs":[{"name":"p"},{"name":"op"}],"output":{"name":"chainl1"}}],[5,"chainr1","","Parses `p` one or more times separated by `op`\nThe value returned is the one produced by the right associative application of `op`",null,{"inputs":[{"name":"p"},{"name":"op"}],"output":{"name":"chainr1"}}],[5,"choice","","Takes an array of parsers and tries to apply them each in order.\nFails if all parsers fails or if an applied parser consumes input before failing.",null,{"inputs":[{"name":"s"}],"output":{"name":"choice"}}],[5,"eof","","Succeeds only if the stream is at end of input, fails otherwise.",null,{"inputs":[],"output":{"name":"eof"}}],[5,"env_parser","","Constructs a parser out of an environment and a function which needs the given environment to\ndo the parsing. This is commonly useful to allow multiple parsers to share some environment\nwhile still allowing the parsers to be written in separate functions.",null,null],[5,"many","","Parses `p` zero or more times returning a collection with the values from `p`.\nIf the returned collection cannot be inferred type annotations must be supplied, either by\nannotating the resulting type binding `let collection: Vec&lt;_&gt; = ...` or by specializing when\ncalling many, `many::&lt;Vec&lt;_&gt;, _&gt;(...)`",null,{"inputs":[{"name":"p"}],"output":{"name":"many"}}],[5,"many1","","Parses `p` one or more times returning a collection with the values from `p`.\nIf the returned collection cannot be inferred type annotations must be supplied, either by\nannotating the resulting type binding `let collection: Vec&lt;_&gt; = ...` or by specializing when\ncalling many1 `many1::&lt;Vec&lt;_&gt;, _&gt;(...)`",null,{"inputs":[{"name":"p"}],"output":{"name":"many1"}}],[5,"optional","","Returns `Some(value)` and `None` on parse failure (always succeeds)",null,{"inputs":[{"name":"p"}],"output":{"name":"optional"}}],[5,"parser","","Wraps a function, turning it into a parser\nMainly needed to turn closures into parsers as function types can be casted to function pointers\nto make them usable as a parser",null,{"inputs":[{"name":"f"}],"output":{"name":"fnparser"}}],[5,"satisfy","","Parses a token and succeeds depending on the result of `predicate`",null,{"inputs":[{"name":"p"}],"output":{"name":"satisfy"}}],[5,"satisfy_map","","Parses a token and passes it to `predicate`. If `predicate` returns `Some` the parser succeeds\nand returns the value inside the `Option`. If `predicate` returns `None` the parser fails\nwithout consuming any imput.",null,{"inputs":[{"name":"p"}],"output":{"name":"satisfymap"}}],[5,"sep_by","","Parses `parser` zero or more time separated by `separator`, returning a collection with the\nvalues from `p`. If the returned collection cannot be inferred type annotations must be\nsupplied, either by annotating the resulting type binding `let collection: Vec&lt;_&gt; = ...` or by\nspecializing when calling sep_by, `sep_by::&lt;Vec&lt;_&gt;, _, _&gt;(...)`",null,{"inputs":[{"name":"p"},{"name":"s"}],"output":{"name":"sepby"}}],[5,"sep_by1","","Parses `parser` one or more time separated by `separator`, returning a collection with the\nvalues from `p`. If the returned collection cannot be inferred type annotations must be\nsupplied, either by annotating the resulting type binding `let collection: Vec&lt;_&gt; = ...` or by\nspecializing when calling sep_by, `sep_by1::&lt;Vec&lt;_&gt;, _, _&gt;(...)`",null,{"inputs":[{"name":"p"},{"name":"s"}],"output":{"name":"sepby1"}}],[5,"sep_end_by","","Parses `parser` zero or more time separated by `separator`, returning a collection with the\nvalues from `p`. If the returned collection cannot be inferred type annotations must be\nsupplied, either by annotating the resulting type binding `let collection: Vec&lt;_&gt; = ...` or by\nspecializing when calling sep_by, `sep_by::&lt;Vec&lt;_&gt;, _, _&gt;(...)`",null,{"inputs":[{"name":"p"},{"name":"s"}],"output":{"name":"sependby"}}],[5,"sep_end_by1","","Parses `parser` one or more time separated by `separator`, returning a collection with the\nvalues from `p`. If the returned collection cannot be inferred type annotations must be\nsupplied, either by annotating the resulting type binding `let collection: Vec&lt;_&gt; = ...` or by\nspecializing when calling sep_by, `sep_by1::&lt;Vec&lt;_&gt;, _, _&gt;(...)`",null,{"inputs":[{"name":"p"},{"name":"s"}],"output":{"name":"sependby1"}}],[5,"skip_many","","Parses `p` zero or more times ignoring the result",null,{"inputs":[{"name":"p"}],"output":{"name":"skipmany"}}],[5,"skip_many1","","Parses `p` one or more times ignoring the result",null,{"inputs":[{"name":"p"}],"output":{"name":"skipmany1"}}],[5,"token","","Parses a character and succeeds if the character is equal to `c`",null,{"inputs":[{"name":"item"}],"output":{"name":"token"}}],[5,"try","","Try acts as `p` except it acts as if the parser hadn&#39;t consumed any input\nif `p` returns an error after consuming input",null,{"inputs":[{"name":"p"}],"output":{"name":"try"}}],[5,"look_ahead","","look_ahead acts as p but doesn&#39;t consume input on success.",null,{"inputs":[{"name":"p"}],"output":{"name":"lookahead"}}],[5,"value","","Always returns the value `v` without consuming any input.",null,{"inputs":[{"name":"t"}],"output":{"name":"value"}}],[5,"unexpected","","Always fails with `message` as an unexpected error.\nNever consumes any input.",null,{"inputs":[{"name":"s"}],"output":{"name":"unexpected"}}],[5,"not_followed_by","","Succeeds only if `parser` fails.\nNever consumes any input.",null,{"inputs":[{"name":"p"}],"output":{"name":"notfollowedby"}}],[0,"primitives","","Module containing the primitive types which is used to create and compose more advanced parsers",null,null],[3,"SourcePosition","combine::primitives","Struct which represents a position in a source file",null,null],[12,"line","","Current line of the input",2,null],[12,"column","","Current column of the input",2,null],[3,"BytePosition","","Struct which represents a position in a byte stream",null,null],[12,"position","","Current position",3,null],[3,"ParseError","","Struct which hold information about an error that occured at a specific position.\nCan hold multiple instances of `Error` if more that one error occured in the same position.",null,null],[12,"position","","The position where the error occured",0,null],[12,"errors","","A vector containing specific information on what errors occured at `position`",0,null],[3,"State","","The `State&lt;I&gt;` struct keeps track of the current position in the stream `I` using the\n`Positioner` trait to update the position.",null,null],[12,"position","","The current position",1,null],[12,"input","","The input stream used when items are requested",1,null],[3,"SliceStream","","Newtype for constructing a stream from a slice where the items in the slice are not copyable",null,null],[12,"0","","",4,null],[3,"IteratorStream","","Wrapper around iterators which allows them to be treated as a stream.\nReturned by `from_iter`.",null,null],[3,"BufferedStream","","A `BufferedStream` wraps an instance `StreamOnce`, allowing it to b used as a `Stream`",null,null],[3,"SharedBufferedStream","","",null,null],[4,"Info","","Enum holding error information\nAs there is implementations of `From` for `T: Positioner`, `String` and `&amp;&#39;static str` the\nconstructor need not be used directly as calling `msg.into()` should turn a message into the\ncorrect `Info` variant",null,null],[13,"Token","","",5,null],[13,"Range","","",5,null],[13,"Owned","","",5,null],[13,"Borrowed","","",5,null],[4,"Error","","Enum used to store information about an error that has occured",null,null],[13,"Unexpected","","Error indicating an unexpected token has been encountered in the stream",6,null],[13,"Expected","","Error indicating that the parser expected something else",6,null],[13,"Message","","Generic message",6,null],[13,"Other","","Variant for containing other types of errors",6,null],[4,"Consumed","","Enum used to indicate if a parser consumed any items of the stream it was given as an input",null,null],[13,"Consumed","","Constructor indicating that the parser has consumed elements",7,null],[13,"Empty","","Constructor indicating that the parser did not consume any elements",7,null],[4,"FastResult","","",null,null],[13,"ConsumedOk","","",8,null],[13,"EmptyOk","","",8,null],[13,"ConsumedErr","","",8,null],[13,"EmptyErr","","",8,null],[5,"uncons","","",null,{"inputs":[{"name":"i"}],"output":{"name":"parseresult"}}],[5,"uncons_while","","Removes items from the input while `predicate` returns `true`.",null,{"inputs":[{"name":"i"},{"name":"f"}],"output":{"name":"consumedresult"}}],[5,"from_iter","","Converts an `Iterator` into a stream.",null,{"inputs":[{"name":"i"}],"output":{"name":"iteratorstream"}}],[6,"ParseResult","","A type alias over the specific `Result` type used by parsers to indicate wether they were\nsuccessful or not.\n`O` is the type that is output on success\n`I` is the specific stream type used in the parser",null,null],[6,"ConsumedResult","","A `Result` type which has the consumed status flattened into the result.\nConversions to and from `std::result::Result` can be done using `result.into()` or\n`From::from(result)`",null,null],[8,"StreamOnce","","`StreamOnce` represents a sequence of items that can be extracted one by one.",null,null],[16,"Item","","The type of items which is yielded from this stream",9,null],[16,"Range","","The type of a range of items yielded from this stream.\nTypes which do not a have a way of yielding ranges of items should just use the\nSelf::Item for this type",9,null],[16,"Position","","Type which represents the position in a stream.\nOrd is required to allow parsers to determine which of two positions are further ahead.",9,null],[10,"uncons","","Takes a stream and removes its first item, yielding the item and the rest of the elements\nReturns `Err` if no element could be retrieved",9,null],[10,"position","","Returns the current position of the stream",9,null],[8,"Stream","","A stream of tokens which can be duplicated",null,null],[8,"RangeStream","","A `RangeStream` is an extension of Stream which allows for zero copy parsing",null,null],[10,"uncons_range","","Takes `size` elements from the stream\nFails if the length of the stream is less than `size`.",10,null],[10,"uncons_while","","Takes items from stream, testing each one with `predicate`\nreturns the range of items which passed `predicate`",10,null],[8,"Range","","",null,null],[10,"len","","Returns the remaining length of `self`.\nThe returned length need not be the same as the number of items left in the stream",11,null],[8,"Positioner","","Trait for updating the position for types which can be yielded from a `Stream`.",null,null],[16,"Position","","The type which keeps track of the position.",12,null],[10,"start","","Creates a start position",12,{"inputs":[],"output":{"name":"position"}}],[10,"update","","Updates the position given that `self` has been taken from the stream",12,null],[8,"Parser","","By implementing the `Parser` trait a type says that it can be used to parse an input stream into\nthe type `Output`.",null,null],[16,"Input","","The type which is take as input for the parser. The type must implement the `Stream` trait\nwhich allows the parser to read item from the type.",13,null],[16,"Output","","The type which is returned if the parser is successful.",13,null],[11,"parse","","Entrypoint of the parser\nTakes some input and tries to parse it returning a `ParseResult`",13,null],[11,"parse_stream","","Parses using the stream `input` by calling Stream::uncons one or more times\nOn success returns `Ok((value, new_state))` on failure it returns `Err(error)`",13,null],[11,"parse_stream_consumed","","Parses using the stream `input` by calling Stream::uncons one or more times\nOn success returns `Ok((value, new_state))` on failure it returns `Err(error)`",13,null],[11,"parse_lazy","","Specialized version of parse_stream where the parser does not need to add an error to the\n`ParseError` when it does not consume any input before encountering the error.\nInstead the error can be added later through the `add_error` method",13,null],[11,"add_error","","Adds the first error that would normally be returned by this parser if it failed",13,null],[11,"with","","Discards the value of the `self` parser and returns the value of `p`\nFails if any of the parsers fails",13,null],[11,"skip","","Discards the value of the `p` parser and returns the value of `self`\nFails if any of the parsers fails",13,null],[11,"and","","Parses with `self` followed by `p`\nSucceeds if both parsers succeed, otherwise fails\nReturns a tuple with both values on success",13,null],[11,"or","","Returns a parser which attempts to parse using `self`. If `self` fails without consuming any\ninput it tries to consume the same input using `p`.",13,null],[11,"then","","Parses using `self` and then passes the value to `f` which returns a parser used to parse\nthe rest of the input",13,null],[11,"map","","Uses `f` to map over the parsed value",13,null],[11,"flat_map","","Uses `f` to map over the output of `self`. If `f` returns an error the parser fails.",13,null],[11,"message","","Parses with `self` and if it fails, adds the message `msg` to the error",13,null],[11,"expected","","Parses with `self` and if it fails without consuming any input any expected errors are\nreplaced by `msg`. `msg` is then used in error messages as &quot;Expected `msg`&quot;.",13,null],[11,"and_then","","Parses with `self` and applies `f` on the result if `self` parses successfully\n`f` may optionally fail with an error which is automatically converted to a `ParseError`",13,null],[11,"iter","","Creates an iterator from a parser and a state. Can be used as an alternative to `many` when\ncollecting directly into a `FromIterator` type is not desirable",13,null],[11,"partial_cmp","","",2,null],[11,"lt","","",2,null],[11,"le","","",2,null],[11,"gt","","",2,null],[11,"ge","","",2,null],[11,"cmp","","",2,null],[11,"eq","","",2,null],[11,"ne","","",2,null],[11,"fmt","","",2,null],[11,"clone","","",2,null],[11,"partial_cmp","","",3,null],[11,"lt","","",3,null],[11,"le","","",3,null],[11,"gt","","",3,null],[11,"ge","","",3,null],[11,"cmp","","",3,null],[11,"eq","","",3,null],[11,"ne","","",3,null],[11,"fmt","","",3,null],[11,"clone","","",3,null],[11,"fmt","","",3,null],[11,"fmt","","",5,null],[11,"clone","","",5,null],[11,"eq","","",5,null],[11,"fmt","","",5,null],[11,"from","","",5,{"inputs":[{"name":"char"}],"output":{"name":"info"}}],[11,"from","","",5,{"inputs":[{"name":"string"}],"output":{"name":"info"}}],[11,"from","","",5,{"inputs":[{"name":"str"}],"output":{"name":"info"}}],[11,"fmt","","",6,null],[11,"eq","","",6,null],[11,"from","","",6,{"inputs":[{"name":"e"}],"output":{"name":"error"}}],[11,"end_of_input","","Returns the `end_of_input` error",6,{"inputs":[],"output":{"name":"error"}}],[11,"fmt_errors","","Formats a slice of errors in a human readable way",6,null],[11,"fmt","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"clone","","",7,null],[11,"as_mut","","",7,null],[11,"as_ref","","",7,null],[11,"is_empty","","Returns true if `self` is empty",7,null],[11,"into_inner","","Extracts the contained value",7,null],[11,"as_consumed","","Converts `self` into the Consumed state",7,null],[11,"as_empty","","Converts `self` into theEmpty state",7,null],[11,"map","","Maps over the contained value without changing the consumed state",7,null],[11,"merge","","",7,null],[11,"combine","","Combines the Consumed flags from `self` and the result of `f`",7,null],[11,"combine_consumed","","",7,null],[11,"new","","",0,{"inputs":[{"name":"position"},{"name":"error"}],"output":{"name":"parseerror"}}],[11,"empty","","",0,{"inputs":[{"name":"position"}],"output":{"name":"parseerror"}}],[11,"from_errors","","",0,{"inputs":[{"name":"position"},{"name":"vec"}],"output":{"name":"parseerror"}}],[11,"end_of_input","","",0,{"inputs":[{"name":"position"}],"output":{"name":"parseerror"}}],[11,"add_message","","",0,null],[11,"add_error","","",0,null],[11,"set_expected","","",0,null],[11,"merge","","",0,null],[11,"description","","",0,null],[11,"eq","","",0,null],[11,"fmt","","",0,null],[11,"fmt","","",0,null],[11,"fmt","","",2,null],[11,"fmt","","",6,null],[11,"eq","","",1,null],[11,"ne","","",1,null],[11,"clone","","",1,null],[11,"fmt","","",1,null],[11,"new","","Creates a new `State&lt;I&gt;` from an input stream. Initializes the position to\n`Positioner::start()`",1,{"inputs":[{"name":"i"}],"output":{"name":"state"}}],[11,"uncons","","",1,null],[11,"position","","",1,null],[11,"uncons_range","","",1,null],[11,"uncons_while","","",1,null],[11,"fmt","","",4,null],[11,"partial_cmp","","",4,null],[11,"lt","","",4,null],[11,"le","","",4,null],[11,"gt","","",4,null],[11,"ge","","",4,null],[11,"cmp","","",4,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"clone","","",4,null],[11,"uncons","","",4,null],[11,"position","","",4,null],[11,"uncons_range","","",4,null],[11,"uncons_while","","",4,null],[11,"fmt","","",14,null],[11,"clone","","",14,null],[11,"next","","",14,null],[11,"uncons","","",14,null],[11,"position","","",14,null],[11,"start","","",4,{"inputs":[],"output":{"name":"position"}}],[11,"update","","",4,null],[11,"fmt","","",8,null],[11,"eq","","",8,null],[11,"ne","","",8,null],[11,"clone","","",8,null],[11,"as_ref","","",8,null],[11,"and_then","","",8,null],[11,"map","","",15,null],[11,"into","","",8,null],[11,"into","","",15,null],[11,"from","","",15,{"inputs":[{"name":"parseresult"}],"output":{"name":"consumedresult"}}],[11,"fmt","","",16,null],[11,"clone","","",16,null],[11,"as_stream","","",17,null],[11,"new","","Constructs a new `BufferedStream` froma a `StreamOnce` instance with a `lookahead` number\nof elements stored in the buffer.",16,{"inputs":[{"name":"i"},{"name":"usize"}],"output":{"name":"sharedbufferedstream"}}],[11,"uncons","","",16,null],[11,"position","","",16,null],[0,"combinator","combine","Module containing all specific parsers",null,null],[3,"Any","combine::combinator","",null,null],[3,"Satisfy","","",null,null],[3,"SatisfyMap","","",null,null],[3,"Token","","",null,null],[3,"Choice","","",null,null],[3,"Unexpected","","",null,null],[3,"Value","","",null,null],[3,"NotFollowedBy","","",null,null],[3,"Eof","","",null,null],[3,"Iter","","",null,null],[3,"Many","","",null,null],[3,"Many1","","",null,null],[3,"SkipMany","","",null,null],[3,"SkipMany1","","",null,null],[3,"SepBy","","",null,null],[3,"SepBy1","","",null,null],[3,"SepEndBy","","",null,null],[3,"SepEndBy1","","",null,null],[3,"FnParser","","",null,null],[3,"Optional","","",null,null],[3,"Between","","",null,null],[3,"Chainl1","","",null,null],[3,"Chainr1","","",null,null],[3,"Try","","",null,null],[3,"LookAhead","","",null,null],[3,"With","","",null,null],[3,"Skip","","",null,null],[3,"Message","","",null,null],[3,"Or","","",null,null],[3,"Map","","",null,null],[3,"FlatMap","","",null,null],[3,"Then","","",null,null],[3,"Expected","","",null,null],[3,"AndThen","","",null,null],[3,"EnvParser","","",null,null],[5,"any","","Parses any token",null,{"inputs":[],"output":{"name":"any"}}],[5,"satisfy","","Parses a token and succeeds depending on the result of `predicate`",null,{"inputs":[{"name":"p"}],"output":{"name":"satisfy"}}],[5,"satisfy_map","","Parses a token and passes it to `predicate`. If `predicate` returns `Some` the parser succeeds\nand returns the value inside the `Option`. If `predicate` returns `None` the parser fails\nwithout consuming any imput.",null,{"inputs":[{"name":"p"}],"output":{"name":"satisfymap"}}],[5,"token","","Parses a character and succeeds if the character is equal to `c`",null,{"inputs":[{"name":"item"}],"output":{"name":"token"}}],[5,"choice","","Takes an array of parsers and tries to apply them each in order.\nFails if all parsers fails or if an applied parser consumes input before failing.",null,{"inputs":[{"name":"s"}],"output":{"name":"choice"}}],[5,"unexpected","","Always fails with `message` as an unexpected error.\nNever consumes any input.",null,{"inputs":[{"name":"s"}],"output":{"name":"unexpected"}}],[5,"value","","Always returns the value `v` without consuming any input.",null,{"inputs":[{"name":"t"}],"output":{"name":"value"}}],[5,"not_followed_by","","Succeeds only if `parser` fails.\nNever consumes any input.",null,{"inputs":[{"name":"p"}],"output":{"name":"notfollowedby"}}],[5,"eof","","Succeeds only if the stream is at end of input, fails otherwise.",null,{"inputs":[],"output":{"name":"eof"}}],[5,"many","","Parses `p` zero or more times returning a collection with the values from `p`.\nIf the returned collection cannot be inferred type annotations must be supplied, either by\nannotating the resulting type binding `let collection: Vec&lt;_&gt; = ...` or by specializing when\ncalling many, `many::&lt;Vec&lt;_&gt;, _&gt;(...)`",null,{"inputs":[{"name":"p"}],"output":{"name":"many"}}],[5,"skip_many","","Parses `p` zero or more times ignoring the result",null,{"inputs":[{"name":"p"}],"output":{"name":"skipmany"}}],[5,"skip_many1","","Parses `p` one or more times ignoring the result",null,{"inputs":[{"name":"p"}],"output":{"name":"skipmany1"}}],[5,"many1","","Parses `p` one or more times returning a collection with the values from `p`.\nIf the returned collection cannot be inferred type annotations must be supplied, either by\nannotating the resulting type binding `let collection: Vec&lt;_&gt; = ...` or by specializing when\ncalling many1 `many1::&lt;Vec&lt;_&gt;, _&gt;(...)`",null,{"inputs":[{"name":"p"}],"output":{"name":"many1"}}],[5,"sep_by","","Parses `parser` zero or more time separated by `separator`, returning a collection with the\nvalues from `p`. If the returned collection cannot be inferred type annotations must be\nsupplied, either by annotating the resulting type binding `let collection: Vec&lt;_&gt; = ...` or by\nspecializing when calling sep_by, `sep_by::&lt;Vec&lt;_&gt;, _, _&gt;(...)`",null,{"inputs":[{"name":"p"},{"name":"s"}],"output":{"name":"sepby"}}],[5,"sep_by1","","Parses `parser` one or more time separated by `separator`, returning a collection with the\nvalues from `p`. If the returned collection cannot be inferred type annotations must be\nsupplied, either by annotating the resulting type binding `let collection: Vec&lt;_&gt; = ...` or by\nspecializing when calling sep_by, `sep_by1::&lt;Vec&lt;_&gt;, _, _&gt;(...)`",null,{"inputs":[{"name":"p"},{"name":"s"}],"output":{"name":"sepby1"}}],[5,"sep_end_by","","Parses `parser` zero or more time separated by `separator`, returning a collection with the\nvalues from `p`. If the returned collection cannot be inferred type annotations must be\nsupplied, either by annotating the resulting type binding `let collection: Vec&lt;_&gt; = ...` or by\nspecializing when calling sep_by, `sep_by::&lt;Vec&lt;_&gt;, _, _&gt;(...)`",null,{"inputs":[{"name":"p"},{"name":"s"}],"output":{"name":"sependby"}}],[5,"sep_end_by1","","Parses `parser` one or more time separated by `separator`, returning a collection with the\nvalues from `p`. If the returned collection cannot be inferred type annotations must be\nsupplied, either by annotating the resulting type binding `let collection: Vec&lt;_&gt; = ...` or by\nspecializing when calling sep_by, `sep_by1::&lt;Vec&lt;_&gt;, _, _&gt;(...)`",null,{"inputs":[{"name":"p"},{"name":"s"}],"output":{"name":"sependby1"}}],[5,"parser","","Wraps a function, turning it into a parser\nMainly needed to turn closures into parsers as function types can be casted to function pointers\nto make them usable as a parser",null,{"inputs":[{"name":"f"}],"output":{"name":"fnparser"}}],[5,"optional","","Returns `Some(value)` and `None` on parse failure (always succeeds)",null,{"inputs":[{"name":"p"}],"output":{"name":"optional"}}],[5,"between","","Parses `open` followed by `parser` followed by `close`\nReturns the value of `parser`",null,{"inputs":[{"name":"l"},{"name":"r"},{"name":"p"}],"output":{"name":"between"}}],[5,"chainl1","","Parses `p` 1 or more times separated by `op`\nThe value returned is the one produced by the left associative application of `op`",null,{"inputs":[{"name":"p"},{"name":"op"}],"output":{"name":"chainl1"}}],[5,"chainr1","","Parses `p` one or more times separated by `op`\nThe value returned is the one produced by the right associative application of `op`",null,{"inputs":[{"name":"p"},{"name":"op"}],"output":{"name":"chainr1"}}],[5,"try","","Try acts as `p` except it acts as if the parser hadn&#39;t consumed any input\nif `p` returns an error after consuming input",null,{"inputs":[{"name":"p"}],"output":{"name":"try"}}],[5,"look_ahead","","look_ahead acts as p but doesn&#39;t consume input on success.",null,{"inputs":[{"name":"p"}],"output":{"name":"lookahead"}}],[5,"with","","",null,{"inputs":[{"name":"p1"},{"name":"p2"}],"output":{"name":"with"}}],[5,"skip","","",null,{"inputs":[{"name":"p1"},{"name":"p2"}],"output":{"name":"skip"}}],[5,"message","","",null,{"inputs":[{"name":"p"},{"name":"info"}],"output":{"name":"message"}}],[5,"or","","",null,{"inputs":[{"name":"p1"},{"name":"p2"}],"output":{"name":"or"}}],[5,"map","","",null,{"inputs":[{"name":"p"},{"name":"f"}],"output":{"name":"map"}}],[5,"flat_map","","",null,{"inputs":[{"name":"p"},{"name":"f"}],"output":{"name":"flatmap"}}],[5,"then","","",null,{"inputs":[{"name":"p"},{"name":"f"}],"output":{"name":"then"}}],[5,"expected","","",null,{"inputs":[{"name":"p"},{"name":"info"}],"output":{"name":"expected"}}],[5,"and_then","","",null,{"inputs":[{"name":"p"},{"name":"f"}],"output":{"name":"andthen"}}],[5,"env_parser","","Constructs a parser out of an environment and a function which needs the given environment to\ndo the parsing. This is commonly useful to allow multiple parsers to share some environment\nwhile still allowing the parsers to be written in separate functions.",null,null],[11,"clone","","",18,null],[11,"parse_lazy","","",18,null],[11,"clone","","",19,null],[11,"parse_lazy","","",19,null],[11,"clone","","",20,null],[11,"parse_lazy","","",20,null],[11,"clone","","",21,null],[11,"parse_lazy","","",21,null],[11,"add_error","","",21,null],[11,"clone","","",22,null],[11,"parse_lazy","","",22,null],[11,"add_error","","",22,null],[11,"clone","","",23,null],[11,"parse_lazy","","",23,null],[11,"add_error","","",23,null],[11,"clone","","",24,null],[11,"parse_lazy","","",24,null],[11,"clone","","",25,null],[11,"parse_stream","","",25,null],[11,"parse_stream_consumed","","",25,null],[11,"parse_lazy","","",25,null],[11,"add_error","","",25,null],[11,"clone","","",26,null],[11,"parse_lazy","","",26,null],[11,"add_error","","",26,null],[11,"new","","",27,{"inputs":[{"name":"p"},{"name":"input"}],"output":{"name":"iter"}}],[11,"into_result","","Converts the iterator to a `ParseResult`, returning `Ok` if the parsing so far has be done\nwithout any errors which consumed data.",27,null],[11,"next","","",27,null],[11,"clone","","",28,null],[11,"parse_stream_consumed","","",28,null],[11,"clone","","",29,null],[11,"parse_lazy","","",29,null],[11,"add_error","","",29,null],[11,"clone","","",30,null],[11,"parse_stream","","",30,null],[11,"parse_stream_consumed","","",30,null],[11,"parse_lazy","","",30,null],[11,"add_error","","",30,null],[11,"clone","","",31,null],[11,"parse_stream","","",31,null],[11,"parse_stream_consumed","","",31,null],[11,"parse_lazy","","",31,null],[11,"add_error","","",31,null],[11,"clone","","",32,null],[11,"parse_lazy","","",32,null],[11,"add_error","","",32,null],[11,"clone","","",33,null],[11,"parse_lazy","","",33,null],[11,"add_error","","",33,null],[11,"clone","","",34,null],[11,"parse_lazy","","",34,null],[11,"add_error","","",34,null],[11,"clone","","",35,null],[11,"parse_lazy","","",35,null],[11,"add_error","","",35,null],[11,"clone","","",36,null],[11,"parse_stream","","",36,null],[11,"clone","","",37,null],[11,"parse_lazy","","",37,null],[11,"clone","","",38,null],[11,"parse_stream","","",38,null],[11,"parse_stream_consumed","","",38,null],[11,"parse_lazy","","",38,null],[11,"add_error","","",38,null],[11,"clone","","",39,null],[11,"parse_lazy","","",39,null],[11,"add_error","","",39,null],[11,"clone","","",40,null],[11,"parse_lazy","","",40,null],[11,"add_error","","",40,null],[11,"clone","","",41,null],[11,"parse_lazy","","",41,null],[11,"add_error","","",41,null],[11,"clone","","",42,null],[11,"parse_lazy","","",42,null],[11,"add_error","","",42,null],[11,"clone","","",43,null],[11,"parse_lazy","","",43,null],[11,"add_error","","",43,null],[11,"clone","","",44,null],[11,"parse_lazy","","",44,null],[11,"add_error","","",44,null],[11,"clone","","",45,null],[11,"parse_stream","","",45,null],[11,"parse_lazy","","",45,null],[11,"add_error","","",45,null],[11,"clone","","",46,null],[11,"parse_lazy","","",46,null],[11,"add_error","","",46,null],[11,"clone","","",47,null],[11,"parse_lazy","","",47,null],[11,"add_error","","",47,null],[11,"clone","","",48,null],[11,"parse_lazy","","",48,null],[11,"add_error","","",48,null],[11,"clone","","",49,null],[11,"parse_lazy","","",49,null],[11,"add_error","","",49,null],[11,"clone","","",50,null],[11,"parse_stream","","",50,null],[11,"parse_lazy","","",50,null],[11,"add_error","","",50,null],[11,"clone","","",51,null],[11,"parse_lazy","","",51,null],[11,"add_error","","",51,null],[11,"clone","","",52,null],[11,"parse_lazy","","",52,null],[0,"range","combine","Module containing zero-copy parsers",null,null],[3,"Range","combine::range","",null,null],[3,"Take","","",null,null],[3,"TakeWhile","","",null,null],[3,"TakeWhile1","","",null,null],[5,"range","","```\n# extern crate combine;\n# use combine::range::range;\n# use combine::*;\n# fn main() {\nlet mut parser = range(&quot;hello&quot;);\nlet result = parser.parse(&quot;hello world&quot;);\nassert_eq!(result, Ok((&quot;hello&quot;, &quot; world&quot;)));\nlet result = parser.parse(&quot;hel world&quot;);\nassert!(result.is_err());\n# }\n```",null,{"inputs":[{"name":"range"}],"output":{"name":"range"}}],[5,"take","","```\n# extern crate combine;\n# use combine::range::take;\n# use combine::*;\n# fn main() {\nlet mut parser = take(1);\nlet result = parser.parse(&quot;1&quot;);\nassert_eq!(result, Ok((&quot;1&quot;, &quot;&quot;)));\nlet mut parser = take(4);\nlet result = parser.parse(&quot;123abc&quot;);\nassert_eq!(result, Ok((&quot;123a&quot;, &quot;bc&quot;)));\nlet result = parser.parse(&quot;abc&quot;);\nassert!(result.is_err());\n# }\n```",null,{"inputs":[{"name":"usize"}],"output":{"name":"take"}}],[5,"take_while","","```\n# extern crate combine;\n# use combine::range::take_while;\n# use combine::*;\n# fn main() {\nlet mut parser = take_while(|c: char| c.is_digit(10));\nlet result = parser.parse(&quot;123abc&quot;);\nassert_eq!(result, Ok((&quot;123&quot;, &quot;abc&quot;)));\nlet result = parser.parse(&quot;abc&quot;);\nassert_eq!(result, Ok((&quot;&quot;, &quot;abc&quot;)));\n# }\n```",null,{"inputs":[{"name":"f"}],"output":{"name":"takewhile"}}],[5,"take_while1","","```\n# extern crate combine;\n# use combine::range::take_while1;\n# use combine::*;\n# fn main() {\nlet mut parser = take_while1(|c: char| c.is_digit(10));\nlet result = parser.parse(&quot;123abc&quot;);\nassert_eq!(result, Ok((&quot;123&quot;, &quot;abc&quot;)));\nlet result = parser.parse(&quot;abc&quot;);\nassert!(result.is_err());\n# }\n```",null,{"inputs":[{"name":"f"}],"output":{"name":"takewhile1"}}],[11,"parse_lazy","","",53,null],[11,"add_error","","",53,null],[11,"parse_lazy","","",54,null],[11,"parse_lazy","","",55,null],[11,"parse_lazy","","",56,null],[0,"byte","combine","Module containing parsers specialized on byte streams",null,null],[3,"Digit","combine::byte","",null,null],[3,"Space","","",null,null],[3,"Spaces","","",null,null],[3,"Newline","","",null,null],[3,"CrLf","","",null,null],[3,"Tab","","",null,null],[3,"Upper","","",null,null],[3,"Lower","","",null,null],[3,"AlphaNum","","",null,null],[3,"Letter","","",null,null],[3,"HexDigit","","",null,null],[3,"Bytes","","",null,null],[5,"byte","","Parses a character and succeeds if the character is equal to `c`",null,{"inputs":[{"name":"u8"}],"output":{"name":"token"}}],[5,"digit","","Parses a digit from a stream containing characters",null,{"inputs":[],"output":{"name":"digit"}}],[5,"space","","Parses whitespace",null,{"inputs":[],"output":{"name":"space"}}],[5,"spaces","","Skips over zero or more spaces",null,{"inputs":[],"output":{"name":"spaces"}}],[5,"newline","","Parses a newline character",null,{"inputs":[],"output":{"name":"newline"}}],[5,"crlf","","Parses carriage return and newline, returning the newline character.",null,{"inputs":[],"output":{"name":"crlf"}}],[5,"tab","","Parses a tab character",null,{"inputs":[],"output":{"name":"tab"}}],[5,"upper","","Parses an uppercase letter",null,{"inputs":[],"output":{"name":"upper"}}],[5,"lower","","Parses an lowercase letter",null,{"inputs":[],"output":{"name":"lower"}}],[5,"alpha_num","","Parses either an alphabet letter or digit",null,{"inputs":[],"output":{"name":"alphanum"}}],[5,"letter","","Parses an alphabet letter",null,{"inputs":[],"output":{"name":"letter"}}],[5,"hex_digit","","Parses a hexdecimal digit with uppercase and lowercase",null,{"inputs":[],"output":{"name":"hexdigit"}}],[5,"bytes","","Parses the bytes `s`. If you have a stream implementing `RangeStream` such as `&amp;[u8]` you can\nalso use the `range` parser which may be more efficient.",null,null],[11,"clone","","",57,null],[11,"parse_lazy","","",57,null],[11,"add_error","","",57,null],[11,"clone","","",58,null],[11,"parse_lazy","","",58,null],[11,"add_error","","",58,null],[11,"clone","","",59,null],[11,"parse_lazy","","",59,null],[11,"add_error","","",59,null],[11,"clone","","",60,null],[11,"parse_lazy","","",60,null],[11,"add_error","","",60,null],[11,"clone","","",61,null],[11,"parse_lazy","","",61,null],[11,"add_error","","",61,null],[11,"clone","","",62,null],[11,"parse_lazy","","",62,null],[11,"add_error","","",62,null],[11,"clone","","",63,null],[11,"parse_lazy","","",63,null],[11,"add_error","","",63,null],[11,"clone","","",64,null],[11,"parse_lazy","","",64,null],[11,"add_error","","",64,null],[11,"clone","","",65,null],[11,"parse_lazy","","",65,null],[11,"add_error","","",65,null],[11,"clone","","",66,null],[11,"parse_lazy","","",66,null],[11,"add_error","","",66,null],[11,"clone","","",67,null],[11,"parse_lazy","","",67,null],[11,"add_error","","",67,null],[11,"clone","","",68,null],[11,"parse_lazy","","",68,null],[11,"add_error","","",68,null],[0,"char","combine","Module containing parsers specialized on character streams",null,null],[3,"Digit","combine::char","",null,null],[3,"Space","","",null,null],[3,"Spaces","","",null,null],[3,"Newline","","",null,null],[3,"CrLf","","",null,null],[3,"Tab","","",null,null],[3,"Upper","","",null,null],[3,"Lower","","",null,null],[3,"AlphaNum","","",null,null],[3,"Letter","","",null,null],[3,"OctDigit","","",null,null],[3,"HexDigit","","",null,null],[3,"Str","","",null,null],[5,"char","","Parses a character and succeeds if the character is equal to `c`",null,{"inputs":[{"name":"char"}],"output":{"name":"token"}}],[5,"digit","","Parses a digit from a stream containing characters",null,{"inputs":[],"output":{"name":"digit"}}],[5,"space","","Parses whitespace",null,{"inputs":[],"output":{"name":"space"}}],[5,"spaces","","Skips over zero or more spaces",null,{"inputs":[],"output":{"name":"spaces"}}],[5,"newline","","Parses a newline character",null,{"inputs":[],"output":{"name":"newline"}}],[5,"crlf","","Parses carriage return and newline, returning the newline character.",null,{"inputs":[],"output":{"name":"crlf"}}],[5,"tab","","Parses a tab character",null,{"inputs":[],"output":{"name":"tab"}}],[5,"upper","","Parses an uppercase letter",null,{"inputs":[],"output":{"name":"upper"}}],[5,"lower","","Parses an lowercase letter",null,{"inputs":[],"output":{"name":"lower"}}],[5,"alpha_num","","Parses either an alphabet letter or digit",null,{"inputs":[],"output":{"name":"alphanum"}}],[5,"letter","","Parses an alphabet letter",null,{"inputs":[],"output":{"name":"letter"}}],[5,"oct_digit","","Parses an octal digit",null,{"inputs":[],"output":{"name":"octdigit"}}],[5,"hex_digit","","Parses a hexdecimal digit with uppercase and lowercase",null,{"inputs":[],"output":{"name":"hexdigit"}}],[5,"string","","Parses the string `s`",null,{"inputs":[{"name":"str"}],"output":{"name":"str"}}],[11,"clone","","",69,null],[11,"parse_lazy","","",69,null],[11,"add_error","","",69,null],[11,"clone","","",70,null],[11,"parse_lazy","","",70,null],[11,"add_error","","",70,null],[11,"clone","","",71,null],[11,"parse_lazy","","",71,null],[11,"add_error","","",71,null],[11,"clone","","",72,null],[11,"parse_lazy","","",72,null],[11,"add_error","","",72,null],[11,"clone","","",73,null],[11,"parse_lazy","","",73,null],[11,"add_error","","",73,null],[11,"clone","","",74,null],[11,"parse_lazy","","",74,null],[11,"add_error","","",74,null],[11,"clone","","",75,null],[11,"parse_lazy","","",75,null],[11,"add_error","","",75,null],[11,"clone","","",76,null],[11,"parse_lazy","","",76,null],[11,"add_error","","",76,null],[11,"clone","","",77,null],[11,"parse_lazy","","",77,null],[11,"add_error","","",77,null],[11,"clone","","",78,null],[11,"parse_lazy","","",78,null],[11,"add_error","","",78,null],[11,"clone","","",79,null],[11,"parse_lazy","","",79,null],[11,"add_error","","",79,null],[11,"clone","","",80,null],[11,"parse_lazy","","",80,null],[11,"add_error","","",80,null],[11,"clone","","",81,null],[11,"parse_lazy","","",81,null],[11,"add_error","","",81,null],[6,"ConsumedResult","combine","A `Result` type which has the consumed status flattened into the result.\nConversions to and from `std::result::Result` can be done using `result.into()` or\n`From::from(result)`",null,null],[6,"ParseResult","","A type alias over the specific `Result` type used by parsers to indicate wether they were\nsuccessful or not.\n`O` is the type that is output on success\n`I` is the specific stream type used in the parser",null,null],[8,"Parser","","By implementing the `Parser` trait a type says that it can be used to parse an input stream into\nthe type `Output`.",null,null],[16,"Input","","The type which is take as input for the parser. The type must implement the `Stream` trait\nwhich allows the parser to read item from the type.",13,null],[16,"Output","","The type which is returned if the parser is successful.",13,null],[11,"parse","","Entrypoint of the parser\nTakes some input and tries to parse it returning a `ParseResult`",13,null],[11,"parse_stream","","Parses using the stream `input` by calling Stream::uncons one or more times\nOn success returns `Ok((value, new_state))` on failure it returns `Err(error)`",13,null],[11,"parse_stream_consumed","","Parses using the stream `input` by calling Stream::uncons one or more times\nOn success returns `Ok((value, new_state))` on failure it returns `Err(error)`",13,null],[11,"parse_lazy","","Specialized version of parse_stream where the parser does not need to add an error to the\n`ParseError` when it does not consume any input before encountering the error.\nInstead the error can be added later through the `add_error` method",13,null],[11,"add_error","","Adds the first error that would normally be returned by this parser if it failed",13,null],[11,"with","","Discards the value of the `self` parser and returns the value of `p`\nFails if any of the parsers fails",13,null],[11,"skip","","Discards the value of the `p` parser and returns the value of `self`\nFails if any of the parsers fails",13,null],[11,"and","","Parses with `self` followed by `p`\nSucceeds if both parsers succeed, otherwise fails\nReturns a tuple with both values on success",13,null],[11,"or","","Returns a parser which attempts to parse using `self`. If `self` fails without consuming any\ninput it tries to consume the same input using `p`.",13,null],[11,"then","","Parses using `self` and then passes the value to `f` which returns a parser used to parse\nthe rest of the input",13,null],[11,"map","","Uses `f` to map over the parsed value",13,null],[11,"flat_map","","Uses `f` to map over the output of `self`. If `f` returns an error the parser fails.",13,null],[11,"message","","Parses with `self` and if it fails, adds the message `msg` to the error",13,null],[11,"expected","","Parses with `self` and if it fails without consuming any input any expected errors are\nreplaced by `msg`. `msg` is then used in error messages as &quot;Expected `msg`&quot;.",13,null],[11,"and_then","","Parses with `self` and applies `f` on the result if `self` parses successfully\n`f` may optionally fail with an error which is automatically converted to a `ParseError`",13,null],[11,"iter","","Creates an iterator from a parser and a state. Can be used as an alternative to `many` when\ncollecting directly into a `FromIterator` type is not desirable",13,null],[8,"Stream","","A stream of tokens which can be duplicated",null,null],[8,"StreamOnce","","`StreamOnce` represents a sequence of items that can be extracted one by one.",null,null],[16,"Item","","The type of items which is yielded from this stream",9,null],[16,"Range","","The type of a range of items yielded from this stream.\nTypes which do not a have a way of yielding ranges of items should just use the\nSelf::Item for this type",9,null],[16,"Position","","Type which represents the position in a stream.\nOrd is required to allow parsers to determine which of two positions are further ahead.",9,null],[10,"uncons","","Takes a stream and removes its first item, yielding the item and the rest of the elements\nReturns `Err` if no element could be retrieved",9,null],[10,"position","","Returns the current position of the stream",9,null],[14,"ctry!","","",null,null]],"paths":[[3,"ParseError"],[3,"State"],[3,"SourcePosition"],[3,"BytePosition"],[3,"SliceStream"],[4,"Info"],[4,"Error"],[4,"Consumed"],[4,"FastResult"],[8,"StreamOnce"],[8,"RangeStream"],[8,"Range"],[8,"Positioner"],[8,"Parser"],[3,"IteratorStream"],[6,"ConsumedResult"],[3,"BufferedStream"],[3,"SharedBufferedStream"],[3,"Any"],[3,"Satisfy"],[3,"SatisfyMap"],[3,"Token"],[3,"Choice"],[3,"Unexpected"],[3,"Value"],[3,"NotFollowedBy"],[3,"Eof"],[3,"Iter"],[3,"Many"],[3,"Many1"],[3,"SkipMany"],[3,"SkipMany1"],[3,"SepBy"],[3,"SepBy1"],[3,"SepEndBy"],[3,"SepEndBy1"],[3,"FnParser"],[3,"Optional"],[3,"Between"],[3,"Chainl1"],[3,"Chainr1"],[3,"Try"],[3,"LookAhead"],[3,"With"],[3,"Skip"],[3,"Message"],[3,"Or"],[3,"Map"],[3,"FlatMap"],[3,"Then"],[3,"Expected"],[3,"AndThen"],[3,"EnvParser"],[3,"Range"],[3,"Take"],[3,"TakeWhile"],[3,"TakeWhile1"],[3,"Digit"],[3,"Space"],[3,"Spaces"],[3,"Newline"],[3,"CrLf"],[3,"Tab"],[3,"Upper"],[3,"Lower"],[3,"AlphaNum"],[3,"Letter"],[3,"HexDigit"],[3,"Bytes"],[3,"Digit"],[3,"Space"],[3,"Spaces"],[3,"Newline"],[3,"CrLf"],[3,"Tab"],[3,"Upper"],[3,"Lower"],[3,"AlphaNum"],[3,"Letter"],[3,"OctDigit"],[3,"HexDigit"],[3,"Str"]]};
searchIndex["vec_map"] = {"doc":"A simple map based on a vector for small integer keys. Space requirements\nare O(highest integer key).","items":[[3,"VecMap","vec_map","A map optimized for small integer keys.",null,null],[3,"VacantEntry","","A vacant Entry.",null,null],[3,"OccupiedEntry","","An occupied Entry.",null,null],[3,"Iter","","An iterator over the key-value pairs of a map.",null,null],[3,"IterMut","","An iterator over the key-value pairs of a map, with the\nvalues being mutable.",null,null],[3,"Keys","","An iterator over the keys of a map.",null,null],[3,"Values","","An iterator over the values of a map.",null,null],[3,"IntoIter","","A consuming iterator over the key-value pairs of a map.",null,null],[3,"Drain","","A draining iterator over the key-value pairs of a map.",null,null],[4,"Entry","","A view into a single entry in a map, which may either be vacant or occupied.",null,null],[13,"Vacant","","A vacant Entry",0,null],[13,"Occupied","","An occupied Entry",0,null],[11,"clone","","",1,null],[11,"default","","",1,{"inputs":[],"output":{"name":"self"}}],[11,"hash","","",1,null],[11,"new","","Creates an empty `VecMap`.",1,{"inputs":[],"output":{"name":"self"}}],[11,"with_capacity","","Creates an empty `VecMap` with space for at least `capacity`\nelements before resizing.",1,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"capacity","","Returns the number of elements the `VecMap` can hold without\nreallocating.",1,null],[11,"reserve_len","","Reserves capacity for the given `VecMap` to contain `len` distinct keys.\nIn the case of `VecMap` this means reallocations will not occur as long\nas all inserted keys are less than `len`.",1,null],[11,"reserve_len_exact","","Reserves the minimum capacity for the given `VecMap` to contain `len` distinct keys.\nIn the case of `VecMap` this means reallocations will not occur as long as all inserted\nkeys are less than `len`.",1,null],[11,"keys","","Returns an iterator visiting all keys in ascending order of the keys.\nThe iterator&#39;s element type is `usize`.",1,null],[11,"values","","Returns an iterator visiting all values in ascending order of the keys.\nThe iterator&#39;s element type is `&amp;&#39;r V`.",1,null],[11,"iter","","Returns an iterator visiting all key-value pairs in ascending order of the keys.\nThe iterator&#39;s element type is `(usize, &amp;&#39;r V)`.",1,null],[11,"iter_mut","","Returns an iterator visiting all key-value pairs in ascending order of the keys,\nwith mutable references to the values.\nThe iterator&#39;s element type is `(usize, &amp;&#39;r mut V)`.",1,null],[11,"append","","Moves all elements from `other` into the map while overwriting existing keys.",1,null],[11,"split_off","","Splits the collection into two at the given key.",1,null],[11,"drain","","Returns an iterator visiting all key-value pairs in ascending order of\nthe keys, emptying (but not consuming) the original `VecMap`.\nThe iterator&#39;s element type is `(usize, &amp;&#39;r V)`. Keeps the allocated memory for reuse.",1,null],[11,"len","","Returns the number of elements in the map.",1,null],[11,"is_empty","","Returns true if the map contains no elements.",1,null],[11,"clear","","Clears the map, removing all key-value pairs.",1,null],[11,"get","","Returns a reference to the value corresponding to the key.",1,null],[11,"contains_key","","Returns true if the map contains a value for the specified key.",1,null],[11,"get_mut","","Returns a mutable reference to the value corresponding to the key.",1,null],[11,"insert","","Inserts a key-value pair into the map. If the key already had a value\npresent in the map, that value is returned. Otherwise, `None` is returned.",1,null],[11,"remove","","Removes a key from the map, returning the value at the key if the key\nwas previously in the map.",1,null],[11,"entry","","Gets the given key&#39;s corresponding entry in the map for in-place manipulation.",1,null],[11,"or_insert","","Ensures a value is in the entry by inserting the default if empty, and\nreturns a mutable reference to the value in the entry.",0,null],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result of the default\nfunction if empty, and returns a mutable reference to the value in the\nentry.",0,null],[11,"insert","","Sets the value of the entry with the VacantEntry&#39;s key,\nand returns a mutable reference to it.",2,null],[11,"get","","Gets a reference to the value in the entry.",3,null],[11,"get_mut","","Gets a mutable reference to the value in the entry.",3,null],[11,"into_mut","","Converts the entry into a mutable reference to its value.",3,null],[11,"insert","","Sets the value of the entry with the OccupiedEntry&#39;s key,\nand returns the entry&#39;s old value.",3,null],[11,"remove","","Takes the value of the entry out of the map, and returns it.",3,null],[11,"eq","","",1,null],[11,"partial_cmp","","",1,null],[11,"cmp","","",1,null],[11,"fmt","","",1,null],[11,"from_iter","","",1,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"into_iter","","Returns an iterator visiting all key-value pairs in ascending order of\nthe keys, consuming the original `VecMap`.\nThe iterator&#39;s element type is `(usize, &amp;&#39;r V)`.",1,null],[11,"extend","","",1,null],[11,"extend","","",1,null],[11,"index","","",1,null],[11,"index","","",1,null],[11,"index_mut","","",1,null],[11,"index_mut","","",1,null],[11,"clone","","",4,null],[11,"next","","",4,null],[11,"size_hint","","",4,null],[11,"next_back","","",4,null],[11,"next","","",5,null],[11,"size_hint","","",5,null],[11,"next_back","","",5,null],[11,"clone","","",6,null],[11,"clone","","",7,null],[11,"next","","",8,null],[11,"size_hint","","",8,null],[11,"next_back","","",8,null],[11,"next","","",6,null],[11,"size_hint","","",6,null],[11,"next_back","","",6,null],[11,"next","","",7,null],[11,"size_hint","","",7,null],[11,"next_back","","",7,null],[11,"next","","",9,null],[11,"size_hint","","",9,null],[11,"next_back","","",9,null]],"paths":[[4,"Entry"],[3,"VecMap"],[3,"VacantEntry"],[3,"OccupiedEntry"],[3,"Iter"],[3,"IterMut"],[3,"Keys"],[3,"Values"],[3,"Drain"],[3,"IntoIter"]]};
searchIndex["strsim"] = {"doc":"This library implements string similarity metrics. Includes Hamming,\nLevenshtein, Jaro, and Jaro-Winkler.","items":[[4,"StrSimError","strsim","",null,null],[13,"DifferentLengthArgs","","",0,null],[5,"hamming","","Calculates the number of positions in the two strings where the characters\ndiffer. Returns an error if the strings have different lengths.",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"hammingresult"}}],[5,"jaro","","Calculates the Jaro similarity between two strings. The returned value\nis between 0.0 and 1.0 (higher value means more similar).",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"f64"}}],[5,"jaro_against_vec","","Calculates the Jaro distance between a string and each string in a vector.\nReturns a vector of corresponding values between 0.0 and 1.0 (higher value\nmeans more similar).",null,{"inputs":[{"name":"str"},{"name":"vec"}],"output":{"name":"vec"}}],[5,"jaro_winkler","","Like Jaro but gives a boost to strings that have a common prefix.",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"f64"}}],[5,"jaro_winkler_against_vec","","Calculates the Jaro-Winkler distances between a string and each string\nin a vector. Returns a vector of corresponding values.",null,{"inputs":[{"name":"str"},{"name":"vec"}],"output":{"name":"vec"}}],[5,"levenshtein","","Calculates the minimum number of insertions, deletions, and substitutions\nrequired to change one string into the other.",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"usize"}}],[5,"levenshtein_against_vec","","Calculates the Levenshtein distance between a string and each string in a\nvector. Returns a vector of corresponding values.",null,{"inputs":[{"name":"str"},{"name":"vec"}],"output":{"name":"vec"}}],[5,"damerau_levenshtein","","Same as Levenshtein but allows for adjacent transpositions.",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"usize"}}],[5,"damerau_levenshtein_against_vec","","Calculates the Damerau-Levenshtein distance between a string and each string\nin a vector. Returns a vector of corresponding values.",null,{"inputs":[{"name":"str"},{"name":"vec"}],"output":{"name":"vec"}}],[6,"HammingResult","","",null,null],[11,"eq","","",0,null],[11,"fmt","","",0,null]],"paths":[[4,"StrSimError"]]};
searchIndex["aho_corasick"] = {"doc":"An implementation of the\n[Aho-Corasick string search algorithm](https://en.wikipedia.org/wiki/Aho%E2%80%93Corasick_string_matching_algorithm).","items":[[3,"Match","aho_corasick","Records a match in the search text.",null,null],[12,"pati","","The pattern index.",0,null],[12,"start","","The starting byte offset of the match in the search text.",0,null],[12,"end","","The ending byte offset of the match in the search text.",0,null],[3,"Matches","","An iterator of non-overlapping matches for in-memory text.",null,null],[3,"MatchesOverlapping","","An iterator of overlapping matches for in-memory text.",null,null],[3,"StreamMatches","","An iterator of non-overlapping matches for streaming text.",null,null],[3,"StreamMatchesOverlapping","","An iterator of overlapping matches for streaming text.",null,null],[3,"FullAcAutomaton","","A complete Aho-Corasick automaton.",null,null],[3,"AcAutomaton","","An Aho-Corasick finite automaton.",null,null],[3,"Dense","","State transitions that can be stored either sparsely or densely.",null,null],[3,"Sparse","","State transitions that are always sparse.",null,null],[11,"eq","","",0,null],[11,"ne","","",0,null],[11,"hash","","",0,null],[11,"fmt","","",0,null],[11,"clone","","",0,null],[11,"fmt","","",1,null],[11,"next","","",1,null],[11,"fmt","","",2,null],[11,"next","","",2,null],[11,"fmt","","",3,null],[11,"next","","",3,null],[11,"fmt","","",4,null],[11,"next","","",4,null],[11,"clone","","",5,null],[11,"new","","Build a new expanded Aho-Corasick automaton from an existing\nAho-Corasick automaton.",5,{"inputs":[{"name":"acautomaton"}],"output":{"name":"fullacautomaton"}}],[11,"next_state","","",5,null],[11,"get_match","","",5,null],[11,"has_match","","",5,null],[11,"start_bytes","","",5,null],[11,"patterns","","",5,null],[11,"pattern","","",5,null],[11,"fmt","","",5,null],[6,"StateIdx","","The integer type used for the state index.",null,null],[8,"Automaton","","An abstraction over automatons and their corresponding iterators.\nThe type parameter `P` is the type of the pattern that was used to\nconstruct this Automaton.",null,null],[10,"next_state","","Return the next state given the current state and next character.",6,null],[10,"has_match","","Return true if and only if the given state and current pattern index\nindicate a match.",6,null],[10,"get_match","","Build a match given the current state, pattern index and input index.",6,null],[10,"start_bytes","","Return the set of bytes that have transitions in the root state.",6,null],[10,"patterns","","Returns all of the patterns matched by this automaton.",6,null],[10,"pattern","","Returns the pattern indexed at `i`.",6,null],[11,"len","","Return the number of patterns in the automaton.",6,null],[11,"is_empty","","Returns true if the automaton has no patterns.",6,null],[11,"find","","Returns an iterator of non-overlapping matches in `s`.",6,null],[11,"find_overlapping","","Returns an iterator of overlapping matches in `s`.",6,null],[11,"stream_find","","Returns an iterator of non-overlapping matches in the given reader.",6,null],[11,"stream_find_overlapping","","Returns an iterator of overlapping matches in the given reader.",6,null],[8,"Transitions","","An abstraction over state transition strategies.",null,null],[10,"new","","Return a new state at the given depth.",7,{"inputs":[{"name":"u32"}],"output":{"name":"self"}}],[10,"goto","","Return the next state index given the next character.",7,null],[10,"set_goto","","Set the next state index for the character given.",7,null],[10,"heap_bytes","","The memory use in bytes (on the heap) of this set of transitions.",7,null],[11,"clone","","",8,null],[11,"new","","Create a new automaton from an iterator of patterns.",8,{"inputs":[{"name":"i"}],"output":{"name":"acautomaton"}}],[11,"with_transitions","","Create a new automaton from an iterator of patterns.",8,{"inputs":[{"name":"i"}],"output":{"name":"acautomaton"}}],[11,"into_full","","Build out the entire automaton into a single matrix.",8,null],[11,"next_state","","",8,null],[11,"get_match","","",8,null],[11,"has_match","","",8,null],[11,"start_bytes","","",8,null],[11,"patterns","","",8,null],[11,"pattern","","",8,null],[11,"fmt","","",9,null],[11,"clone","","",9,null],[11,"new","","",9,{"inputs":[{"name":"u32"}],"output":{"name":"dense"}}],[11,"goto","","",9,null],[11,"set_goto","","",9,null],[11,"heap_bytes","","",9,null],[11,"fmt","","",10,null],[11,"clone","","",10,null],[11,"new","","",10,{"inputs":[{"name":"u32"}],"output":{"name":"sparse"}}],[11,"goto","","",10,null],[11,"set_goto","","",10,null],[11,"heap_bytes","","",10,null],[11,"from_iter","","Create an automaton from an iterator of strings.",8,{"inputs":[{"name":"t"}],"output":{"name":"acautomaton"}}],[11,"fmt","","",8,null],[11,"len","","Return the number of patterns in the automaton.",6,null],[11,"is_empty","","Returns true if the automaton has no patterns.",6,null],[11,"find","","Returns an iterator of non-overlapping matches in `s`.",6,null],[11,"find_overlapping","","Returns an iterator of overlapping matches in `s`.",6,null],[11,"stream_find","","Returns an iterator of non-overlapping matches in the given reader.",6,null],[11,"stream_find_overlapping","","Returns an iterator of overlapping matches in the given reader.",6,null]],"paths":[[3,"Match"],[3,"Matches"],[3,"StreamMatches"],[3,"MatchesOverlapping"],[3,"StreamMatchesOverlapping"],[3,"FullAcAutomaton"],[8,"Automaton"],[8,"Transitions"],[3,"AcAutomaton"],[3,"Dense"],[3,"Sparse"]]};
searchIndex["memchr"] = {"doc":"This crate defines two functions, `memchr` and `memrchr`, which expose a safe interface\nto the corresponding functions in `libc`.","items":[[5,"memchr","memchr","A safe interface to `memchr`.",null,null],[5,"memrchr","","A safe interface to `memrchr`.",null,null],[5,"memchr2","","Like `memchr`, but searches for two bytes instead of one.",null,null],[5,"memchr3","","Like `memchr`, but searches for three bytes instead of one.",null,null]],"paths":[]};
searchIndex["thread_local"] = {"doc":"Per-object thread-local storage","items":[[3,"ThreadLocal","thread_local","Thread-local variable wrapper",null,null],[3,"IterMut","","Mutable iterator over the contents of a `ThreadLocal`.",null,null],[3,"IntoIter","","An iterator that moves out of a `ThreadLocal`.",null,null],[3,"CachedThreadLocal","","Wrapper around `ThreadLocal` which adds a fast path for a single thread.",null,null],[6,"CachedIterMut","","Mutable iterator over the contents of a `CachedThreadLocal`.",null,null],[6,"CachedIntoIter","","An iterator that moves out of a `CachedThreadLocal`.",null,null],[11,"default","","",0,{"inputs":[],"output":{"name":"threadlocal"}}],[11,"drop","","",0,null],[11,"new","","Creates a new empty `ThreadLocal`.",0,{"inputs":[],"output":{"name":"threadlocal"}}],[11,"get","","Returns the element for the current thread, if it exists.",0,null],[11,"get_or","","Returns the element for the current thread, or creates it if it doesn&#39;t\nexist.",0,null],[11,"get_or_try","","Returns the element for the current thread, or creates it if it doesn&#39;t\nexist. If `create` fails, that error is returned and no element is\nadded.",0,null],[11,"iter_mut","","Returns a mutable iterator over the local values of all threads.",0,null],[11,"clear","","Removes all thread-specific values from the `ThreadLocal`, effectively\nreseting it to its original state.",0,null],[11,"into_iter","","",0,null],[11,"get_default","","Returns the element for the current thread, or creates a default one if\nit doesn&#39;t exist.",0,null],[11,"fmt","","",0,null],[11,"next","","",1,null],[11,"size_hint","","",1,null],[11,"next","","",2,null],[11,"size_hint","","",2,null],[11,"default","","",3,{"inputs":[],"output":{"name":"cachedthreadlocal"}}],[11,"new","","Creates a new empty `CachedThreadLocal`.",3,{"inputs":[],"output":{"name":"cachedthreadlocal"}}],[11,"get","","Returns the element for the current thread, if it exists.",3,null],[11,"get_or","","Returns the element for the current thread, or creates it if it doesn&#39;t\nexist.",3,null],[11,"get_or_try","","Returns the element for the current thread, or creates it if it doesn&#39;t\nexist. If `create` fails, that error is returned and no element is\nadded.",3,null],[11,"iter_mut","","Returns a mutable iterator over the local values of all threads.",3,null],[11,"clear","","Removes all thread-specific values from the `ThreadLocal`, effectively\nreseting it to its original state.",3,null],[11,"into_iter","","",3,null],[11,"get_default","","Returns the element for the current thread, or creates a default one if\nit doesn&#39;t exist.",3,null],[11,"fmt","","",3,null]],"paths":[[3,"ThreadLocal"],[3,"IterMut"],[3,"IntoIter"],[3,"CachedThreadLocal"]]};
searchIndex["thread_id"] = {"doc":"Thread-ID: get a unique ID for the current thread.","items":[[5,"get","thread_id","Returns a number that is unique to the calling thread.",null,{"inputs":[],"output":{"name":"usize"}}]],"paths":[]};
searchIndex["ascii"] = {"doc":"A library that provides ASCII-only string and character types, equivalent to the `char`, `str` and\n`String` types in the standard library.","items":[[3,"ToAsciiCharError","ascii","Error returned by `ToAsciiChar`.",null,null],[3,"AsciiStr","","AsciiStr represents a byte or string slice that only contains ASCII characters.",null,null],[3,"AsAsciiStrError","","Error that is returned when a sequence of `u8` are not all ASCII.",null,null],[3,"AsciiString","","A growable string stored as an ASCII encoded buffer.",null,null],[4,"AsciiChar","","An ASCII character. It wraps a `u8`, with the highest bit always zero.",null,null],[13,"Null","","`&#39;\\0&#39;`",0,null],[13,"SOH","","[Start Of Heading](http://en.wikipedia.org/wiki/Start_of_Heading)",0,null],[13,"SOX","","[Start Of teXt](http://en.wikipedia.org/wiki/Start_of_Text)",0,null],[13,"ETX","","[End of TeXt](http://en.wikipedia.org/wiki/End-of-Text_character)",0,null],[13,"EOT","","[End Of Transmission](http://en.wikipedia.org/wiki/End-of-Transmission_character)",0,null],[13,"ENQ","","[Enquiry](http://en.wikipedia.org/wiki/Enquiry_character)",0,null],[13,"ACK","","[Acknowledgement](http://en.wikipedia.org/wiki/Acknowledge_character)",0,null],[13,"Bell","","[bell / alarm / audible](http://en.wikipedia.org/wiki/Bell_character)",0,null],[13,"BackSpace","","[Backspace](http://en.wikipedia.org/wiki/Backspace)",0,null],[13,"Tab","","`&#39;\\t&#39;`",0,null],[13,"LineFeed","","`&#39;\\n&#39;`",0,null],[13,"VT","","[Vertical tab](http://en.wikipedia.org/wiki/Vertical_Tab)",0,null],[13,"FF","","[Form Feed](http://en.wikipedia.org/wiki/Form_Feed)",0,null],[13,"CarriageReturn","","`&#39;\\r&#39;`",0,null],[13,"SI","","[Shift In](http://en.wikipedia.org/wiki/Shift_Out_and_Shift_In_characters)",0,null],[13,"SO","","[Shift Out](http://en.wikipedia.org/wiki/Shift_Out_and_Shift_In_characters)",0,null],[13,"DLE","","[Data Link Escape](http://en.wikipedia.org/wiki/Data_Link_Escape)",0,null],[13,"DC1","","[Device control 1, often XON](http://en.wikipedia.org/wiki/Device_Control_1)",0,null],[13,"DC2","","Device control 2",0,null],[13,"DC3","","Device control 3, Often XOFF",0,null],[13,"DC4","","Device control 4",0,null],[13,"NAK","","[Negative AcKnowledgement](http://en.wikipedia.org/wiki/Negative-acknowledge_character)",0,null],[13,"SYN","","[Synchronous idle](http://en.wikipedia.org/wiki/Synchronous_Idle)",0,null],[13,"ETB","","[End of Transmission Block](http://en.wikipedia.org/wiki/End-of-Transmission-Block_character)",0,null],[13,"CAN","","[Cancel](http://en.wikipedia.org/wiki/Cancel_character)",0,null],[13,"EM","","[End of Medium](http://en.wikipedia.org/wiki/End_of_Medium)",0,null],[13,"SUB","","[Substitute](http://en.wikipedia.org/wiki/Substitute_character)",0,null],[13,"ESC","","[Escape](http://en.wikipedia.org/wiki/Escape_character)",0,null],[13,"FS","","[File Separator](http://en.wikipedia.org/wiki/File_separator)",0,null],[13,"GS","","[Group Separator](http://en.wikipedia.org/wiki/Group_separator)",0,null],[13,"RS","","[Record Separator](http://en.wikipedia.org/wiki/Record_separator)",0,null],[13,"US","","[Unit Separator](http://en.wikipedia.org/wiki/Unit_separator)",0,null],[13,"Space","","`&#39; &#39;`",0,null],[13,"Exclamation","","`&#39;!&#39;`",0,null],[13,"Quotation","","`&#39;&quot;&#39;`",0,null],[13,"Hash","","`&#39;#&#39;`",0,null],[13,"Dollar","","`&#39;$&#39;`",0,null],[13,"Percent","","`&#39;%&#39;`",0,null],[13,"Ampersand","","`&#39;&amp;&#39;`",0,null],[13,"Apostrophe","","`&#39;\\&#39;&#39;`",0,null],[13,"ParenOpen","","`&#39;(&#39;`",0,null],[13,"ParenClose","","`&#39;)&#39;`",0,null],[13,"Asterisk","","`&#39;*&#39;`",0,null],[13,"Plus","","`&#39;+&#39;`",0,null],[13,"Comma","","`&#39;,&#39;`",0,null],[13,"Minus","","`&#39;-&#39;`",0,null],[13,"Dot","","`&#39;.&#39;`",0,null],[13,"Slash","","`&#39;/&#39;`",0,null],[13,"_0","","`&#39;0&#39;`",0,null],[13,"_1","","`&#39;1&#39;`",0,null],[13,"_2","","`&#39;2&#39;`",0,null],[13,"_3","","`&#39;3&#39;`",0,null],[13,"_4","","`&#39;4&#39;`",0,null],[13,"_5","","`&#39;5&#39;`",0,null],[13,"_6","","`&#39;6&#39;`",0,null],[13,"_7","","`&#39;7&#39;`",0,null],[13,"_8","","`&#39;8&#39;`",0,null],[13,"_9","","`&#39;9&#39;`",0,null],[13,"Colon","","`&#39;:&#39;`",0,null],[13,"Semicolon","","`&#39;;&#39;`",0,null],[13,"LessThan","","`&#39;&lt;&#39;`",0,null],[13,"Equal","","`&#39;=&#39;`",0,null],[13,"GreaterThan","","`&#39;&gt;&#39;`",0,null],[13,"Question","","`&#39;?&#39;`",0,null],[13,"At","","`&#39;@&#39;`",0,null],[13,"A","","`&#39;A&#39;`",0,null],[13,"B","","`&#39;B&#39;`",0,null],[13,"C","","`&#39;C&#39;`",0,null],[13,"D","","`&#39;D&#39;`",0,null],[13,"E","","`&#39;E&#39;`",0,null],[13,"F","","`&#39;F&#39;`",0,null],[13,"G","","`&#39;G&#39;`",0,null],[13,"H","","`&#39;H&#39;`",0,null],[13,"I","","`&#39;I&#39;`",0,null],[13,"J","","`&#39;J&#39;`",0,null],[13,"K","","`&#39;K&#39;`",0,null],[13,"L","","`&#39;L&#39;`",0,null],[13,"M","","`&#39;M&#39;`",0,null],[13,"N","","`&#39;N&#39;`",0,null],[13,"O","","`&#39;O&#39;`",0,null],[13,"P","","`&#39;P&#39;`",0,null],[13,"Q","","`&#39;Q&#39;`",0,null],[13,"R","","`&#39;R&#39;`",0,null],[13,"S","","`&#39;S&#39;`",0,null],[13,"T","","`&#39;T&#39;`",0,null],[13,"U","","`&#39;U&#39;`",0,null],[13,"V","","`&#39;V&#39;`",0,null],[13,"W","","`&#39;W&#39;`",0,null],[13,"X","","`&#39;X&#39;`",0,null],[13,"Y","","`&#39;Y&#39;`",0,null],[13,"Z","","`&#39;Z&#39;`",0,null],[13,"BracketOpen","","`&#39;[&#39;`",0,null],[13,"BackSlash","","`&#39;\\&#39;`",0,null],[13,"BracketClose","","`&#39;]&#39;`",0,null],[13,"Caret","","`&#39;_&#39;`",0,null],[13,"UnderScore","","`&#39;_&#39;`",0,null],[13,"Grave","","`&#39;`&#39;`",0,null],[13,"a","","`&#39;a&#39;`",0,null],[13,"b","","`&#39;b&#39;`",0,null],[13,"c","","`&#39;c&#39;`",0,null],[13,"d","","`&#39;d&#39;`",0,null],[13,"e","","`&#39;e&#39;`",0,null],[13,"f","","`&#39;f&#39;`",0,null],[13,"g","","`&#39;g&#39;`",0,null],[13,"h","","`&#39;h&#39;`",0,null],[13,"i","","`&#39;i&#39;`",0,null],[13,"j","","`&#39;j&#39;`",0,null],[13,"k","","`&#39;k&#39;`",0,null],[13,"l","","`&#39;l&#39;`",0,null],[13,"m","","`&#39;m&#39;`",0,null],[13,"n","","`&#39;n&#39;`",0,null],[13,"o","","`&#39;o&#39;`",0,null],[13,"p","","`&#39;p&#39;`",0,null],[13,"q","","`&#39;q&#39;`",0,null],[13,"r","","`&#39;r&#39;`",0,null],[13,"s","","`&#39;s&#39;`",0,null],[13,"t","","`&#39;t&#39;`",0,null],[13,"u","","`&#39;u&#39;`",0,null],[13,"v","","`&#39;v&#39;`",0,null],[13,"w","","`&#39;w&#39;`",0,null],[13,"x","","`&#39;x&#39;`",0,null],[13,"y","","`&#39;y&#39;`",0,null],[13,"z","","`&#39;z&#39;`",0,null],[13,"CurlyBraceOpen","","`&#39;{&#39;`",0,null],[13,"VerticalBar","","`&#39;|&#39;`",0,null],[13,"CurlyBraceClose","","`&#39;}&#39;`",0,null],[13,"Tilde","","`&#39;~&#39;`",0,null],[13,"DEL","","[Delete](http://en.wikipedia.org/wiki/Delete_character)",0,null],[11,"hash","","",0,null],[11,"cmp","","",0,null],[11,"partial_cmp","","",0,null],[11,"eq","","",0,null],[11,"clone","","",0,null],[11,"from","","Constructs an ASCII character from a `u8`, `char` or other character type.",0,{"inputs":[{"name":"c"}],"output":{"name":"result"}}],[11,"from_unchecked","","Constructs an ASCII character from a `char` or `u8` without any checks.",0,{"inputs":[{"name":"c"}],"output":{"name":"self"}}],[11,"as_byte","","Converts an ASCII character into a `u8`.",0,null],[11,"as_char","","Converts an ASCII character into a `char`.",0,null],[11,"is_alphabetic","","Check if the character is a letter (a-z, A-Z)",0,null],[11,"is_digit","","Check if the character is a number (0-9)",0,null],[11,"is_alphanumeric","","Check if the character is a letter or number",0,null],[11,"is_blank","","Check if the character is a space or horizontal tab",0,null],[11,"is_whitespace","","Check if the character is a &#39; &#39;, &#39;\\t&#39;, &#39;\\n&#39; or &#39;\\r&#39;",0,null],[11,"is_control","","Check if the character is a control character",0,null],[11,"is_graph","","Checks if the character is printable (except space)",0,null],[11,"is_print","","Checks if the character is printable (including space)",0,null],[11,"is_lowercase","","Checks if the character is alphabetic and lowercase",0,null],[11,"is_uppercase","","Checks if the character is alphabetic and uppercase",0,null],[11,"is_punctuation","","Checks if the character is punctuation",0,null],[11,"is_hex","","Checks if the character is a valid hex digit",0,null],[11,"fmt","","",0,null],[11,"fmt","","",0,null],[11,"is_ascii","","",0,null],[11,"to_ascii_uppercase","","",0,null],[11,"to_ascii_lowercase","","",0,null],[11,"eq_ignore_ascii_case","","",0,null],[11,"make_ascii_uppercase","","",0,null],[11,"make_ascii_lowercase","","",0,null],[11,"eq","","",1,null],[11,"ne","","",1,null],[11,"fmt","","",1,null],[11,"fmt","","",1,null],[11,"description","","",1,null],[11,"to_ascii_char","","",0,null],[11,"to_ascii_char_unchecked","","",0,null],[11,"hash","","",2,null],[11,"cmp","","",2,null],[11,"partial_cmp","","",2,null],[11,"lt","","",2,null],[11,"le","","",2,null],[11,"gt","","",2,null],[11,"ge","","",2,null],[11,"eq","","",2,null],[11,"ne","","",2,null],[11,"new","","Coerces into an `AsciiStr` slice.",2,{"inputs":[{"name":"s"}],"output":{"name":"asciistr"}}],[11,"as_str","","Converts `&amp;self` to a `&amp;str` slice.",2,null],[11,"as_bytes","","Converts `&amp;self` into a byte slice.",2,null],[11,"as_slice","","Returns the entire string as slice of `AsciiChar`s.",2,null],[11,"as_mut_slice","","Returns the entire string as mutable slice of `AsciiChar`s.",2,null],[11,"as_ptr","","Returns a raw pointer to the `AsciiStr`&#39;s buffer.",2,null],[11,"as_mut_ptr","","Returns an unsafe mutable pointer to the `AsciiStr`&#39;s buffer.",2,null],[11,"to_ascii_string","","Copies the content of this `AsciiStr` into an owned `AsciiString`.",2,null],[11,"from_ascii","","Converts anything that can represent a byte slice into an `AsciiStr`.",2,{"inputs":[{"name":"b"}],"output":{"name":"result"}}],[11,"from_ascii_unchecked","","Converts anything that can be represented as a byte slice to an `AsciiStr` without checking\nfor non-ASCII characters..",2,{"inputs":[{"name":"b"}],"output":{"name":"asciistr"}}],[11,"len","","Returns the number of characters / bytes in this ASCII sequence.",2,null],[11,"is_empty","","Returns true if the ASCII slice contains zero bytes.",2,null],[11,"trim","","Returns an ASCII string slice with leading and trailing whitespace removed.",2,null],[11,"trim_left","","Returns an ASCII string slice with leading whitespace removed.",2,null],[11,"trim_right","","Returns an ASCII string slice with trailing whitespace removed.",2,null],[11,"eq","","",2,null],[11,"to_owned","","",2,null],[11,"as_ref","","",2,null],[11,"as_ref","","",2,null],[11,"as_ref","","",2,null],[11,"as_mut","","",2,null],[11,"fmt","","",2,null],[11,"fmt","","",2,null],[11,"index","","",2,null],[11,"index_mut","","",2,null],[11,"index","","",2,null],[11,"index_mut","","",2,null],[11,"index","","",2,null],[11,"index_mut","","",2,null],[11,"index","","",2,null],[11,"index_mut","","",2,null],[11,"index","","",2,null],[11,"index_mut","","",2,null],[11,"is_ascii","","",2,null],[11,"to_ascii_uppercase","","",2,null],[11,"to_ascii_lowercase","","",2,null],[11,"eq_ignore_ascii_case","","",2,null],[11,"make_ascii_uppercase","","",2,null],[11,"make_ascii_lowercase","","",2,null],[11,"fmt","","",3,null],[11,"eq","","",3,null],[11,"ne","","",3,null],[11,"clone","","",3,null],[11,"valid_up_to","","Returns the index of the first non-ASCII byte.",3,null],[11,"fmt","","",3,null],[11,"description","","Returns &quot;one or more bytes are not ASCII&quot;",3,null],[11,"as_ascii_str","","",2,null],[11,"as_ascii_str_unchecked","","",2,null],[11,"as_mut_ascii_str","","",2,null],[11,"as_mut_ascii_str_unchecked","","",2,null],[11,"hash","","",4,null],[11,"cmp","","",4,null],[11,"partial_cmp","","",4,null],[11,"lt","","",4,null],[11,"le","","",4,null],[11,"gt","","",4,null],[11,"ge","","",4,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"default","","",4,{"inputs":[],"output":{"name":"asciistring"}}],[11,"clone","","",4,null],[11,"new","","Creates a new, empty ASCII string buffer without allocating.",4,{"inputs":[],"output":{"name":"self"}}],[11,"with_capacity","","Creates a new ASCII string buffer with the given capacity.\nThe string will be able to hold exactly `capacity` bytes without reallocating.\nIf `capacity` is 0, the ASCII string will not allocate.",4,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"from_raw_parts","","Creates a new `AsciiString` from a length, capacity and pointer.",4,null],[11,"from_ascii_unchecked","","Converts a vector of bytes to an `AsciiString` without checking for non-ASCII characters.",4,{"inputs":[{"name":"b"}],"output":{"name":"self"}}],[11,"from_ascii","","Converts anything that can represent a byte buffer into an `AsciiString`.",4,{"inputs":[{"name":"b"}],"output":{"name":"result"}}],[11,"push_str","","Pushes the given ASCII string onto this ASCII string buffer.",4,null],[11,"capacity","","Returns the number of bytes that this ASCII string buffer can hold without reallocating.",4,null],[11,"reserve","","Reserves capacity for at least `additional` more bytes to be inserted in the given\n`AsciiString`. The collection may reserve more space to avoid frequent reallocations.",4,null],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more bytes to be inserted in the\ngiven `AsciiString`. Does nothing if the capacity is already sufficient.",4,null],[11,"shrink_to_fit","","Shrinks the capacity of this ASCII string buffer to match it&#39;s length.",4,null],[11,"push","","Adds the given ASCII character to the end of the ASCII string.",4,null],[11,"truncate","","Shortens a ASCII string to the specified length.",4,null],[11,"pop","","Removes the last character from the ASCII string buffer and returns it.\nReturns `None` if this string buffer is empty.",4,null],[11,"remove","","Removes the ASCII character at position `idx` from the buffer and returns it.",4,null],[11,"insert","","Inserts an ASCII character into the buffer at position `idx`.",4,null],[11,"len","","Returns the number of bytes in this ASCII string.",4,null],[11,"is_empty","","Returns true if the ASCII string contains zero bytes.",4,null],[11,"clear","","Truncates the ASCII string, setting length (but not capacity) to zero.",4,null],[11,"deref","","",4,null],[11,"deref_mut","","",4,null],[11,"eq","","",4,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"borrow","","",4,null],[11,"from","","",4,{"inputs":[{"name":"vec"}],"output":{"name":"self"}}],[11,"into","","",4,null],[11,"into","","",4,null],[11,"as_ref","","",4,null],[11,"as_mut","","",4,null],[11,"from_str","","",4,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",4,null],[11,"fmt","","",4,null],[11,"from_iter","","",4,{"inputs":[{"name":"i"}],"output":{"name":"asciistring"}}],[11,"from_iter","","",4,{"inputs":[{"name":"i"}],"output":{"name":"asciistring"}}],[11,"extend","","",4,null],[11,"extend","","",4,null],[11,"extend","","",4,null],[11,"add","","",4,null],[11,"index","","",4,null],[11,"index_mut","","",4,null],[11,"into_ascii_string_unchecked","","",4,null],[11,"into_ascii_string","","",4,null],[8,"ToAsciiChar","","Convert `char`, `u8` and other character types to `AsciiChar`.",null,null],[10,"to_ascii_char_unchecked","","Convert to `AsciiChar` without checking that it is an ASCII character.",5,null],[10,"to_ascii_char","","Convert to `AsciiChar`.",5,null],[8,"AsAsciiStr","","Convert slices of bytes to `AsciiStr`.",null,null],[10,"as_ascii_str_unchecked","","Convert to an ASCII slice without checking for non-ASCII characters.",6,null],[10,"as_ascii_str","","Convert to an ASCII slice.",6,null],[8,"AsMutAsciiStr","","Convert mutable slices of bytes to `AsciiStr`.",null,null],[10,"as_mut_ascii_str_unchecked","","Convert to a mutable ASCII slice without checking for non-ASCII characters.",7,null],[10,"as_mut_ascii_str","","Convert to a mutable ASCII slice.",7,null],[8,"IntoAsciiString","","Convert vectors into `AsciiString`.",null,null],[10,"into_ascii_string_unchecked","","Convert to `AsciiString` without checking for non-ASCII characters.",8,null],[10,"into_ascii_string","","Convert to `AsciiString`.",8,null]],"paths":[[4,"AsciiChar"],[3,"ToAsciiCharError"],[3,"AsciiStr"],[3,"AsAsciiStrError"],[3,"AsciiString"],[8,"ToAsciiChar"],[8,"AsAsciiStr"],[8,"AsMutAsciiStr"],[8,"IntoAsciiString"]]};
searchIndex["utf8_ranges"] = {"doc":"Crate `utf8-ranges` converts ranges of Unicode scalar values to equivalent\nranges of UTF-8 bytes. This is useful for constructing byte based automatons\nthat need to embed UTF-8 decoding.","items":[[3,"Utf8Range","utf8_ranges","A single inclusive range of UTF-8 bytes.",null,null],[12,"start","","Start of byte range (inclusive).",0,null],[12,"end","","End of byte range (inclusive).",0,null],[3,"Utf8Sequences","","An iterator over ranges of matching UTF-8 byte sequences.",null,null],[4,"Utf8Sequence","","Utf8Sequence represents a sequence of byte ranges.",null,null],[13,"One","","One byte range.",1,null],[13,"Two","","Two successive byte ranges.",1,null],[13,"Three","","Three successive byte ranges.",1,null],[13,"Four","","Four successive byte ranges.",1,null],[11,"eq","","",1,null],[11,"ne","","",1,null],[11,"clone","","",1,null],[11,"as_slice","","Returns the underlying sequence of byte ranges as a slice.",1,null],[11,"len","","Returns the number of byte ranges in this sequence.",1,null],[11,"matches","","Returns true if and only if a prefix of `bytes` matches this sequence\nof byte ranges.",1,null],[11,"fmt","","",1,null],[11,"eq","","",0,null],[11,"ne","","",0,null],[11,"clone","","",0,null],[11,"matches","","Returns true if and only if the given byte is in this range.",0,null],[11,"fmt","","",0,null],[11,"new","","Create a new iterator over UTF-8 byte ranges for the scalar value range\ngiven.",2,{"inputs":[{"name":"char"},{"name":"char"}],"output":{"name":"self"}}],[11,"next","","",2,null]],"paths":[[3,"Utf8Range"],[4,"Utf8Sequence"],[3,"Utf8Sequences"]]};
searchIndex["mopa"] = {"doc":"**MOPA: My Own Personal Any.** A macro to implement all the `Any` methods on your own trait.","items":[[8,"Any","mopa","A type to emulate dynamic typing.",null,null],[14,"mopafy!","","The macro for implementing all the `Any` methods on your own trait.",null,null]],"paths":[]};
searchIndex["term_size"] = {"doc":"System calls for getting the terminal size.","items":[[5,"dimensions","term_size","Query the current processes&#39;s output, returning its width and height as a\nnumber of characters. Returns `None` if the output isn&#39;t to a terminal.",null,{"inputs":[],"output":{"name":"option"}}],[5,"ioctl","","",null,null]],"paths":[]};
searchIndex["lazy_static"] = {"doc":"A macro for declaring lazily evaluated statics.","items":[[8,"__Deref","lazy_static","The `Deref` trait is used to specify the functionality of dereferencing\noperations, like `*v`.",null,null],[16,"Target","","The resulting type after dereferencing",0,null],[10,"deref","","The method called to dereference a value",0,null],[0,"lazy","","",null,null],[3,"Lazy","lazy_static::lazy","",null,null],[12,"0","","",1,null],[12,"1","","",1,null],[11,"get","","",1,null],[14,"__lazy_static_create!","lazy_static","",null,null],[14,"lazy_static!","","",null,null]],"paths":[[8,"__Deref"],[3,"Lazy"]]};
searchIndex["kernel32"] = {"doc":"","items":[],"paths":[]};
searchIndex["regex_syntax"] = {"doc":"This crate provides a regular expression parser and an abstract syntax for\nregular expressions. The abstract syntax is defined by the `Expr` type. The\nconcrete syntax is enumerated in the\n[`regex`](../regex/index.html#syntax)\ncrate documentation.","items":[[3,"Literals","regex_syntax","A set of literal byte strings extracted from a regular expression.",null,null],[3,"Lit","","A single member of a set of literals extracted from a regular expression.",null,null],[3,"CharClass","","A character class.",null,null],[3,"ClassRange","","A single inclusive range in a character class.",null,null],[12,"start","","The start character of the range.",0,null],[12,"end","","The end character of the range.",0,null],[3,"ByteClass","","A byte class for byte ranges only.",null,null],[3,"ByteRange","","A single inclusive range in a byte class.",null,null],[12,"start","","The start byte of the range.",1,null],[12,"end","","The end byte of the range.",1,null],[3,"ExprBuilder","","A builder for configuring regular expression parsing.",null,null],[3,"Error","","A parse error.",null,null],[4,"Expr","","A regular expression abstract syntax tree.",null,null],[13,"Empty","","An empty regex (which never matches any text).",2,null],[13,"Literal","","A sequence of one or more literal characters to be matched.",2,null],[12,"chars","regex_syntax::Expr","The characters.",2,null],[12,"casei","","Whether to match case insensitively.",2,null],[13,"LiteralBytes","regex_syntax","A sequence of one or more literal bytes to be matched.",2,null],[12,"bytes","regex_syntax::Expr","The bytes.",2,null],[12,"casei","","Whether to match case insensitively.",2,null],[13,"AnyChar","regex_syntax","Match any character.",2,null],[13,"AnyCharNoNL","","Match any character, excluding new line (`0xA`).",2,null],[13,"AnyByte","","Match any byte.",2,null],[13,"AnyByteNoNL","","Match any byte, excluding new line (`0xA`).",2,null],[13,"Class","","A character class.",2,null],[13,"ClassBytes","","A character class with byte ranges only.",2,null],[13,"StartLine","","Match the start of a line or beginning of input.",2,null],[13,"EndLine","","Match the end of a line or end of input.",2,null],[13,"StartText","","Match the beginning of input.",2,null],[13,"EndText","","Match the end of input.",2,null],[13,"WordBoundary","","Match a word boundary (word character on one side and a non-word\ncharacter on the other).",2,null],[13,"NotWordBoundary","","Match a position that is not a word boundary (word or non-word\ncharacters on both sides).",2,null],[13,"WordBoundaryAscii","","Match an ASCII word boundary.",2,null],[13,"NotWordBoundaryAscii","","Match a position that is not an ASCII word boundary.",2,null],[13,"Group","","A group, possibly non-capturing.",2,null],[12,"e","regex_syntax::Expr","The expression inside the group.",2,null],[12,"i","","The capture index (starting at `1`) only for capturing groups.",2,null],[12,"name","","The capture name, only for capturing named groups.",2,null],[13,"Repeat","regex_syntax","A repeat operator (`?`, `*`, `+` or `{m,n}`).",2,null],[12,"e","regex_syntax::Expr","The expression to be repeated. Limited to literals, `.`, classes\nor grouped expressions.",2,null],[12,"r","","The type of repeat operator used.",2,null],[12,"greedy","","Whether the repeat is greedy (match the most) or not (match the\nleast).",2,null],[13,"Concat","regex_syntax","A concatenation of expressions. Must be matched one after the other.",2,null],[13,"Alternate","","An alternation of expressions. Only one must match.",2,null],[4,"Repeater","","The type of a repeat operator expression.",null,null],[13,"ZeroOrOne","","Match zero or one (`?`).",3,null],[13,"ZeroOrMore","","Match zero or more (`*`).",3,null],[13,"OneOrMore","","Match one or more (`+`).",3,null],[13,"Range","","Match for at least `min` and at most `max` (`{m,n}`).",3,null],[12,"min","regex_syntax::Repeater","Lower bound on the number of matches.",3,null],[12,"max","","Optional upper bound on the number of matches.",3,null],[4,"ErrorKind","regex_syntax","The specific type of parse error that can occur.",null,null],[13,"DoubleFlagNegation","","A negation symbol is used twice in flag settings.\ne.g., `(?-i-s)`.",4,null],[13,"DuplicateCaptureName","","The same capture name was used more than once.\ne.g., `(?P&lt;a&gt;.)(?P&lt;a&gt;.)`.",4,null],[13,"EmptyAlternate","","An alternate is empty. e.g., `(|a)`.",4,null],[13,"EmptyCaptureName","","A capture group name is empty. e.g., `(?P&lt;&gt;a)`.",4,null],[13,"EmptyFlagNegation","","A negation symbol was not proceded by any flags. e.g., `(?i-)`.",4,null],[13,"EmptyGroup","","A group is empty. e.g., `()`.",4,null],[13,"InvalidBase10","","An invalid number was used in a counted repetition. e.g., `a{b}`.",4,null],[13,"InvalidBase16","","An invalid hexadecimal number was used in an escape sequence.\ne.g., `\\xAG`.",4,null],[13,"InvalidCaptureName","","An invalid capture name was used. e.g., `(?P&lt;0a&gt;b)`.",4,null],[13,"InvalidClassRange","","An invalid class range was givien. Specifically, when the start of the\nrange is greater than the end. e.g., `[z-a]`.",4,null],[12,"start","regex_syntax::ErrorKind","The first character specified in the range.",4,null],[12,"end","","The second character specified in the range.",4,null],[13,"InvalidClassEscape","regex_syntax","An escape sequence was used in a character class where it is not\nallowed. e.g., `[a-\\pN]` or `[\\A]`.",4,null],[13,"InvalidRepeatRange","","An invalid counted repetition min/max was given. e.g., `a{2,1}`.",4,null],[12,"min","regex_syntax::ErrorKind","The first number specified in the repetition.",4,null],[12,"max","","The second number specified in the repetition.",4,null],[13,"InvalidScalarValue","regex_syntax","An invalid Unicode scalar value was used in a long hexadecimal\nsequence. e.g., `\\x{D800}`.",4,null],[13,"MissingBase10","","An empty counted repetition operator. e.g., `a{}`.",4,null],[13,"RepeaterExpectsExpr","","A repetition operator was not applied to an expression. e.g., `*`.",4,null],[13,"RepeaterUnexpectedExpr","","A repetition operator was applied to an expression that cannot be\nrepeated. e.g., `a+*` or `a|*`.",4,null],[13,"UnclosedCaptureName","","A capture group name that is never closed. e.g., `(?P&lt;a`.",4,null],[13,"UnclosedHex","","An unclosed hexadecimal literal. e.g., `\\x{a`.",4,null],[13,"UnclosedParen","","An unclosed parenthesis. e.g., `(a`.",4,null],[13,"UnclosedRepeat","","An unclosed counted repetition operator. e.g., `a{2`.",4,null],[13,"UnclosedUnicodeName","","An unclosed named Unicode class. e.g., `\\p{Yi`.",4,null],[13,"UnexpectedClassEof","","Saw end of regex before class was closed. e.g., `[a`.",4,null],[13,"UnexpectedEscapeEof","","Saw end of regex before escape sequence was closed. e.g., `\\`.",4,null],[13,"UnexpectedFlagEof","","Saw end of regex before flags were closed. e.g., `(?i`.",4,null],[13,"UnexpectedTwoDigitHexEof","","Saw end of regex before two hexadecimal digits were seen. e.g., `\\xA`.",4,null],[13,"UnopenedParen","","Unopened parenthesis. e.g., `)`.",4,null],[13,"UnrecognizedEscape","","Unrecognized escape sequence. e.g., `\\q`.",4,null],[13,"UnrecognizedFlag","","Unrecognized flag. e.g., `(?a)`.",4,null],[13,"UnrecognizedUnicodeClass","","Unrecognized named Unicode class. e.g., `\\p{Foo}`.",4,null],[13,"StackExhausted","","Indicates that the regex uses too much nesting.",4,null],[13,"FlagNotAllowed","","A disallowed flag was found (e.g., `u`).",4,null],[13,"UnicodeNotAllowed","","A Unicode class was used when the Unicode (`u`) flag was disabled.",4,null],[13,"InvalidUtf8","","InvalidUtf8 indicates that the expression may match non-UTF-8 bytes.\nThis never returned if the parser is permitted to allow expressions\nthat match arbitrary bytes.",4,null],[13,"EmptyClass","","A character class was constructed such that it is empty.\ne.g., `[^\\d\\D]`.",4,null],[5,"quote","","Escapes all regular expression meta characters in `text`.",null,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"clone","","",5,null],[11,"cmp","","",6,null],[11,"clone","","",6,null],[11,"empty","","Returns a new empty set of literals using default limits.",5,{"inputs":[],"output":{"name":"literals"}}],[11,"limit_size","","Get the approximate size limit (in bytes) of this set.",5,null],[11,"set_limit_size","","Set the approximate size limit (in bytes) of this set.",5,null],[11,"limit_class","","Get the character class size limit for this set.",5,null],[11,"set_limit_class","","Limits the size of character(or byte) classes considered.",5,null],[11,"literals","","Returns the set of literals as a slice. Its order is unspecified.",5,null],[11,"min_len","","Returns the length of the smallest literal.",5,null],[11,"all_complete","","Returns true if all members in this set are complete.",5,null],[11,"any_complete","","Returns true if any member in this set is complete.",5,null],[11,"contains_empty","","Returns true if this set contains an empty literal.",5,null],[11,"is_empty","","Returns true if this set is empty or if all of its members is empty.",5,null],[11,"to_empty","","Returns a new empty set of literals using this set&#39;s limits.",5,null],[11,"longest_common_prefix","","Returns the longest common prefix of all members in this set.",5,null],[11,"longest_common_suffix","","Returns the longest common suffix of all members in this set.",5,null],[11,"trim_suffix","","Returns a new set of literals with the given number of bytes trimmed\nfrom the suffix of each literal.",5,null],[11,"unambiguous_prefixes","","Returns a new set of prefixes of this set of literals that are\nguaranteed to be unambiguous.",5,null],[11,"unambiguous_suffixes","","Returns a new set of suffixes of this set of literals that are\nguaranteed to be unambiguous.",5,null],[11,"union_prefixes","","Unions the prefixes from the given expression to this set.",5,null],[11,"union_suffixes","","Unions the suffixes from the given expression to this set.",5,null],[11,"union","","Unions this set with another set.",5,null],[11,"cross_product","","Extends this set with another set.",5,null],[11,"cross_add","","Extends each literal in this set with the bytes given.",5,null],[11,"add","","Adds the given literal to this set.",5,null],[11,"add_char_class","","Extends each literal in this set with the character class given.",5,null],[11,"add_byte_class","","Extends each literal in this set with the byte class given.",5,null],[11,"cut","","Cuts every member of this set. When a member is cut, it can never\nbe extended.",5,null],[11,"reverse","","Reverses all members in place.",5,null],[11,"clear","","Clears this set of all members.",5,null],[11,"fmt","","",5,null],[11,"new","","Returns a new complete literal with the bytes given.",6,{"inputs":[{"name":"vec"}],"output":{"name":"lit"}}],[11,"empty","","Returns a new complete empty literal.",6,{"inputs":[],"output":{"name":"lit"}}],[11,"is_cut","","Returns true if this literal was &quot;cut.&quot;",6,null],[11,"cut","","Cuts this literal.",6,null],[11,"eq","","",6,null],[11,"partial_cmp","","",6,null],[11,"fmt","","",6,null],[11,"as_ref","","",6,null],[11,"deref","","",6,null],[11,"deref_mut","","",6,null],[6,"Result","","An alias for computations that can return a `Error`.",null,null],[11,"eq","","",2,null],[11,"ne","","",2,null],[11,"fmt","","",2,null],[11,"clone","","",2,null],[11,"eq","","",3,null],[11,"ne","","",3,null],[11,"fmt","","",3,null],[11,"clone","","",3,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"fmt","","",7,null],[11,"clone","","",7,null],[11,"cmp","","",0,null],[11,"partial_cmp","","",0,null],[11,"lt","","",0,null],[11,"le","","",0,null],[11,"gt","","",0,null],[11,"ge","","",0,null],[11,"eq","","",0,null],[11,"ne","","",0,null],[11,"fmt","","",0,null],[11,"clone","","",0,null],[11,"eq","","",8,null],[11,"ne","","",8,null],[11,"fmt","","",8,null],[11,"clone","","",8,null],[11,"cmp","","",1,null],[11,"partial_cmp","","",1,null],[11,"lt","","",1,null],[11,"le","","",1,null],[11,"gt","","",1,null],[11,"ge","","",1,null],[11,"eq","","",1,null],[11,"ne","","",1,null],[11,"fmt","","",1,null],[11,"clone","","",1,null],[11,"fmt","","",9,null],[11,"clone","","",9,null],[11,"new","","Create a new builder for configuring expression parsing.",9,{"inputs":[],"output":{"name":"exprbuilder"}}],[11,"case_insensitive","","Set the default value for the case insensitive (`i`) flag.",9,null],[11,"multi_line","","Set the default value for the multi-line matching (`m`) flag.",9,null],[11,"dot_matches_new_line","","Set the default value for the any character (`s`) flag.",9,null],[11,"swap_greed","","Set the default value for the greedy swap (`U`) flag.",9,null],[11,"ignore_whitespace","","Set the default value for the ignore whitespace (`x`) flag.",9,null],[11,"unicode","","Set the default value for the Unicode (`u`) flag.",9,null],[11,"allow_bytes","","Whether the parser allows matching arbitrary bytes or not.",9,null],[11,"nest_limit","","Set the nesting limit for regular expression parsing.",9,null],[11,"parse","","Parse a string as a regular expression using the current configuraiton.",9,null],[11,"parse","","Parses a string in a regular expression syntax tree.",2,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"prefixes","","Returns a set of literal prefixes extracted from this expression.",2,null],[11,"suffixes","","Returns a set of literal suffixes extracted from this expression.",2,null],[11,"is_anchored_start","","Returns true if and only if the expression is required to match from\nthe beginning of text.",2,null],[11,"has_anchored_start","","Returns true if and only if the expression has at least one matchable\nsub-expression that must match the beginning of text.",2,null],[11,"is_anchored_end","","Returns true if and only if the expression is required to match at the\nend of the text.",2,null],[11,"has_anchored_end","","Returns true if and only if the expression has at least one matchable\nsub-expression that must match the beginning of text.",2,null],[11,"has_bytes","","Returns true if and only if the expression contains sub-expressions\nthat can match arbitrary bytes.",2,null],[11,"deref","","",7,null],[11,"into_iter","","",7,null],[11,"new","","Create a new class from an existing set of ranges.",7,{"inputs":[{"name":"vec"}],"output":{"name":"charclass"}}],[11,"matches","","Returns true if `c` is matched by this character class.",7,null],[11,"remove","","Removes the given character from the class if it exists.",7,null],[11,"negate","","Negates the character class.",7,null],[11,"case_fold","","Apply case folding to this character class.",7,null],[11,"eq","","",0,null],[11,"partial_cmp","","",0,null],[11,"new","","Create a new class from an existing set of ranges.",8,{"inputs":[{"name":"vec"}],"output":{"name":"byteclass"}}],[11,"matches","","Returns true if `b` is matched by this byte class.",8,null],[11,"remove","","Removes the given byte from the class if it exists.",8,null],[11,"negate","","Negates the byte class.",8,null],[11,"case_fold","","Apply case folding to this byte class.",8,null],[11,"deref","","",8,null],[11,"into_iter","","",8,null],[11,"eq","","",1,null],[11,"partial_cmp","","",1,null],[11,"fmt","","",2,null],[11,"fmt","","",3,null],[11,"fmt","","",7,null],[11,"fmt","","",0,null],[11,"fmt","","",8,null],[11,"fmt","","",1,null],[11,"eq","","",10,null],[11,"ne","","",10,null],[11,"fmt","","",10,null],[11,"clone","","",10,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"fmt","","",4,null],[11,"clone","","",4,null],[11,"position","","Returns an approximate *character* offset at which the error occurred.",10,null],[11,"kind","","Returns the type of the regex parse error.",10,null],[11,"description","","",10,null],[11,"fmt","","",10,null],[11,"fmt","","",4,null]],"paths":[[3,"ClassRange"],[3,"ByteRange"],[4,"Expr"],[4,"Repeater"],[4,"ErrorKind"],[3,"Literals"],[3,"Lit"],[3,"CharClass"],[3,"ByteClass"],[3,"ExprBuilder"],[3,"Error"]]};
searchIndex["bitflags"] = {"doc":"A typesafe bitmask flag generator.","items":[[14,"bitflags!","bitflags","The `bitflags!` macro generates a `struct` that holds a set of C-style\nbitmask flags. It is useful for creating typesafe wrappers for C APIs.",null,null]],"paths":[]};
searchIndex["union_find"] = {"doc":"Struct and methods for union-find operation.","items":[[3,"UnionBySize","union_find","Operates the `union` with using the size of the sets as weight.",null,null],[3,"UnionByRank","","Operates the `union` with using the rank of the sets as weight.",null,null],[3,"UnionBySizeRank","","Operates the `union` with using the size and the rank of the sets as weight.",null,null],[3,"UnionByRankSize","","Operates the `union` with using the ramk and the size of the sets as weight.",null,null],[3,"QuickUnionUf","","Union-Find implementation with quick union operation.",null,null],[3,"QuickFindUf","","Union-Find implementation with quick find operation.",null,null],[4,"UnionResult","","Return value of the `Union::merge`.",null,null],[13,"Left","","",0,null],[13,"Right","","",0,null],[11,"fmt","","",0,null],[11,"clone","","",0,null],[11,"fmt","","",1,null],[11,"clone","","",1,null],[11,"union","","",1,{"inputs":[{"name":"unionbysize"},{"name":"unionbysize"}],"output":{"name":"unionresult"}}],[11,"default","","",1,{"inputs":[],"output":{"name":"unionbysize"}}],[11,"size","","Returns the size of the set.",1,null],[11,"fmt","","",2,null],[11,"clone","","",2,null],[11,"union","","",2,{"inputs":[{"name":"unionbyrank"},{"name":"unionbyrank"}],"output":{"name":"unionresult"}}],[11,"default","","",2,{"inputs":[],"output":{"name":"unionbyrank"}}],[11,"rank","","Returns the rankq of the set.",2,null],[11,"fmt","","",3,null],[11,"clone","","",3,null],[11,"union","","",3,{"inputs":[{"name":"unionbysizerank"},{"name":"unionbysizerank"}],"output":{"name":"unionresult"}}],[11,"default","","",3,{"inputs":[],"output":{"name":"unionbysizerank"}}],[11,"size","","Returns the size of the set.",3,null],[11,"rank","","Returns the rank of the set.",3,null],[11,"fmt","","",4,null],[11,"clone","","",4,null],[11,"union","","",4,{"inputs":[{"name":"unionbyranksize"},{"name":"unionbyranksize"}],"output":{"name":"unionresult"}}],[11,"default","","",4,{"inputs":[],"output":{"name":"unionbyranksize"}}],[11,"rank","","Returns the rank of the set.",4,null],[11,"size","","Returns the size of the set.",4,null],[11,"fmt","","",5,null],[11,"clone","","",5,null],[11,"clone_from","","",5,null],[11,"size","","",5,null],[11,"insert","","",5,null],[11,"union","","",5,null],[11,"find","","",5,null],[11,"get","","",5,null],[11,"get_mut","","",5,null],[11,"from_iter","","",5,{"inputs":[{"name":"t"}],"output":{"name":"quickunionuf"}}],[11,"extend","","",5,null],[11,"fmt","","",6,null],[11,"clone","","",6,null],[11,"clone_from","","",6,null],[11,"size","","",6,null],[11,"insert","","",6,null],[11,"union","","",6,null],[11,"find","","",6,null],[11,"get","","",6,null],[11,"get_mut","","",6,null],[11,"from_iter","","",6,{"inputs":[{"name":"t"}],"output":{"name":"quickfinduf"}}],[11,"extend","","",6,null],[8,"Union","","The value that can be contained with `Union`.",null,null],[10,"union","","Union two value into one.",7,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"unionresult"}}],[8,"UnionFind","","APIs for Union-Find operation.",null,null],[11,"new","","Creates empty `UnionFind` struct.",8,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[10,"size","","Returns the size of `self`.",8,null],[10,"insert","","Inserts a new set into the union.",8,null],[10,"union","","Join two sets that contains given keys (union operation).",8,null],[10,"find","","Returns the identifier of the set that the key belongs to.",8,null],[10,"get","","Returns the reference to the value of the set that the key belongs to.",8,null],[10,"get_mut","","Returns the mutable reference to the value of the set that the key belongs to.",8,null],[11,"new","","Creates empty `UnionFind` struct.",8,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}]],"paths":[[4,"UnionResult"],[3,"UnionBySize"],[3,"UnionByRank"],[3,"UnionBySizeRank"],[3,"UnionByRankSize"],[3,"QuickUnionUf"],[3,"QuickFindUf"],[8,"Union"],[8,"UnionFind"]]};
searchIndex["libc"] = {"doc":"Crate docs","items":[[3,"group","libc","",null,null],[12,"gr_name","","",0,null],[12,"gr_passwd","","",0,null],[12,"gr_gid","","",0,null],[12,"gr_mem","","",0,null],[3,"utimbuf","","",null,null],[12,"actime","","",1,null],[12,"modtime","","",1,null],[3,"timeval","","",null,null],[12,"tv_sec","","",2,null],[12,"tv_usec","","",2,null],[3,"timespec","","",null,null],[12,"tv_sec","","",3,null],[12,"tv_nsec","","",3,null],[3,"rlimit","","",null,null],[12,"rlim_cur","","",4,null],[12,"rlim_max","","",4,null],[3,"rusage","","",null,null],[12,"ru_utime","","",5,null],[12,"ru_stime","","",5,null],[12,"ru_maxrss","","",5,null],[12,"ru_ixrss","","",5,null],[12,"ru_idrss","","",5,null],[12,"ru_isrss","","",5,null],[12,"ru_minflt","","",5,null],[12,"ru_majflt","","",5,null],[12,"ru_nswap","","",5,null],[12,"ru_inblock","","",5,null],[12,"ru_oublock","","",5,null],[12,"ru_msgsnd","","",5,null],[12,"ru_msgrcv","","",5,null],[12,"ru_nsignals","","",5,null],[12,"ru_nvcsw","","",5,null],[12,"ru_nivcsw","","",5,null],[3,"in_addr","","",null,null],[12,"s_addr","","",6,null],[3,"in6_addr","","",null,null],[12,"s6_addr","","",7,null],[3,"ip_mreq","","",null,null],[12,"imr_multiaddr","","",8,null],[12,"imr_interface","","",8,null],[3,"ipv6_mreq","","",null,null],[12,"ipv6mr_multiaddr","","",9,null],[12,"ipv6mr_interface","","",9,null],[3,"hostent","","",null,null],[12,"h_name","","",10,null],[12,"h_aliases","","",10,null],[12,"h_addrtype","","",10,null],[12,"h_length","","",10,null],[12,"h_addr_list","","",10,null],[3,"iovec","","",null,null],[12,"iov_base","","",11,null],[12,"iov_len","","",11,null],[3,"pollfd","","",null,null],[12,"fd","","",12,null],[12,"events","","",12,null],[12,"revents","","",12,null],[3,"winsize","","",null,null],[12,"ws_row","","",13,null],[12,"ws_col","","",13,null],[12,"ws_xpixel","","",13,null],[12,"ws_ypixel","","",13,null],[3,"linger","","",null,null],[12,"l_onoff","","",14,null],[12,"l_linger","","",14,null],[3,"sockaddr","","",null,null],[12,"sa_len","","",15,null],[12,"sa_family","","",15,null],[12,"sa_data","","",15,null],[3,"sockaddr_in6","","",null,null],[12,"sin6_len","","",16,null],[12,"sin6_family","","",16,null],[12,"sin6_port","","",16,null],[12,"sin6_flowinfo","","",16,null],[12,"sin6_addr","","",16,null],[12,"sin6_scope_id","","",16,null],[3,"sockaddr_un","","",null,null],[12,"sun_len","","",17,null],[12,"sun_family","","",17,null],[12,"sun_path","","",17,null],[3,"passwd","","",null,null],[12,"pw_name","","",18,null],[12,"pw_passwd","","",18,null],[12,"pw_uid","","",18,null],[12,"pw_gid","","",18,null],[12,"pw_change","","",18,null],[12,"pw_class","","",18,null],[12,"pw_gecos","","",18,null],[12,"pw_dir","","",18,null],[12,"pw_shell","","",18,null],[12,"pw_expire","","",18,null],[3,"ifaddrs","","",null,null],[12,"ifa_next","","",19,null],[12,"ifa_name","","",19,null],[12,"ifa_flags","","",19,null],[12,"ifa_addr","","",19,null],[12,"ifa_netmask","","",19,null],[12,"ifa_dstaddr","","",19,null],[12,"ifa_data","","",19,null],[3,"fd_set","","",null,null],[3,"tm","","",null,null],[12,"tm_sec","","",20,null],[12,"tm_min","","",20,null],[12,"tm_hour","","",20,null],[12,"tm_mday","","",20,null],[12,"tm_mon","","",20,null],[12,"tm_year","","",20,null],[12,"tm_wday","","",20,null],[12,"tm_yday","","",20,null],[12,"tm_isdst","","",20,null],[12,"tm_gmtoff","","",20,null],[12,"tm_zone","","",20,null],[3,"utsname","","",null,null],[12,"sysname","","",21,null],[12,"nodename","","",21,null],[12,"release","","",21,null],[12,"version","","",21,null],[12,"machine","","",21,null],[3,"msghdr","","",null,null],[12,"msg_name","","",22,null],[12,"msg_namelen","","",22,null],[12,"msg_iov","","",22,null],[12,"msg_iovlen","","",22,null],[12,"msg_control","","",22,null],[12,"msg_controllen","","",22,null],[12,"msg_flags","","",22,null],[3,"fsid_t","","",null,null],[3,"if_nameindex","","",null,null],[12,"if_index","","",23,null],[12,"if_name","","",23,null],[3,"utmpx","","",null,null],[12,"ut_user","","",24,null],[12,"ut_id","","",24,null],[12,"ut_line","","",24,null],[12,"ut_pid","","",24,null],[12,"ut_type","","",24,null],[12,"ut_tv","","",24,null],[12,"ut_host","","",24,null],[3,"glob_t","","",null,null],[12,"gl_pathc","","",25,null],[12,"gl_offs","","",25,null],[12,"gl_pathv","","",25,null],[3,"sockaddr_storage","","",null,null],[12,"ss_len","","",26,null],[12,"ss_family","","",26,null],[3,"addrinfo","","",null,null],[12,"ai_flags","","",27,null],[12,"ai_family","","",27,null],[12,"ai_socktype","","",27,null],[12,"ai_protocol","","",27,null],[12,"ai_addrlen","","",27,null],[12,"ai_canonname","","",27,null],[12,"ai_addr","","",27,null],[12,"ai_next","","",27,null],[3,"mach_timebase_info","","",null,null],[12,"numer","","",28,null],[12,"denom","","",28,null],[3,"stat","","",null,null],[12,"st_dev","","",29,null],[12,"st_mode","","",29,null],[12,"st_nlink","","",29,null],[12,"st_ino","","",29,null],[12,"st_uid","","",29,null],[12,"st_gid","","",29,null],[12,"st_rdev","","",29,null],[12,"st_atime","","",29,null],[12,"st_atime_nsec","","",29,null],[12,"st_mtime","","",29,null],[12,"st_mtime_nsec","","",29,null],[12,"st_ctime","","",29,null],[12,"st_ctime_nsec","","",29,null],[12,"st_birthtime","","",29,null],[12,"st_birthtime_nsec","","",29,null],[12,"st_size","","",29,null],[12,"st_blocks","","",29,null],[12,"st_blksize","","",29,null],[12,"st_flags","","",29,null],[12,"st_gen","","",29,null],[12,"st_lspare","","",29,null],[12,"st_qspare","","",29,null],[3,"dirent","","",null,null],[12,"d_ino","","",30,null],[12,"d_seekoff","","",30,null],[12,"d_reclen","","",30,null],[12,"d_namlen","","",30,null],[12,"d_type","","",30,null],[12,"d_name","","",30,null],[3,"pthread_mutex_t","","",null,null],[3,"pthread_mutexattr_t","","",null,null],[3,"pthread_cond_t","","",null,null],[3,"pthread_condattr_t","","",null,null],[3,"pthread_rwlock_t","","",null,null],[3,"siginfo_t","","",null,null],[12,"si_signo","","",31,null],[12,"si_errno","","",31,null],[12,"si_code","","",31,null],[12,"si_pid","","",31,null],[12,"si_uid","","",31,null],[12,"si_status","","",31,null],[12,"si_addr","","",31,null],[3,"sigaction","","",null,null],[12,"sa_sigaction","","",32,null],[12,"sa_mask","","",32,null],[12,"sa_flags","","",32,null],[3,"stack_t","","",null,null],[12,"ss_sp","","",33,null],[12,"ss_size","","",33,null],[12,"ss_flags","","",33,null],[3,"fstore_t","","",null,null],[12,"fst_flags","","",34,null],[12,"fst_posmode","","",34,null],[12,"fst_offset","","",34,null],[12,"fst_length","","",34,null],[12,"fst_bytesalloc","","",34,null],[3,"radvisory","","",null,null],[12,"ra_offset","","",35,null],[12,"ra_count","","",35,null],[3,"statvfs","","",null,null],[12,"f_bsize","","",36,null],[12,"f_frsize","","",36,null],[12,"f_blocks","","",36,null],[12,"f_bfree","","",36,null],[12,"f_bavail","","",36,null],[12,"f_files","","",36,null],[12,"f_ffree","","",36,null],[12,"f_favail","","",36,null],[12,"f_fsid","","",36,null],[12,"f_flag","","",36,null],[12,"f_namemax","","",36,null],[3,"Dl_info","","",null,null],[12,"dli_fname","","",37,null],[12,"dli_fbase","","",37,null],[12,"dli_sname","","",37,null],[12,"dli_saddr","","",37,null],[3,"sockaddr_in","","",null,null],[12,"sin_len","","",38,null],[12,"sin_family","","",38,null],[12,"sin_port","","",38,null],[12,"sin_addr","","",38,null],[12,"sin_zero","","",38,null],[3,"statfs","","",null,null],[12,"f_bsize","","",39,null],[12,"f_iosize","","",39,null],[12,"f_blocks","","",39,null],[12,"f_bfree","","",39,null],[12,"f_bavail","","",39,null],[12,"f_files","","",39,null],[12,"f_ffree","","",39,null],[12,"f_fsid","","",39,null],[12,"f_owner","","",39,null],[12,"f_type","","",39,null],[12,"f_flags","","",39,null],[12,"f_fssubtype","","",39,null],[12,"f_fstypename","","",39,null],[12,"f_mntonname","","",39,null],[12,"f_mntfromname","","",39,null],[12,"f_reserved","","",39,null],[3,"kevent","","",null,null],[12,"ident","","",40,null],[12,"filter","","",40,null],[12,"flags","","",40,null],[12,"fflags","","",40,null],[12,"data","","",40,null],[12,"udata","","",40,null],[3,"kevent64_s","","",null,null],[12,"ident","","",41,null],[12,"filter","","",41,null],[12,"flags","","",41,null],[12,"fflags","","",41,null],[12,"data","","",41,null],[12,"udata","","",41,null],[12,"ext","","",41,null],[3,"dqblk","","",null,null],[12,"dqb_bhardlimit","","",42,null],[12,"dqb_bsoftlimit","","",42,null],[12,"dqb_curbytes","","",42,null],[12,"dqb_ihardlimit","","",42,null],[12,"dqb_isoftlimit","","",42,null],[12,"dqb_curinodes","","",42,null],[12,"dqb_btime","","",42,null],[12,"dqb_itime","","",42,null],[12,"dqb_id","","",42,null],[12,"dqb_spare","","",42,null],[3,"termios","","",null,null],[12,"c_iflag","","",43,null],[12,"c_oflag","","",43,null],[12,"c_cflag","","",43,null],[12,"c_lflag","","",43,null],[12,"c_cc","","",43,null],[12,"c_ispeed","","",43,null],[12,"c_ospeed","","",43,null],[3,"flock","","",null,null],[12,"l_start","","",44,null],[12,"l_len","","",44,null],[12,"l_pid","","",44,null],[12,"l_type","","",44,null],[12,"l_whence","","",44,null],[3,"sf_hdtr","","",null,null],[12,"headers","","",45,null],[12,"hdr_cnt","","",45,null],[12,"trailers","","",45,null],[12,"trl_cnt","","",45,null],[3,"lconv","","",null,null],[12,"decimal_point","","",46,null],[12,"thousands_sep","","",46,null],[12,"grouping","","",46,null],[12,"int_curr_symbol","","",46,null],[12,"currency_symbol","","",46,null],[12,"mon_decimal_point","","",46,null],[12,"mon_thousands_sep","","",46,null],[12,"mon_grouping","","",46,null],[12,"positive_sign","","",46,null],[12,"negative_sign","","",46,null],[12,"int_frac_digits","","",46,null],[12,"frac_digits","","",46,null],[12,"p_cs_precedes","","",46,null],[12,"p_sep_by_space","","",46,null],[12,"n_cs_precedes","","",46,null],[12,"n_sep_by_space","","",46,null],[12,"p_sign_posn","","",46,null],[12,"n_sign_posn","","",46,null],[12,"int_p_cs_precedes","","",46,null],[12,"int_n_cs_precedes","","",46,null],[12,"int_p_sep_by_space","","",46,null],[12,"int_n_sep_by_space","","",46,null],[12,"int_p_sign_posn","","",46,null],[12,"int_n_sign_posn","","",46,null],[3,"pthread_attr_t","","",null,null],[4,"c_void","","",null,null],[4,"FILE","","",null,null],[4,"fpos_t","","",null,null],[4,"DIR","","",null,null],[4,"locale_t","","",null,null],[4,"timezone","","",null,null],[5,"FD_CLR","","",null,null],[5,"FD_ISSET","","",null,null],[5,"FD_SET","","",null,null],[5,"FD_ZERO","","",null,null],[5,"WTERMSIG","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"WIFEXITED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WEXITSTATUS","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"WCOREDUMP","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WSTOPSIG","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"_WSTATUS","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"WIFCONTINUED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WIFSIGNALED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WIFSTOPPED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"isalnum","","",null,null],[5,"isalpha","","",null,null],[5,"iscntrl","","",null,null],[5,"isdigit","","",null,null],[5,"isgraph","","",null,null],[5,"islower","","",null,null],[5,"isprint","","",null,null],[5,"ispunct","","",null,null],[5,"isspace","","",null,null],[5,"isupper","","",null,null],[5,"isxdigit","","",null,null],[5,"tolower","","",null,null],[5,"toupper","","",null,null],[5,"fopen","","",null,null],[5,"freopen","","",null,null],[5,"fflush","","",null,null],[5,"fclose","","",null,null],[5,"remove","","",null,null],[5,"rename","","",null,null],[5,"tmpfile","","",null,null],[5,"setvbuf","","",null,null],[5,"setbuf","","",null,null],[5,"getchar","","",null,null],[5,"putchar","","",null,null],[5,"fgetc","","",null,null],[5,"fgets","","",null,null],[5,"fputc","","",null,null],[5,"fputs","","",null,null],[5,"puts","","",null,null],[5,"ungetc","","",null,null],[5,"fread","","",null,null],[5,"fwrite","","",null,null],[5,"fseek","","",null,null],[5,"ftell","","",null,null],[5,"rewind","","",null,null],[5,"fgetpos","","",null,null],[5,"fsetpos","","",null,null],[5,"feof","","",null,null],[5,"ferror","","",null,null],[5,"perror","","",null,null],[5,"atoi","","",null,null],[5,"strtod","","",null,null],[5,"strtol","","",null,null],[5,"strtoul","","",null,null],[5,"calloc","","",null,null],[5,"malloc","","",null,null],[5,"realloc","","",null,null],[5,"free","","",null,null],[5,"abort","","",null,null],[5,"exit","","",null,null],[5,"_exit","","",null,null],[5,"atexit","","",null,null],[5,"system","","",null,null],[5,"getenv","","",null,null],[5,"strcpy","","",null,null],[5,"strncpy","","",null,null],[5,"strcat","","",null,null],[5,"strncat","","",null,null],[5,"strcmp","","",null,null],[5,"strncmp","","",null,null],[5,"strcoll","","",null,null],[5,"strchr","","",null,null],[5,"strrchr","","",null,null],[5,"strspn","","",null,null],[5,"strcspn","","",null,null],[5,"strdup","","",null,null],[5,"strpbrk","","",null,null],[5,"strstr","","",null,null],[5,"strlen","","",null,null],[5,"strnlen","","",null,null],[5,"strerror","","",null,null],[5,"strtok","","",null,null],[5,"strxfrm","","",null,null],[5,"wcslen","","",null,null],[5,"memchr","","",null,null],[5,"memcmp","","",null,null],[5,"memcpy","","",null,null],[5,"memmove","","",null,null],[5,"memset","","",null,null],[5,"abs","","",null,null],[5,"atof","","",null,null],[5,"labs","","",null,null],[5,"rand","","",null,null],[5,"srand","","",null,null],[5,"getgrnam","","",null,null],[5,"getgrgid","","",null,null],[5,"endpwent","","",null,null],[5,"getpwnam","","",null,null],[5,"getpwuid","","",null,null],[5,"fprintf","","",null,null],[5,"printf","","",null,null],[5,"snprintf","","",null,null],[5,"sprintf","","",null,null],[5,"fscanf","","",null,null],[5,"scanf","","",null,null],[5,"sscanf","","",null,null],[5,"getchar_unlocked","","",null,null],[5,"putchar_unlocked","","",null,null],[5,"socket","","",null,null],[5,"connect","","",null,null],[5,"bind","","",null,null],[5,"listen","","",null,null],[5,"accept","","",null,null],[5,"getpeername","","",null,null],[5,"getsockname","","",null,null],[5,"setsockopt","","",null,null],[5,"socketpair","","",null,null],[5,"sendto","","",null,null],[5,"shutdown","","",null,null],[5,"chmod","","",null,null],[5,"fchmod","","",null,null],[5,"fstat","","",null,null],[5,"mkdir","","",null,null],[5,"stat","","",null,null],[5,"popen","","",null,null],[5,"pclose","","",null,null],[5,"fdopen","","",null,null],[5,"fileno","","",null,null],[5,"open","","",null,null],[5,"creat","","",null,null],[5,"fcntl","","",null,null],[5,"opendir","","",null,null],[5,"readdir_r","","",null,null],[5,"closedir","","",null,null],[5,"rewinddir","","",null,null],[5,"access","","",null,null],[5,"alarm","","",null,null],[5,"chdir","","",null,null],[5,"chown","","",null,null],[5,"lchown","","",null,null],[5,"close","","",null,null],[5,"dup","","",null,null],[5,"dup2","","",null,null],[5,"execv","","",null,null],[5,"execve","","",null,null],[5,"execvp","","",null,null],[5,"fork","","",null,null],[5,"fpathconf","","",null,null],[5,"getcwd","","",null,null],[5,"getegid","","",null,null],[5,"geteuid","","",null,null],[5,"getgid","","",null,null],[5,"getgroups","","",null,null],[5,"getlogin","","",null,null],[5,"getopt","","",null,null],[5,"getpgid","","",null,null],[5,"getpgrp","","",null,null],[5,"getpid","","",null,null],[5,"getppid","","",null,null],[5,"getuid","","",null,null],[5,"isatty","","",null,null],[5,"link","","",null,null],[5,"lseek","","",null,null],[5,"pathconf","","",null,null],[5,"pause","","",null,null],[5,"pipe","","",null,null],[5,"posix_memalign","","",null,null],[5,"read","","",null,null],[5,"rmdir","","",null,null],[5,"setgid","","",null,null],[5,"setpgid","","",null,null],[5,"setsid","","",null,null],[5,"setuid","","",null,null],[5,"sleep","","",null,null],[5,"nanosleep","","",null,null],[5,"tcgetpgrp","","",null,null],[5,"ttyname","","",null,null],[5,"unlink","","",null,null],[5,"wait","","",null,null],[5,"waitpid","","",null,null],[5,"write","","",null,null],[5,"pread","","",null,null],[5,"pwrite","","",null,null],[5,"umask","","",null,null],[5,"utime","","",null,null],[5,"kill","","",null,null],[5,"mlock","","",null,null],[5,"munlock","","",null,null],[5,"mlockall","","",null,null],[5,"munlockall","","",null,null],[5,"mmap","","",null,null],[5,"munmap","","",null,null],[5,"if_nametoindex","","",null,null],[5,"if_indextoname","","",null,null],[5,"lstat","","",null,null],[5,"fsync","","",null,null],[5,"setenv","","",null,null],[5,"unsetenv","","",null,null],[5,"symlink","","",null,null],[5,"ftruncate","","",null,null],[5,"signal","","",null,null],[5,"getrlimit","","",null,null],[5,"setrlimit","","",null,null],[5,"getrusage","","",null,null],[5,"getdtablesize","","",null,null],[5,"realpath","","",null,null],[5,"flock","","",null,null],[5,"gettimeofday","","",null,null],[5,"pthread_self","","",null,null],[5,"pthread_create","","",null,null],[5,"pthread_join","","",null,null],[5,"pthread_attr_init","","",null,null],[5,"pthread_attr_destroy","","",null,null],[5,"pthread_attr_setstacksize","","",null,null],[5,"pthread_attr_setdetachstate","","",null,null],[5,"pthread_detach","","",null,null],[5,"sched_yield","","",null,null],[5,"pthread_key_create","","",null,null],[5,"pthread_key_delete","","",null,null],[5,"pthread_getspecific","","",null,null],[5,"pthread_setspecific","","",null,null],[5,"pthread_mutex_init","","",null,null],[5,"pthread_mutex_destroy","","",null,null],[5,"pthread_mutex_lock","","",null,null],[5,"pthread_mutex_trylock","","",null,null],[5,"pthread_mutex_unlock","","",null,null],[5,"pthread_mutexattr_init","","",null,null],[5,"pthread_mutexattr_destroy","","",null,null],[5,"pthread_mutexattr_settype","","",null,null],[5,"pthread_cond_init","","",null,null],[5,"pthread_cond_wait","","",null,null],[5,"pthread_cond_timedwait","","",null,null],[5,"pthread_cond_signal","","",null,null],[5,"pthread_cond_broadcast","","",null,null],[5,"pthread_cond_destroy","","",null,null],[5,"pthread_condattr_init","","",null,null],[5,"pthread_condattr_destroy","","",null,null],[5,"pthread_rwlock_destroy","","",null,null],[5,"pthread_rwlock_rdlock","","",null,null],[5,"pthread_rwlock_tryrdlock","","",null,null],[5,"pthread_rwlock_wrlock","","",null,null],[5,"pthread_rwlock_trywrlock","","",null,null],[5,"pthread_rwlock_unlock","","",null,null],[5,"pthread_sigmask","","",null,null],[5,"pthread_kill","","",null,null],[5,"strerror_r","","",null,null],[5,"getsockopt","","",null,null],[5,"raise","","",null,null],[5,"sigaction","","",null,null],[5,"sigaltstack","","",null,null],[5,"sigwait","","",null,null],[5,"utimes","","",null,null],[5,"dlopen","","",null,null],[5,"dlerror","","",null,null],[5,"dlsym","","",null,null],[5,"dlclose","","",null,null],[5,"dladdr","","",null,null],[5,"getaddrinfo","","",null,null],[5,"freeaddrinfo","","",null,null],[5,"gai_strerror","","",null,null],[5,"gmtime_r","","",null,null],[5,"localtime_r","","",null,null],[5,"mktime","","",null,null],[5,"time","","",null,null],[5,"localtime","","",null,null],[5,"mknod","","",null,null],[5,"writev","","",null,null],[5,"readv","","",null,null],[5,"uname","","",null,null],[5,"daemon","","",null,null],[5,"gethostname","","",null,null],[5,"chroot","","",null,null],[5,"usleep","","",null,null],[5,"send","","",null,null],[5,"recv","","",null,null],[5,"putenv","","",null,null],[5,"sendmsg","","",null,null],[5,"recvmsg","","",null,null],[5,"poll","","",null,null],[5,"select","","",null,null],[5,"setlocale","","",null,null],[5,"localeconv","","",null,null],[5,"sem_destroy","","",null,null],[5,"sem_open","","",null,null],[5,"sem_close","","",null,null],[5,"sem_unlink","","",null,null],[5,"sem_wait","","",null,null],[5,"sem_trywait","","",null,null],[5,"sem_post","","",null,null],[5,"sem_init","","",null,null],[5,"glob","","",null,null],[5,"globfree","","",null,null],[5,"posix_madvise","","",null,null],[5,"shm_unlink","","",null,null],[5,"seekdir","","",null,null],[5,"telldir","","",null,null],[5,"getsid","","",null,null],[5,"madvise","","",null,null],[5,"readlink","","",null,null],[5,"msync","","",null,null],[5,"sysconf","","",null,null],[5,"recvfrom","","",null,null],[5,"mkfifo","","",null,null],[5,"sigemptyset","","",null,null],[5,"sigaddset","","",null,null],[5,"sigfillset","","",null,null],[5,"sigdelset","","",null,null],[5,"sigismember","","",null,null],[5,"pselect","","",null,null],[5,"fseeko","","",null,null],[5,"ftello","","",null,null],[5,"timegm","","",null,null],[5,"statvfs","","",null,null],[5,"fstatvfs","","",null,null],[5,"tcdrain","","",null,null],[5,"cfgetispeed","","",null,null],[5,"cfgetospeed","","",null,null],[5,"cfsetispeed","","",null,null],[5,"cfsetospeed","","",null,null],[5,"tcgetattr","","",null,null],[5,"tcsetattr","","",null,null],[5,"tcflow","","",null,null],[5,"tcflush","","",null,null],[5,"tcsendbreak","","",null,null],[5,"mkstemp","","",null,null],[5,"mkstemps","","",null,null],[5,"mkdtemp","","",null,null],[5,"futimes","","",null,null],[5,"nl_langinfo","","",null,null],[5,"openlog","","",null,null],[5,"closelog","","",null,null],[5,"setlogmask","","",null,null],[5,"syslog","","",null,null],[5,"nice","","",null,null],[5,"getifaddrs","","",null,null],[5,"freeifaddrs","","",null,null],[5,"setgroups","","",null,null],[5,"ioctl","","",null,null],[5,"kqueue","","",null,null],[5,"unmount","","",null,null],[5,"syscall","","",null,null],[5,"getpwnam_r","","",null,null],[5,"getpwuid_r","","",null,null],[5,"getpwent","","",null,null],[5,"setpwent","","",null,null],[5,"getprogname","","",null,null],[5,"setprogname","","",null,null],[5,"getloadavg","","",null,null],[5,"if_nameindex","","",null,null],[5,"if_freenameindex","","",null,null],[5,"lutimes","","",null,null],[5,"getutxent","","",null,null],[5,"getutxid","","",null,null],[5,"getutxline","","",null,null],[5,"pututxline","","",null,null],[5,"setutxent","","",null,null],[5,"endutxent","","",null,null],[5,"utmpxname","","",null,null],[5,"getnameinfo","","",null,null],[5,"mincore","","",null,null],[5,"sysctlnametomib","","",null,null],[5,"mprotect","","",null,null],[5,"shm_open","","",null,null],[5,"sysctl","","",null,null],[5,"sysctlbyname","","",null,null],[5,"mach_absolute_time","","",null,null],[5,"mach_timebase_info","","",null,null],[5,"pthread_setname_np","","",null,null],[5,"pthread_get_stackaddr_np","","",null,null],[5,"pthread_get_stacksize_np","","",null,null],[5,"__error","","",null,null],[5,"backtrace","","",null,null],[5,"statfs","","",null,null],[5,"fstatfs","","",null,null],[5,"kevent","","",null,null],[5,"kevent64","","",null,null],[5,"mount","","",null,null],[5,"ptrace","","",null,null],[5,"quotactl","","",null,null],[5,"sethostname","","",null,null],[5,"sendfile","","",null,null],[5,"openpty","","",null,null],[5,"forkpty","","",null,null],[5,"duplocale","","",null,null],[5,"freelocale","","",null,null],[5,"localeconv_l","","",null,null],[5,"newlocale","","",null,null],[5,"uselocale","","",null,null],[5,"querylocale","","",null,null],[5,"getpriority","","",null,null],[5,"setpriority","","",null,null],[5,"openat","","",null,null],[5,"faccessat","","",null,null],[5,"fchmodat","","",null,null],[5,"fchownat","","",null,null],[5,"fstatat","","",null,null],[5,"linkat","","",null,null],[5,"mkdirat","","",null,null],[5,"readlinkat","","",null,null],[5,"renameat","","",null,null],[5,"symlinkat","","",null,null],[5,"unlinkat","","",null,null],[11,"clone","","",47,null],[11,"clone","","",24,null],[11,"clone","","",25,null],[11,"clone","","",26,null],[11,"clone","","",27,null],[11,"clone","","",28,null],[11,"clone","","",29,null],[11,"clone","","",30,null],[11,"clone","","",48,null],[11,"clone","","",49,null],[11,"clone","","",50,null],[11,"clone","","",51,null],[11,"clone","","",52,null],[11,"clone","","",31,null],[11,"clone","","",32,null],[11,"clone","","",33,null],[11,"clone","","",34,null],[11,"clone","","",35,null],[11,"clone","","",36,null],[11,"clone","","",37,null],[11,"clone","","",38,null],[11,"clone","","",39,null],[11,"clone","","",40,null],[11,"clone","","",41,null],[11,"clone","","",42,null],[11,"clone","","",43,null],[11,"clone","","",44,null],[11,"clone","","",45,null],[11,"clone","","",46,null],[11,"clone","","",15,null],[11,"clone","","",16,null],[11,"clone","","",17,null],[11,"clone","","",18,null],[11,"clone","","",19,null],[11,"clone","","",53,null],[11,"clone","","",20,null],[11,"clone","","",21,null],[11,"clone","","",22,null],[11,"clone","","",54,null],[11,"clone","","",23,null],[11,"clone","","",0,null],[11,"clone","","",1,null],[11,"clone","","",2,null],[11,"clone","","",3,null],[11,"clone","","",4,null],[11,"clone","","",5,null],[11,"clone","","",6,null],[11,"clone","","",7,null],[11,"clone","","",8,null],[11,"clone","","",9,null],[11,"clone","","",10,null],[11,"clone","","",11,null],[11,"clone","","",12,null],[11,"clone","","",13,null],[11,"clone","","",14,null],[6,"int8_t","","",null,null],[6,"int16_t","","",null,null],[6,"int32_t","","",null,null],[6,"int64_t","","",null,null],[6,"uint8_t","","",null,null],[6,"uint16_t","","",null,null],[6,"uint32_t","","",null,null],[6,"uint64_t","","",null,null],[6,"c_schar","","",null,null],[6,"c_uchar","","",null,null],[6,"c_short","","",null,null],[6,"c_ushort","","",null,null],[6,"c_int","","",null,null],[6,"c_uint","","",null,null],[6,"c_float","","",null,null],[6,"c_double","","",null,null],[6,"c_longlong","","",null,null],[6,"c_ulonglong","","",null,null],[6,"intmax_t","","",null,null],[6,"uintmax_t","","",null,null],[6,"size_t","","",null,null],[6,"ptrdiff_t","","",null,null],[6,"intptr_t","","",null,null],[6,"uintptr_t","","",null,null],[6,"ssize_t","","",null,null],[6,"pid_t","","",null,null],[6,"uid_t","","",null,null],[6,"gid_t","","",null,null],[6,"in_addr_t","","",null,null],[6,"in_port_t","","",null,null],[6,"sighandler_t","","",null,null],[6,"cc_t","","",null,null],[6,"c_char","","",null,null],[6,"wchar_t","","",null,null],[6,"off_t","","",null,null],[6,"useconds_t","","",null,null],[6,"blkcnt_t","","",null,null],[6,"socklen_t","","",null,null],[6,"sa_family_t","","",null,null],[6,"pthread_t","","",null,null],[6,"nfds_t","","",null,null],[6,"clock_t","","",null,null],[6,"time_t","","",null,null],[6,"suseconds_t","","",null,null],[6,"dev_t","","",null,null],[6,"ino_t","","",null,null],[6,"mode_t","","",null,null],[6,"nlink_t","","",null,null],[6,"blksize_t","","",null,null],[6,"rlim_t","","",null,null],[6,"mach_timebase_info_data_t","","",null,null],[6,"pthread_key_t","","",null,null],[6,"sigset_t","","",null,null],[6,"fsblkcnt_t","","",null,null],[6,"fsfilcnt_t","","",null,null],[6,"speed_t","","",null,null],[6,"tcflag_t","","",null,null],[6,"nl_item","","",null,null],[6,"id_t","","",null,null],[6,"sem_t","","",null,null],[6,"c_long","","",null,null],[6,"c_ulong","","",null,null],[17,"SIG_DFL","","",null,null],[17,"SIG_IGN","","",null,null],[17,"SIG_ERR","","",null,null],[17,"DT_FIFO","","",null,null],[17,"DT_CHR","","",null,null],[17,"DT_DIR","","",null,null],[17,"DT_BLK","","",null,null],[17,"DT_REG","","",null,null],[17,"DT_LNK","","",null,null],[17,"DT_SOCK","","",null,null],[17,"FD_CLOEXEC","","",null,null],[17,"USRQUOTA","","",null,null],[17,"GRPQUOTA","","",null,null],[17,"SIGIOT","","",null,null],[17,"S_ISUID","","",null,null],[17,"S_ISGID","","",null,null],[17,"S_ISVTX","","",null,null],[17,"POLLIN","","",null,null],[17,"POLLPRI","","",null,null],[17,"POLLOUT","","",null,null],[17,"POLLERR","","",null,null],[17,"POLLHUP","","",null,null],[17,"POLLNVAL","","",null,null],[17,"IF_NAMESIZE","","",null,null],[17,"RTLD_LAZY","","",null,null],[17,"LOG_EMERG","","",null,null],[17,"LOG_ALERT","","",null,null],[17,"LOG_CRIT","","",null,null],[17,"LOG_ERR","","",null,null],[17,"LOG_WARNING","","",null,null],[17,"LOG_NOTICE","","",null,null],[17,"LOG_INFO","","",null,null],[17,"LOG_DEBUG","","",null,null],[17,"LOG_KERN","","",null,null],[17,"LOG_USER","","",null,null],[17,"LOG_MAIL","","",null,null],[17,"LOG_DAEMON","","",null,null],[17,"LOG_AUTH","","",null,null],[17,"LOG_SYSLOG","","",null,null],[17,"LOG_LPR","","",null,null],[17,"LOG_NEWS","","",null,null],[17,"LOG_UUCP","","",null,null],[17,"LOG_LOCAL0","","",null,null],[17,"LOG_LOCAL1","","",null,null],[17,"LOG_LOCAL2","","",null,null],[17,"LOG_LOCAL3","","",null,null],[17,"LOG_LOCAL4","","",null,null],[17,"LOG_LOCAL5","","",null,null],[17,"LOG_LOCAL6","","",null,null],[17,"LOG_LOCAL7","","",null,null],[17,"LOG_PID","","",null,null],[17,"LOG_CONS","","",null,null],[17,"LOG_ODELAY","","",null,null],[17,"LOG_NDELAY","","",null,null],[17,"LOG_NOWAIT","","",null,null],[17,"LOG_PRIMASK","","",null,null],[17,"LOG_FACMASK","","",null,null],[17,"PRIO_PROCESS","","",null,null],[17,"PRIO_PGRP","","",null,null],[17,"PRIO_USER","","",null,null],[17,"PRIO_MIN","","",null,null],[17,"PRIO_MAX","","",null,null],[17,"LC_ALL","","",null,null],[17,"LC_COLLATE","","",null,null],[17,"LC_CTYPE","","",null,null],[17,"LC_MONETARY","","",null,null],[17,"LC_NUMERIC","","",null,null],[17,"LC_TIME","","",null,null],[17,"LC_MESSAGES","","",null,null],[17,"FIOCLEX","","",null,null],[17,"FIONBIO","","",null,null],[17,"PATH_MAX","","",null,null],[17,"SA_ONSTACK","","",null,null],[17,"SA_SIGINFO","","",null,null],[17,"SA_RESTART","","",null,null],[17,"SA_RESETHAND","","",null,null],[17,"SA_NOCLDSTOP","","",null,null],[17,"SA_NODEFER","","",null,null],[17,"SA_NOCLDWAIT","","",null,null],[17,"SS_ONSTACK","","",null,null],[17,"SS_DISABLE","","",null,null],[17,"SIGCHLD","","",null,null],[17,"SIGBUS","","",null,null],[17,"SIGUSR1","","",null,null],[17,"SIGUSR2","","",null,null],[17,"SIGCONT","","",null,null],[17,"SIGSTOP","","",null,null],[17,"SIGTSTP","","",null,null],[17,"SIGURG","","",null,null],[17,"SIGIO","","",null,null],[17,"SIGSYS","","",null,null],[17,"SIGTTIN","","",null,null],[17,"SIGTTOU","","",null,null],[17,"SIGXCPU","","",null,null],[17,"SIGXFSZ","","",null,null],[17,"SIGVTALRM","","",null,null],[17,"SIGPROF","","",null,null],[17,"SIGWINCH","","",null,null],[17,"SIGINFO","","",null,null],[17,"SIG_SETMASK","","",null,null],[17,"SIG_BLOCK","","",null,null],[17,"SIG_UNBLOCK","","",null,null],[17,"IPV6_MULTICAST_LOOP","","",null,null],[17,"IPV6_V6ONLY","","",null,null],[17,"ST_RDONLY","","",null,null],[17,"NCCS","","",null,null],[17,"O_ASYNC","","",null,null],[17,"O_FSYNC","","",null,null],[17,"O_NDELAY","","",null,null],[17,"O_NOFOLLOW","","",null,null],[17,"F_GETOWN","","",null,null],[17,"F_SETOWN","","",null,null],[17,"MNT_FORCE","","",null,null],[17,"Q_SYNC","","",null,null],[17,"Q_QUOTAON","","",null,null],[17,"Q_QUOTAOFF","","",null,null],[17,"TCIOFF","","",null,null],[17,"TCION","","",null,null],[17,"TCOOFF","","",null,null],[17,"TCOON","","",null,null],[17,"TCIFLUSH","","",null,null],[17,"TCOFLUSH","","",null,null],[17,"TCIOFLUSH","","",null,null],[17,"TCSANOW","","",null,null],[17,"TCSADRAIN","","",null,null],[17,"TCSAFLUSH","","",null,null],[17,"VEOF","","",null,null],[17,"VEOL","","",null,null],[17,"VEOL2","","",null,null],[17,"VERASE","","",null,null],[17,"VWERASE","","",null,null],[17,"VKILL","","",null,null],[17,"VREPRINT","","",null,null],[17,"VINTR","","",null,null],[17,"VQUIT","","",null,null],[17,"VSUSP","","",null,null],[17,"VSTART","","",null,null],[17,"VSTOP","","",null,null],[17,"VLNEXT","","",null,null],[17,"VDISCARD","","",null,null],[17,"VMIN","","",null,null],[17,"VTIME","","",null,null],[17,"IGNBRK","","",null,null],[17,"BRKINT","","",null,null],[17,"IGNPAR","","",null,null],[17,"PARMRK","","",null,null],[17,"INPCK","","",null,null],[17,"ISTRIP","","",null,null],[17,"INLCR","","",null,null],[17,"IGNCR","","",null,null],[17,"ICRNL","","",null,null],[17,"IXON","","",null,null],[17,"IXOFF","","",null,null],[17,"IXANY","","",null,null],[17,"IMAXBEL","","",null,null],[17,"OPOST","","",null,null],[17,"ONLCR","","",null,null],[17,"CSIZE","","",null,null],[17,"CS5","","",null,null],[17,"CS6","","",null,null],[17,"CS7","","",null,null],[17,"CS8","","",null,null],[17,"CSTOPB","","",null,null],[17,"CREAD","","",null,null],[17,"PARENB","","",null,null],[17,"PARODD","","",null,null],[17,"HUPCL","","",null,null],[17,"CLOCAL","","",null,null],[17,"ECHOKE","","",null,null],[17,"ECHOE","","",null,null],[17,"ECHOK","","",null,null],[17,"ECHO","","",null,null],[17,"ECHONL","","",null,null],[17,"ECHOPRT","","",null,null],[17,"ECHOCTL","","",null,null],[17,"ISIG","","",null,null],[17,"ICANON","","",null,null],[17,"IEXTEN","","",null,null],[17,"EXTPROC","","",null,null],[17,"TOSTOP","","",null,null],[17,"FLUSHO","","",null,null],[17,"PENDIN","","",null,null],[17,"NOFLSH","","",null,null],[17,"WNOHANG","","",null,null],[17,"WUNTRACED","","",null,null],[17,"RTLD_NOW","","",null,null],[17,"RTLD_DEFAULT","","",null,null],[17,"LOG_CRON","","",null,null],[17,"LOG_AUTHPRIV","","",null,null],[17,"LOG_FTP","","",null,null],[17,"LOG_PERROR","","",null,null],[17,"PIPE_BUF","","",null,null],[17,"_UTX_USERSIZE","","",null,null],[17,"_UTX_LINESIZE","","",null,null],[17,"_UTX_IDSIZE","","",null,null],[17,"_UTX_HOSTSIZE","","",null,null],[17,"EMPTY","","",null,null],[17,"RUN_LVL","","",null,null],[17,"BOOT_TIME","","",null,null],[17,"OLD_TIME","","",null,null],[17,"NEW_TIME","","",null,null],[17,"INIT_PROCESS","","",null,null],[17,"LOGIN_PROCESS","","",null,null],[17,"USER_PROCESS","","",null,null],[17,"DEAD_PROCESS","","",null,null],[17,"ACCOUNTING","","",null,null],[17,"SIGNATURE","","",null,null],[17,"SHUTDOWN_TIME","","",null,null],[17,"LC_COLLATE_MASK","","",null,null],[17,"LC_CTYPE_MASK","","",null,null],[17,"LC_MESSAGES_MASK","","",null,null],[17,"LC_MONETARY_MASK","","",null,null],[17,"LC_NUMERIC_MASK","","",null,null],[17,"LC_TIME_MASK","","",null,null],[17,"LC_ALL_MASK","","",null,null],[17,"CODESET","","",null,null],[17,"D_T_FMT","","",null,null],[17,"D_FMT","","",null,null],[17,"T_FMT","","",null,null],[17,"T_FMT_AMPM","","",null,null],[17,"AM_STR","","",null,null],[17,"PM_STR","","",null,null],[17,"DAY_1","","",null,null],[17,"DAY_2","","",null,null],[17,"DAY_3","","",null,null],[17,"DAY_4","","",null,null],[17,"DAY_5","","",null,null],[17,"DAY_6","","",null,null],[17,"DAY_7","","",null,null],[17,"ABDAY_1","","",null,null],[17,"ABDAY_2","","",null,null],[17,"ABDAY_3","","",null,null],[17,"ABDAY_4","","",null,null],[17,"ABDAY_5","","",null,null],[17,"ABDAY_6","","",null,null],[17,"ABDAY_7","","",null,null],[17,"MON_1","","",null,null],[17,"MON_2","","",null,null],[17,"MON_3","","",null,null],[17,"MON_4","","",null,null],[17,"MON_5","","",null,null],[17,"MON_6","","",null,null],[17,"MON_7","","",null,null],[17,"MON_8","","",null,null],[17,"MON_9","","",null,null],[17,"MON_10","","",null,null],[17,"MON_11","","",null,null],[17,"MON_12","","",null,null],[17,"ABMON_1","","",null,null],[17,"ABMON_2","","",null,null],[17,"ABMON_3","","",null,null],[17,"ABMON_4","","",null,null],[17,"ABMON_5","","",null,null],[17,"ABMON_6","","",null,null],[17,"ABMON_7","","",null,null],[17,"ABMON_8","","",null,null],[17,"ABMON_9","","",null,null],[17,"ABMON_10","","",null,null],[17,"ABMON_11","","",null,null],[17,"ABMON_12","","",null,null],[17,"ERA","","",null,null],[17,"ERA_D_FMT","","",null,null],[17,"ERA_D_T_FMT","","",null,null],[17,"ERA_T_FMT","","",null,null],[17,"ALT_DIGITS","","",null,null],[17,"RADIXCHAR","","",null,null],[17,"THOUSEP","","",null,null],[17,"YESEXPR","","",null,null],[17,"NOEXPR","","",null,null],[17,"YESSTR","","",null,null],[17,"NOSTR","","",null,null],[17,"CRNCYSTR","","",null,null],[17,"D_MD_ORDER","","",null,null],[17,"EXIT_FAILURE","","",null,null],[17,"EXIT_SUCCESS","","",null,null],[17,"RAND_MAX","","",null,null],[17,"EOF","","",null,null],[17,"SEEK_SET","","",null,null],[17,"SEEK_CUR","","",null,null],[17,"SEEK_END","","",null,null],[17,"_IOFBF","","",null,null],[17,"_IONBF","","",null,null],[17,"_IOLBF","","",null,null],[17,"BUFSIZ","","",null,null],[17,"FOPEN_MAX","","",null,null],[17,"FILENAME_MAX","","",null,null],[17,"L_tmpnam","","",null,null],[17,"TMP_MAX","","",null,null],[17,"_PC_LINK_MAX","","",null,null],[17,"_PC_MAX_CANON","","",null,null],[17,"_PC_MAX_INPUT","","",null,null],[17,"_PC_NAME_MAX","","",null,null],[17,"_PC_PATH_MAX","","",null,null],[17,"_PC_PIPE_BUF","","",null,null],[17,"_PC_CHOWN_RESTRICTED","","",null,null],[17,"_PC_NO_TRUNC","","",null,null],[17,"_PC_VDISABLE","","",null,null],[17,"O_RDONLY","","",null,null],[17,"O_WRONLY","","",null,null],[17,"O_RDWR","","",null,null],[17,"O_APPEND","","",null,null],[17,"O_CREAT","","",null,null],[17,"O_EXCL","","",null,null],[17,"O_NOCTTY","","",null,null],[17,"O_TRUNC","","",null,null],[17,"O_CLOEXEC","","",null,null],[17,"O_DIRECTORY","","",null,null],[17,"S_IFIFO","","",null,null],[17,"S_IFCHR","","",null,null],[17,"S_IFBLK","","",null,null],[17,"S_IFDIR","","",null,null],[17,"S_IFREG","","",null,null],[17,"S_IFLNK","","",null,null],[17,"S_IFSOCK","","",null,null],[17,"S_IFMT","","",null,null],[17,"S_IEXEC","","",null,null],[17,"S_IWRITE","","",null,null],[17,"S_IREAD","","",null,null],[17,"S_IRWXU","","",null,null],[17,"S_IXUSR","","",null,null],[17,"S_IWUSR","","",null,null],[17,"S_IRUSR","","",null,null],[17,"S_IRWXG","","",null,null],[17,"S_IXGRP","","",null,null],[17,"S_IWGRP","","",null,null],[17,"S_IRGRP","","",null,null],[17,"S_IRWXO","","",null,null],[17,"S_IXOTH","","",null,null],[17,"S_IWOTH","","",null,null],[17,"S_IROTH","","",null,null],[17,"F_OK","","",null,null],[17,"R_OK","","",null,null],[17,"W_OK","","",null,null],[17,"X_OK","","",null,null],[17,"STDIN_FILENO","","",null,null],[17,"STDOUT_FILENO","","",null,null],[17,"STDERR_FILENO","","",null,null],[17,"F_LOCK","","",null,null],[17,"F_TEST","","",null,null],[17,"F_TLOCK","","",null,null],[17,"F_ULOCK","","",null,null],[17,"F_GETLK","","",null,null],[17,"F_SETLK","","",null,null],[17,"F_SETLKW","","",null,null],[17,"SIGHUP","","",null,null],[17,"SIGINT","","",null,null],[17,"SIGQUIT","","",null,null],[17,"SIGILL","","",null,null],[17,"SIGABRT","","",null,null],[17,"SIGEMT","","",null,null],[17,"SIGFPE","","",null,null],[17,"SIGKILL","","",null,null],[17,"SIGSEGV","","",null,null],[17,"SIGPIPE","","",null,null],[17,"SIGALRM","","",null,null],[17,"SIGTERM","","",null,null],[17,"PROT_NONE","","",null,null],[17,"PROT_READ","","",null,null],[17,"PROT_WRITE","","",null,null],[17,"PROT_EXEC","","",null,null],[17,"MAP_FILE","","",null,null],[17,"MAP_SHARED","","",null,null],[17,"MAP_PRIVATE","","",null,null],[17,"MAP_FIXED","","",null,null],[17,"MAP_ANON","","",null,null],[17,"MAP_FAILED","","",null,null],[17,"MCL_CURRENT","","",null,null],[17,"MCL_FUTURE","","",null,null],[17,"MS_ASYNC","","",null,null],[17,"MS_INVALIDATE","","",null,null],[17,"MS_SYNC","","",null,null],[17,"MS_KILLPAGES","","",null,null],[17,"MS_DEACTIVATE","","",null,null],[17,"EPERM","","",null,null],[17,"ENOENT","","",null,null],[17,"ESRCH","","",null,null],[17,"EINTR","","",null,null],[17,"EIO","","",null,null],[17,"ENXIO","","",null,null],[17,"E2BIG","","",null,null],[17,"ENOEXEC","","",null,null],[17,"EBADF","","",null,null],[17,"ECHILD","","",null,null],[17,"EDEADLK","","",null,null],[17,"ENOMEM","","",null,null],[17,"EACCES","","",null,null],[17,"EFAULT","","",null,null],[17,"ENOTBLK","","",null,null],[17,"EBUSY","","",null,null],[17,"EEXIST","","",null,null],[17,"EXDEV","","",null,null],[17,"ENODEV","","",null,null],[17,"ENOTDIR","","",null,null],[17,"EISDIR","","",null,null],[17,"EINVAL","","",null,null],[17,"ENFILE","","",null,null],[17,"EMFILE","","",null,null],[17,"ENOTTY","","",null,null],[17,"ETXTBSY","","",null,null],[17,"EFBIG","","",null,null],[17,"ENOSPC","","",null,null],[17,"ESPIPE","","",null,null],[17,"EROFS","","",null,null],[17,"EMLINK","","",null,null],[17,"EPIPE","","",null,null],[17,"EDOM","","",null,null],[17,"ERANGE","","",null,null],[17,"EAGAIN","","",null,null],[17,"EWOULDBLOCK","","",null,null],[17,"EINPROGRESS","","",null,null],[17,"EALREADY","","",null,null],[17,"ENOTSOCK","","",null,null],[17,"EDESTADDRREQ","","",null,null],[17,"EMSGSIZE","","",null,null],[17,"EPROTOTYPE","","",null,null],[17,"ENOPROTOOPT","","",null,null],[17,"EPROTONOSUPPORT","","",null,null],[17,"ESOCKTNOSUPPORT","","",null,null],[17,"ENOTSUP","","",null,null],[17,"EPFNOSUPPORT","","",null,null],[17,"EAFNOSUPPORT","","",null,null],[17,"EADDRINUSE","","",null,null],[17,"EADDRNOTAVAIL","","",null,null],[17,"ENETDOWN","","",null,null],[17,"ENETUNREACH","","",null,null],[17,"ENETRESET","","",null,null],[17,"ECONNABORTED","","",null,null],[17,"ECONNRESET","","",null,null],[17,"ENOBUFS","","",null,null],[17,"EISCONN","","",null,null],[17,"ENOTCONN","","",null,null],[17,"ESHUTDOWN","","",null,null],[17,"ETOOMANYREFS","","",null,null],[17,"ETIMEDOUT","","",null,null],[17,"ECONNREFUSED","","",null,null],[17,"ELOOP","","",null,null],[17,"ENAMETOOLONG","","",null,null],[17,"EHOSTDOWN","","",null,null],[17,"EHOSTUNREACH","","",null,null],[17,"ENOTEMPTY","","",null,null],[17,"EPROCLIM","","",null,null],[17,"EUSERS","","",null,null],[17,"EDQUOT","","",null,null],[17,"ESTALE","","",null,null],[17,"EREMOTE","","",null,null],[17,"EBADRPC","","",null,null],[17,"ERPCMISMATCH","","",null,null],[17,"EPROGUNAVAIL","","",null,null],[17,"EPROGMISMATCH","","",null,null],[17,"EPROCUNAVAIL","","",null,null],[17,"ENOLCK","","",null,null],[17,"ENOSYS","","",null,null],[17,"EFTYPE","","",null,null],[17,"EAUTH","","",null,null],[17,"ENEEDAUTH","","",null,null],[17,"EPWROFF","","",null,null],[17,"EDEVERR","","",null,null],[17,"EOVERFLOW","","",null,null],[17,"EBADEXEC","","",null,null],[17,"EBADARCH","","",null,null],[17,"ESHLIBVERS","","",null,null],[17,"EBADMACHO","","",null,null],[17,"ECANCELED","","",null,null],[17,"EIDRM","","",null,null],[17,"ENOMSG","","",null,null],[17,"EILSEQ","","",null,null],[17,"ENOATTR","","",null,null],[17,"EBADMSG","","",null,null],[17,"EMULTIHOP","","",null,null],[17,"ENODATA","","",null,null],[17,"ENOLINK","","",null,null],[17,"ENOSR","","",null,null],[17,"ENOSTR","","",null,null],[17,"EPROTO","","",null,null],[17,"ETIME","","",null,null],[17,"EOPNOTSUPP","","",null,null],[17,"ENOPOLICY","","",null,null],[17,"ENOTRECOVERABLE","","",null,null],[17,"EOWNERDEAD","","",null,null],[17,"EQFULL","","",null,null],[17,"ELAST","","",null,null],[17,"EAI_SYSTEM","","",null,null],[17,"F_DUPFD","","",null,null],[17,"F_DUPFD_CLOEXEC","","",null,null],[17,"F_GETFD","","",null,null],[17,"F_SETFD","","",null,null],[17,"F_GETFL","","",null,null],[17,"F_SETFL","","",null,null],[17,"F_PREALLOCATE","","",null,null],[17,"F_RDADVISE","","",null,null],[17,"F_RDAHEAD","","",null,null],[17,"F_NOCACHE","","",null,null],[17,"F_GETPATH","","",null,null],[17,"F_FULLFSYNC","","",null,null],[17,"F_FREEZE_FS","","",null,null],[17,"F_THAW_FS","","",null,null],[17,"F_GLOBAL_NOCACHE","","",null,null],[17,"F_NODIRECT","","",null,null],[17,"F_ALLOCATECONTIG","","",null,null],[17,"F_ALLOCATEALL","","",null,null],[17,"F_PEOFPOSMODE","","",null,null],[17,"F_VOLPOSMODE","","",null,null],[17,"O_ACCMODE","","",null,null],[17,"TIOCMODG","","",null,null],[17,"TIOCMODS","","",null,null],[17,"TIOCM_LE","","",null,null],[17,"TIOCM_DTR","","",null,null],[17,"TIOCM_RTS","","",null,null],[17,"TIOCM_ST","","",null,null],[17,"TIOCM_SR","","",null,null],[17,"TIOCM_CTS","","",null,null],[17,"TIOCM_CAR","","",null,null],[17,"TIOCM_CD","","",null,null],[17,"TIOCM_RNG","","",null,null],[17,"TIOCM_RI","","",null,null],[17,"TIOCM_DSR","","",null,null],[17,"TIOCEXCL","","",null,null],[17,"TIOCNXCL","","",null,null],[17,"TIOCFLUSH","","",null,null],[17,"TIOCGETD","","",null,null],[17,"TIOCSETD","","",null,null],[17,"TIOCIXON","","",null,null],[17,"TIOCIXOFF","","",null,null],[17,"TIOCSBRK","","",null,null],[17,"TIOCCBRK","","",null,null],[17,"TIOCSDTR","","",null,null],[17,"TIOCCDTR","","",null,null],[17,"TIOCGPGRP","","",null,null],[17,"TIOCSPGRP","","",null,null],[17,"TIOCOUTQ","","",null,null],[17,"TIOCSTI","","",null,null],[17,"TIOCNOTTY","","",null,null],[17,"TIOCPKT","","",null,null],[17,"TIOCPKT_DATA","","",null,null],[17,"TIOCPKT_FLUSHREAD","","",null,null],[17,"TIOCPKT_FLUSHWRITE","","",null,null],[17,"TIOCPKT_STOP","","",null,null],[17,"TIOCPKT_START","","",null,null],[17,"TIOCPKT_NOSTOP","","",null,null],[17,"TIOCPKT_DOSTOP","","",null,null],[17,"TIOCPKT_IOCTL","","",null,null],[17,"TIOCSTOP","","",null,null],[17,"TIOCSTART","","",null,null],[17,"TIOCMSET","","",null,null],[17,"TIOCMBIS","","",null,null],[17,"TIOCMBIC","","",null,null],[17,"TIOCMGET","","",null,null],[17,"TIOCREMOTE","","",null,null],[17,"TIOCGWINSZ","","",null,null],[17,"TIOCSWINSZ","","",null,null],[17,"TIOCUCNTL","","",null,null],[17,"TIOCSTAT","","",null,null],[17,"TIOCSCONS","","",null,null],[17,"TIOCCONS","","",null,null],[17,"TIOCSCTTY","","",null,null],[17,"TIOCEXT","","",null,null],[17,"TIOCSIG","","",null,null],[17,"TIOCDRAIN","","",null,null],[17,"TIOCMSDTRWAIT","","",null,null],[17,"TIOCMGDTRWAIT","","",null,null],[17,"TIOCSDRAINWAIT","","",null,null],[17,"TIOCGDRAINWAIT","","",null,null],[17,"TIOCDSIMICROCODE","","",null,null],[17,"TIOCPTYGRANT","","",null,null],[17,"TIOCPTYGNAME","","",null,null],[17,"TIOCPTYUNLK","","",null,null],[17,"SIGTRAP","","",null,null],[17,"GLOB_APPEND","","",null,null],[17,"GLOB_DOOFFS","","",null,null],[17,"GLOB_ERR","","",null,null],[17,"GLOB_MARK","","",null,null],[17,"GLOB_NOCHECK","","",null,null],[17,"GLOB_NOSORT","","",null,null],[17,"GLOB_NOESCAPE","","",null,null],[17,"GLOB_NOSPACE","","",null,null],[17,"GLOB_ABORTED","","",null,null],[17,"GLOB_NOMATCH","","",null,null],[17,"POSIX_MADV_NORMAL","","",null,null],[17,"POSIX_MADV_RANDOM","","",null,null],[17,"POSIX_MADV_SEQUENTIAL","","",null,null],[17,"POSIX_MADV_WILLNEED","","",null,null],[17,"POSIX_MADV_DONTNEED","","",null,null],[17,"_SC_IOV_MAX","","",null,null],[17,"_SC_GETGR_R_SIZE_MAX","","",null,null],[17,"_SC_GETPW_R_SIZE_MAX","","",null,null],[17,"_SC_LOGIN_NAME_MAX","","",null,null],[17,"_SC_MQ_PRIO_MAX","","",null,null],[17,"_SC_THREAD_ATTR_STACKADDR","","",null,null],[17,"_SC_THREAD_ATTR_STACKSIZE","","",null,null],[17,"_SC_THREAD_DESTRUCTOR_ITERATIONS","","",null,null],[17,"_SC_THREAD_KEYS_MAX","","",null,null],[17,"_SC_THREAD_PRIO_INHERIT","","",null,null],[17,"_SC_THREAD_PRIO_PROTECT","","",null,null],[17,"_SC_THREAD_PRIORITY_SCHEDULING","","",null,null],[17,"_SC_THREAD_PROCESS_SHARED","","",null,null],[17,"_SC_THREAD_SAFE_FUNCTIONS","","",null,null],[17,"_SC_THREAD_STACK_MIN","","",null,null],[17,"_SC_THREAD_THREADS_MAX","","",null,null],[17,"_SC_THREADS","","",null,null],[17,"_SC_TTY_NAME_MAX","","",null,null],[17,"_SC_ATEXIT_MAX","","",null,null],[17,"_SC_XOPEN_CRYPT","","",null,null],[17,"_SC_XOPEN_ENH_I18N","","",null,null],[17,"_SC_XOPEN_LEGACY","","",null,null],[17,"_SC_XOPEN_REALTIME","","",null,null],[17,"_SC_XOPEN_REALTIME_THREADS","","",null,null],[17,"_SC_XOPEN_SHM","","",null,null],[17,"_SC_XOPEN_UNIX","","",null,null],[17,"_SC_XOPEN_VERSION","","",null,null],[17,"_SC_XOPEN_XCU_VERSION","","",null,null],[17,"PTHREAD_CREATE_JOINABLE","","",null,null],[17,"PTHREAD_CREATE_DETACHED","","",null,null],[17,"PTHREAD_STACK_MIN","","",null,null],[17,"RLIMIT_CPU","","",null,null],[17,"RLIMIT_FSIZE","","",null,null],[17,"RLIMIT_DATA","","",null,null],[17,"RLIMIT_STACK","","",null,null],[17,"RLIMIT_CORE","","",null,null],[17,"RLIMIT_AS","","",null,null],[17,"RLIMIT_RSS","","",null,null],[17,"RLIMIT_MEMLOCK","","",null,null],[17,"RLIMIT_NPROC","","",null,null],[17,"RLIMIT_NOFILE","","",null,null],[17,"RLIM_NLIMITS","","",null,null],[17,"_RLIMIT_POSIX_FLAG","","",null,null],[17,"RLIM_INFINITY","","",null,null],[17,"RUSAGE_SELF","","",null,null],[17,"RUSAGE_CHILDREN","","",null,null],[17,"MADV_NORMAL","","",null,null],[17,"MADV_RANDOM","","",null,null],[17,"MADV_SEQUENTIAL","","",null,null],[17,"MADV_WILLNEED","","",null,null],[17,"MADV_DONTNEED","","",null,null],[17,"MADV_FREE","","",null,null],[17,"MADV_ZERO_WIRED_PAGES","","",null,null],[17,"MADV_FREE_REUSABLE","","",null,null],[17,"MADV_FREE_REUSE","","",null,null],[17,"MADV_CAN_REUSE","","",null,null],[17,"MINCORE_INCORE","","",null,null],[17,"MINCORE_REFERENCED","","",null,null],[17,"MINCORE_MODIFIED","","",null,null],[17,"MINCORE_REFERENCED_OTHER","","",null,null],[17,"MINCORE_MODIFIED_OTHER","","",null,null],[17,"AF_UNIX","","",null,null],[17,"AF_INET","","",null,null],[17,"AF_INET6","","",null,null],[17,"SOCK_STREAM","","",null,null],[17,"SOCK_DGRAM","","",null,null],[17,"SOCK_RAW","","",null,null],[17,"SOCK_SEQPACKET","","",null,null],[17,"IPPROTO_TCP","","",null,null],[17,"IPPROTO_IP","","",null,null],[17,"IPPROTO_IPV6","","",null,null],[17,"IP_MULTICAST_TTL","","",null,null],[17,"IP_MULTICAST_LOOP","","",null,null],[17,"IP_TTL","","",null,null],[17,"IP_HDRINCL","","",null,null],[17,"IP_ADD_MEMBERSHIP","","",null,null],[17,"IP_DROP_MEMBERSHIP","","",null,null],[17,"IPV6_JOIN_GROUP","","",null,null],[17,"IPV6_LEAVE_GROUP","","",null,null],[17,"TCP_NODELAY","","",null,null],[17,"TCP_KEEPALIVE","","",null,null],[17,"SOL_SOCKET","","",null,null],[17,"SO_DEBUG","","",null,null],[17,"SO_ACCEPTCONN","","",null,null],[17,"SO_REUSEADDR","","",null,null],[17,"SO_KEEPALIVE","","",null,null],[17,"SO_DONTROUTE","","",null,null],[17,"SO_BROADCAST","","",null,null],[17,"SO_USELOOPBACK","","",null,null],[17,"SO_LINGER","","",null,null],[17,"SO_OOBINLINE","","",null,null],[17,"SO_REUSEPORT","","",null,null],[17,"SO_SNDBUF","","",null,null],[17,"SO_RCVBUF","","",null,null],[17,"SO_SNDLOWAT","","",null,null],[17,"SO_RCVLOWAT","","",null,null],[17,"SO_SNDTIMEO","","",null,null],[17,"SO_RCVTIMEO","","",null,null],[17,"SO_ERROR","","",null,null],[17,"SO_TYPE","","",null,null],[17,"IFF_LOOPBACK","","",null,null],[17,"SHUT_RD","","",null,null],[17,"SHUT_WR","","",null,null],[17,"SHUT_RDWR","","",null,null],[17,"LOCK_SH","","",null,null],[17,"LOCK_EX","","",null,null],[17,"LOCK_NB","","",null,null],[17,"LOCK_UN","","",null,null],[17,"O_DSYNC","","",null,null],[17,"O_SYNC","","",null,null],[17,"O_NONBLOCK","","",null,null],[17,"MAP_COPY","","",null,null],[17,"MAP_RENAME","","",null,null],[17,"MAP_NORESERVE","","",null,null],[17,"MAP_NOEXTEND","","",null,null],[17,"MAP_HASSEMAPHORE","","",null,null],[17,"MAP_NOCACHE","","",null,null],[17,"MAP_JIT","","",null,null],[17,"IPPROTO_RAW","","",null,null],[17,"SO_NREAD","","",null,null],[17,"SO_NKE","","",null,null],[17,"SO_NOSIGPIPE","","",null,null],[17,"SO_NOADDRERR","","",null,null],[17,"SO_NWRITE","","",null,null],[17,"SO_DONTTRUNC","","",null,null],[17,"SO_WANTMORE","","",null,null],[17,"SO_WANTOOBFLAG","","",null,null],[17,"_SC_ARG_MAX","","",null,null],[17,"_SC_CHILD_MAX","","",null,null],[17,"_SC_CLK_TCK","","",null,null],[17,"_SC_NGROUPS_MAX","","",null,null],[17,"_SC_OPEN_MAX","","",null,null],[17,"_SC_JOB_CONTROL","","",null,null],[17,"_SC_SAVED_IDS","","",null,null],[17,"_SC_VERSION","","",null,null],[17,"_SC_BC_BASE_MAX","","",null,null],[17,"_SC_BC_DIM_MAX","","",null,null],[17,"_SC_BC_SCALE_MAX","","",null,null],[17,"_SC_BC_STRING_MAX","","",null,null],[17,"_SC_COLL_WEIGHTS_MAX","","",null,null],[17,"_SC_EXPR_NEST_MAX","","",null,null],[17,"_SC_LINE_MAX","","",null,null],[17,"_SC_RE_DUP_MAX","","",null,null],[17,"_SC_2_VERSION","","",null,null],[17,"_SC_2_C_BIND","","",null,null],[17,"_SC_2_C_DEV","","",null,null],[17,"_SC_2_CHAR_TERM","","",null,null],[17,"_SC_2_FORT_DEV","","",null,null],[17,"_SC_2_FORT_RUN","","",null,null],[17,"_SC_2_LOCALEDEF","","",null,null],[17,"_SC_2_SW_DEV","","",null,null],[17,"_SC_2_UPE","","",null,null],[17,"_SC_STREAM_MAX","","",null,null],[17,"_SC_TZNAME_MAX","","",null,null],[17,"_SC_ASYNCHRONOUS_IO","","",null,null],[17,"_SC_PAGESIZE","","",null,null],[17,"_SC_MEMLOCK","","",null,null],[17,"_SC_MEMLOCK_RANGE","","",null,null],[17,"_SC_MEMORY_PROTECTION","","",null,null],[17,"_SC_MESSAGE_PASSING","","",null,null],[17,"_SC_PRIORITIZED_IO","","",null,null],[17,"_SC_PRIORITY_SCHEDULING","","",null,null],[17,"_SC_REALTIME_SIGNALS","","",null,null],[17,"_SC_SEMAPHORES","","",null,null],[17,"_SC_FSYNC","","",null,null],[17,"_SC_SHARED_MEMORY_OBJECTS","","",null,null],[17,"_SC_SYNCHRONIZED_IO","","",null,null],[17,"_SC_TIMERS","","",null,null],[17,"_SC_AIO_LISTIO_MAX","","",null,null],[17,"_SC_AIO_MAX","","",null,null],[17,"_SC_AIO_PRIO_DELTA_MAX","","",null,null],[17,"_SC_DELAYTIMER_MAX","","",null,null],[17,"_SC_MQ_OPEN_MAX","","",null,null],[17,"_SC_MAPPED_FILES","","",null,null],[17,"_SC_RTSIG_MAX","","",null,null],[17,"_SC_SEM_NSEMS_MAX","","",null,null],[17,"_SC_SEM_VALUE_MAX","","",null,null],[17,"_SC_SIGQUEUE_MAX","","",null,null],[17,"_SC_TIMER_MAX","","",null,null],[17,"_SC_NPROCESSORS_CONF","","",null,null],[17,"_SC_NPROCESSORS_ONLN","","",null,null],[17,"_SC_2_PBS","","",null,null],[17,"_SC_2_PBS_ACCOUNTING","","",null,null],[17,"_SC_2_PBS_CHECKPOINT","","",null,null],[17,"_SC_2_PBS_LOCATE","","",null,null],[17,"_SC_2_PBS_MESSAGE","","",null,null],[17,"_SC_2_PBS_TRACK","","",null,null],[17,"_SC_ADVISORY_INFO","","",null,null],[17,"_SC_BARRIERS","","",null,null],[17,"_SC_CLOCK_SELECTION","","",null,null],[17,"_SC_CPUTIME","","",null,null],[17,"_SC_FILE_LOCKING","","",null,null],[17,"_SC_HOST_NAME_MAX","","",null,null],[17,"_SC_MONOTONIC_CLOCK","","",null,null],[17,"_SC_READER_WRITER_LOCKS","","",null,null],[17,"_SC_REGEXP","","",null,null],[17,"_SC_SHELL","","",null,null],[17,"_SC_SPAWN","","",null,null],[17,"_SC_SPIN_LOCKS","","",null,null],[17,"_SC_SPORADIC_SERVER","","",null,null],[17,"_SC_THREAD_CPUTIME","","",null,null],[17,"_SC_THREAD_SPORADIC_SERVER","","",null,null],[17,"_SC_TIMEOUTS","","",null,null],[17,"_SC_TRACE","","",null,null],[17,"_SC_TRACE_EVENT_FILTER","","",null,null],[17,"_SC_TRACE_INHERIT","","",null,null],[17,"_SC_TRACE_LOG","","",null,null],[17,"_SC_TYPED_MEMORY_OBJECTS","","",null,null],[17,"_SC_V6_ILP32_OFF32","","",null,null],[17,"_SC_V6_ILP32_OFFBIG","","",null,null],[17,"_SC_V6_LP64_OFF64","","",null,null],[17,"_SC_V6_LPBIG_OFFBIG","","",null,null],[17,"_SC_IPV6","","",null,null],[17,"_SC_RAW_SOCKETS","","",null,null],[17,"_SC_SYMLOOP_MAX","","",null,null],[17,"_SC_PAGE_SIZE","","",null,null],[17,"_SC_XOPEN_STREAMS","","",null,null],[17,"_SC_XBS5_ILP32_OFF32","","",null,null],[17,"_SC_XBS5_ILP32_OFFBIG","","",null,null],[17,"_SC_XBS5_LP64_OFF64","","",null,null],[17,"_SC_XBS5_LPBIG_OFFBIG","","",null,null],[17,"_SC_SS_REPL_MAX","","",null,null],[17,"_SC_TRACE_EVENT_NAME_MAX","","",null,null],[17,"_SC_TRACE_NAME_MAX","","",null,null],[17,"_SC_TRACE_SYS_MAX","","",null,null],[17,"_SC_TRACE_USER_EVENT_MAX","","",null,null],[17,"_SC_PASS_MAX","","",null,null],[17,"PTHREAD_MUTEX_NORMAL","","",null,null],[17,"PTHREAD_MUTEX_ERRORCHECK","","",null,null],[17,"PTHREAD_MUTEX_RECURSIVE","","",null,null],[17,"PTHREAD_MUTEX_DEFAULT","","",null,null],[17,"_PTHREAD_MUTEX_SIG_init","","",null,null],[17,"_PTHREAD_COND_SIG_init","","",null,null],[17,"_PTHREAD_RWLOCK_SIG_init","","",null,null],[17,"PTHREAD_MUTEX_INITIALIZER","","",null,null],[17,"PTHREAD_COND_INITIALIZER","","",null,null],[17,"PTHREAD_RWLOCK_INITIALIZER","","",null,null],[17,"SIGSTKSZ","","",null,null],[17,"FD_SETSIZE","","",null,null],[17,"ST_NOSUID","","",null,null],[17,"EVFILT_READ","","",null,null],[17,"EVFILT_WRITE","","",null,null],[17,"EVFILT_AIO","","",null,null],[17,"EVFILT_VNODE","","",null,null],[17,"EVFILT_PROC","","",null,null],[17,"EVFILT_SIGNAL","","",null,null],[17,"EVFILT_TIMER","","",null,null],[17,"EVFILT_MACHPORT","","",null,null],[17,"EVFILT_FS","","",null,null],[17,"EVFILT_USER","","",null,null],[17,"EVFILT_VM","","",null,null],[17,"EV_ADD","","",null,null],[17,"EV_DELETE","","",null,null],[17,"EV_ENABLE","","",null,null],[17,"EV_DISABLE","","",null,null],[17,"EV_ONESHOT","","",null,null],[17,"EV_CLEAR","","",null,null],[17,"EV_RECEIPT","","",null,null],[17,"EV_DISPATCH","","",null,null],[17,"EV_FLAG0","","",null,null],[17,"EV_POLL","","",null,null],[17,"EV_FLAG1","","",null,null],[17,"EV_OOBAND","","",null,null],[17,"EV_ERROR","","",null,null],[17,"EV_EOF","","",null,null],[17,"EV_SYSFLAGS","","",null,null],[17,"NOTE_TRIGGER","","",null,null],[17,"NOTE_FFNOP","","",null,null],[17,"NOTE_FFAND","","",null,null],[17,"NOTE_FFOR","","",null,null],[17,"NOTE_FFCOPY","","",null,null],[17,"NOTE_FFCTRLMASK","","",null,null],[17,"NOTE_FFLAGSMASK","","",null,null],[17,"NOTE_LOWAT","","",null,null],[17,"NOTE_DELETE","","",null,null],[17,"NOTE_WRITE","","",null,null],[17,"NOTE_EXTEND","","",null,null],[17,"NOTE_ATTRIB","","",null,null],[17,"NOTE_LINK","","",null,null],[17,"NOTE_RENAME","","",null,null],[17,"NOTE_REVOKE","","",null,null],[17,"NOTE_NONE","","",null,null],[17,"NOTE_EXIT","","",null,null],[17,"NOTE_FORK","","",null,null],[17,"NOTE_EXEC","","",null,null],[17,"NOTE_REAP","","",null,null],[17,"NOTE_SIGNAL","","",null,null],[17,"NOTE_EXITSTATUS","","",null,null],[17,"NOTE_EXIT_DETAIL","","",null,null],[17,"NOTE_PDATAMASK","","",null,null],[17,"NOTE_PCTRLMASK","","",null,null],[17,"NOTE_EXIT_REPARENTED","","",null,null],[17,"NOTE_EXIT_DETAIL_MASK","","",null,null],[17,"NOTE_EXIT_DECRYPTFAIL","","",null,null],[17,"NOTE_EXIT_MEMORY","","",null,null],[17,"NOTE_EXIT_CSERROR","","",null,null],[17,"NOTE_VM_PRESSURE","","",null,null],[17,"NOTE_VM_PRESSURE_TERMINATE","","",null,null],[17,"NOTE_VM_PRESSURE_SUDDEN_TERMINATE","","",null,null],[17,"NOTE_VM_ERROR","","",null,null],[17,"NOTE_SECONDS","","",null,null],[17,"NOTE_USECONDS","","",null,null],[17,"NOTE_NSECONDS","","",null,null],[17,"NOTE_ABSOLUTE","","",null,null],[17,"NOTE_LEEWAY","","",null,null],[17,"NOTE_CRITICAL","","",null,null],[17,"NOTE_BACKGROUND","","",null,null],[17,"NOTE_TRACK","","",null,null],[17,"NOTE_TRACKERR","","",null,null],[17,"NOTE_CHILD","","",null,null],[17,"NL0","","",null,null],[17,"NL1","","",null,null],[17,"TAB0","","",null,null],[17,"TAB1","","",null,null],[17,"TAB2","","",null,null],[17,"CR0","","",null,null],[17,"CR1","","",null,null],[17,"CR2","","",null,null],[17,"CR3","","",null,null],[17,"FF0","","",null,null],[17,"FF1","","",null,null],[17,"BS0","","",null,null],[17,"BS1","","",null,null],[17,"TAB3","","",null,null],[17,"VT0","","",null,null],[17,"VT1","","",null,null],[17,"IUTF8","","",null,null],[17,"CRTSCTS","","",null,null],[17,"NI_MAXHOST","","",null,null],[17,"Q_GETQUOTA","","",null,null],[17,"Q_SETQUOTA","","",null,null],[17,"RTLD_LOCAL","","",null,null],[17,"RTLD_FIRST","","",null,null],[17,"RTLD_NODELETE","","",null,null],[17,"RTLD_NOLOAD","","",null,null],[17,"RTLD_GLOBAL","","",null,null],[17,"_WSTOPPED","","",null,null],[17,"LOG_NETINFO","","",null,null],[17,"LOG_REMOTEAUTH","","",null,null],[17,"LOG_INSTALL","","",null,null],[17,"LOG_RAS","","",null,null],[17,"LOG_LAUNCHD","","",null,null],[17,"LOG_NFACILITIES","","",null,null],[17,"CTLTYPE","","",null,null],[17,"CTLTYPE_NODE","","",null,null],[17,"CTLTYPE_INT","","",null,null],[17,"CTLTYPE_STRING","","",null,null],[17,"CTLTYPE_QUAD","","",null,null],[17,"CTLTYPE_OPAQUE","","",null,null],[17,"CTLTYPE_STRUCT","","",null,null],[17,"CTLFLAG_RD","","",null,null],[17,"CTLFLAG_WR","","",null,null],[17,"CTLFLAG_RW","","",null,null],[17,"CTLFLAG_NOLOCK","","",null,null],[17,"CTLFLAG_ANYBODY","","",null,null],[17,"CTLFLAG_SECURE","","",null,null],[17,"CTLFLAG_MASKED","","",null,null],[17,"CTLFLAG_NOAUTO","","",null,null],[17,"CTLFLAG_KERN","","",null,null],[17,"CTLFLAG_LOCKED","","",null,null],[17,"CTLFLAG_OID2","","",null,null],[17,"CTL_UNSPEC","","",null,null],[17,"CTL_KERN","","",null,null],[17,"CTL_VM","","",null,null],[17,"CTL_VFS","","",null,null],[17,"CTL_NET","","",null,null],[17,"CTL_DEBUG","","",null,null],[17,"CTL_HW","","",null,null],[17,"CTL_MACHDEP","","",null,null],[17,"CTL_USER","","",null,null],[17,"CTL_MAXID","","",null,null],[17,"KERN_OSTYPE","","",null,null],[17,"KERN_OSRELEASE","","",null,null],[17,"KERN_OSREV","","",null,null],[17,"KERN_VERSION","","",null,null],[17,"KERN_MAXVNODES","","",null,null],[17,"KERN_MAXPROC","","",null,null],[17,"KERN_MAXFILES","","",null,null],[17,"KERN_ARGMAX","","",null,null],[17,"KERN_SECURELVL","","",null,null],[17,"KERN_HOSTNAME","","",null,null],[17,"KERN_HOSTID","","",null,null],[17,"KERN_CLOCKRATE","","",null,null],[17,"KERN_VNODE","","",null,null],[17,"KERN_PROC","","",null,null],[17,"KERN_FILE","","",null,null],[17,"KERN_PROF","","",null,null],[17,"KERN_POSIX1","","",null,null],[17,"KERN_NGROUPS","","",null,null],[17,"KERN_JOB_CONTROL","","",null,null],[17,"KERN_SAVED_IDS","","",null,null],[17,"KERN_BOOTTIME","","",null,null],[17,"KERN_NISDOMAINNAME","","",null,null],[17,"KERN_DOMAINNAME","","",null,null],[17,"KERN_MAXPARTITIONS","","",null,null],[17,"KERN_KDEBUG","","",null,null],[17,"KERN_UPDATEINTERVAL","","",null,null],[17,"KERN_OSRELDATE","","",null,null],[17,"KERN_NTP_PLL","","",null,null],[17,"KERN_BOOTFILE","","",null,null],[17,"KERN_MAXFILESPERPROC","","",null,null],[17,"KERN_MAXPROCPERUID","","",null,null],[17,"KERN_DUMPDEV","","",null,null],[17,"KERN_IPC","","",null,null],[17,"KERN_DUMMY","","",null,null],[17,"KERN_PS_STRINGS","","",null,null],[17,"KERN_USRSTACK32","","",null,null],[17,"KERN_LOGSIGEXIT","","",null,null],[17,"KERN_SYMFILE","","",null,null],[17,"KERN_PROCARGS","","",null,null],[17,"KERN_NETBOOT","","",null,null],[17,"KERN_SYSV","","",null,null],[17,"KERN_AFFINITY","","",null,null],[17,"KERN_TRANSLATE","","",null,null],[17,"KERN_CLASSIC","","",null,null],[17,"KERN_EXEC","","",null,null],[17,"KERN_CLASSICHANDLER","","",null,null],[17,"KERN_AIOMAX","","",null,null],[17,"KERN_AIOPROCMAX","","",null,null],[17,"KERN_AIOTHREADS","","",null,null],[17,"KERN_COREFILE","","",null,null],[17,"KERN_COREDUMP","","",null,null],[17,"KERN_SUGID_COREDUMP","","",null,null],[17,"KERN_PROCDELAYTERM","","",null,null],[17,"KERN_SHREG_PRIVATIZABLE","","",null,null],[17,"KERN_LOW_PRI_WINDOW","","",null,null],[17,"KERN_LOW_PRI_DELAY","","",null,null],[17,"KERN_POSIX","","",null,null],[17,"KERN_USRSTACK64","","",null,null],[17,"KERN_NX_PROTECTION","","",null,null],[17,"KERN_TFP","","",null,null],[17,"KERN_PROCNAME","","",null,null],[17,"KERN_THALTSTACK","","",null,null],[17,"KERN_SPECULATIVE_READS","","",null,null],[17,"KERN_OSVERSION","","",null,null],[17,"KERN_SAFEBOOT","","",null,null],[17,"KERN_RAGEVNODE","","",null,null],[17,"KERN_TTY","","",null,null],[17,"KERN_CHECKOPENEVT","","",null,null],[17,"KERN_THREADNAME","","",null,null],[17,"KERN_MAXID","","",null,null],[17,"KERN_RAGE_PROC","","",null,null],[17,"KERN_RAGE_THREAD","","",null,null],[17,"KERN_UNRAGE_PROC","","",null,null],[17,"KERN_UNRAGE_THREAD","","",null,null],[17,"KERN_OPENEVT_PROC","","",null,null],[17,"KERN_UNOPENEVT_PROC","","",null,null],[17,"KERN_TFP_POLICY","","",null,null],[17,"KERN_TFP_POLICY_DENY","","",null,null],[17,"KERN_TFP_POLICY_DEFAULT","","",null,null],[17,"KERN_KDEFLAGS","","",null,null],[17,"KERN_KDDFLAGS","","",null,null],[17,"KERN_KDENABLE","","",null,null],[17,"KERN_KDSETBUF","","",null,null],[17,"KERN_KDGETBUF","","",null,null],[17,"KERN_KDSETUP","","",null,null],[17,"KERN_KDREMOVE","","",null,null],[17,"KERN_KDSETREG","","",null,null],[17,"KERN_KDGETREG","","",null,null],[17,"KERN_KDREADTR","","",null,null],[17,"KERN_KDPIDTR","","",null,null],[17,"KERN_KDTHRMAP","","",null,null],[17,"KERN_KDPIDEX","","",null,null],[17,"KERN_KDSETRTCDEC","","",null,null],[17,"KERN_KDGETENTROPY","","",null,null],[17,"KERN_KDWRITETR","","",null,null],[17,"KERN_KDWRITEMAP","","",null,null],[17,"KERN_KDENABLE_BG_TRACE","","",null,null],[17,"KERN_KDDISABLE_BG_TRACE","","",null,null],[17,"KERN_KDREADCURTHRMAP","","",null,null],[17,"KERN_KDSET_TYPEFILTER","","",null,null],[17,"KERN_KDBUFWAIT","","",null,null],[17,"KERN_KDCPUMAP","","",null,null],[17,"KERN_PROC_ALL","","",null,null],[17,"KERN_PROC_PID","","",null,null],[17,"KERN_PROC_PGRP","","",null,null],[17,"KERN_PROC_SESSION","","",null,null],[17,"KERN_PROC_TTY","","",null,null],[17,"KERN_PROC_UID","","",null,null],[17,"KERN_PROC_RUID","","",null,null],[17,"KERN_PROC_LCID","","",null,null],[17,"KIPC_MAXSOCKBUF","","",null,null],[17,"KIPC_SOCKBUF_WASTE","","",null,null],[17,"KIPC_SOMAXCONN","","",null,null],[17,"KIPC_MAX_LINKHDR","","",null,null],[17,"KIPC_MAX_PROTOHDR","","",null,null],[17,"KIPC_MAX_HDR","","",null,null],[17,"KIPC_MAX_DATALEN","","",null,null],[17,"KIPC_MBSTAT","","",null,null],[17,"KIPC_NMBCLUSTERS","","",null,null],[17,"KIPC_SOQLIMITCOMPAT","","",null,null],[17,"VM_METER","","",null,null],[17,"VM_LOADAVG","","",null,null],[17,"VM_MACHFACTOR","","",null,null],[17,"VM_SWAPUSAGE","","",null,null],[17,"VM_MAXID","","",null,null],[17,"HW_MACHINE","","",null,null],[17,"HW_MODEL","","",null,null],[17,"HW_NCPU","","",null,null],[17,"HW_BYTEORDER","","",null,null],[17,"HW_PHYSMEM","","",null,null],[17,"HW_USERMEM","","",null,null],[17,"HW_PAGESIZE","","",null,null],[17,"HW_DISKNAMES","","",null,null],[17,"HW_DISKSTATS","","",null,null],[17,"HW_EPOCH","","",null,null],[17,"HW_FLOATINGPT","","",null,null],[17,"HW_MACHINE_ARCH","","",null,null],[17,"HW_VECTORUNIT","","",null,null],[17,"HW_BUS_FREQ","","",null,null],[17,"HW_CPU_FREQ","","",null,null],[17,"HW_CACHELINE","","",null,null],[17,"HW_L1ICACHESIZE","","",null,null],[17,"HW_L1DCACHESIZE","","",null,null],[17,"HW_L2SETTINGS","","",null,null],[17,"HW_L2CACHESIZE","","",null,null],[17,"HW_L3SETTINGS","","",null,null],[17,"HW_L3CACHESIZE","","",null,null],[17,"HW_TB_FREQ","","",null,null],[17,"HW_MEMSIZE","","",null,null],[17,"HW_AVAILCPU","","",null,null],[17,"HW_MAXID","","",null,null],[17,"USER_CS_PATH","","",null,null],[17,"USER_BC_BASE_MAX","","",null,null],[17,"USER_BC_DIM_MAX","","",null,null],[17,"USER_BC_SCALE_MAX","","",null,null],[17,"USER_BC_STRING_MAX","","",null,null],[17,"USER_COLL_WEIGHTS_MAX","","",null,null],[17,"USER_EXPR_NEST_MAX","","",null,null],[17,"USER_LINE_MAX","","",null,null],[17,"USER_RE_DUP_MAX","","",null,null],[17,"USER_POSIX2_VERSION","","",null,null],[17,"USER_POSIX2_C_BIND","","",null,null],[17,"USER_POSIX2_C_DEV","","",null,null],[17,"USER_POSIX2_CHAR_TERM","","",null,null],[17,"USER_POSIX2_FORT_DEV","","",null,null],[17,"USER_POSIX2_FORT_RUN","","",null,null],[17,"USER_POSIX2_LOCALEDEF","","",null,null],[17,"USER_POSIX2_SW_DEV","","",null,null],[17,"USER_POSIX2_UPE","","",null,null],[17,"USER_STREAM_MAX","","",null,null],[17,"USER_TZNAME_MAX","","",null,null],[17,"USER_MAXID","","",null,null],[17,"CTL_DEBUG_NAME","","",null,null],[17,"CTL_DEBUG_VALUE","","",null,null],[17,"CTL_DEBUG_MAXID","","",null,null],[17,"POLLRDNORM","","",null,null],[17,"POLLWRNORM","","",null,null],[17,"POLLRDBAND","","",null,null],[17,"POLLWRBAND","","",null,null],[17,"PRIO_DARWIN_THREAD","","",null,null],[17,"PRIO_DARWIN_PROCESS","","",null,null],[17,"PRIO_DARWIN_BG","","",null,null],[17,"PRIO_DARWIN_NONUI","","",null,null],[17,"SEM_FAILED","","",null,null],[17,"__PTHREAD_MUTEX_SIZE__","","",null,null],[17,"__PTHREAD_COND_SIZE__","","",null,null],[17,"__PTHREAD_CONDATTR_SIZE__","","",null,null],[17,"__PTHREAD_RWLOCK_SIZE__","","",null,null],[17,"TIOCTIMESTAMP","","",null,null],[17,"TIOCDCDTIMESTAMP","","",null,null]],"paths":[[3,"group"],[3,"utimbuf"],[3,"timeval"],[3,"timespec"],[3,"rlimit"],[3,"rusage"],[3,"in_addr"],[3,"in6_addr"],[3,"ip_mreq"],[3,"ipv6_mreq"],[3,"hostent"],[3,"iovec"],[3,"pollfd"],[3,"winsize"],[3,"linger"],[3,"sockaddr"],[3,"sockaddr_in6"],[3,"sockaddr_un"],[3,"passwd"],[3,"ifaddrs"],[3,"tm"],[3,"utsname"],[3,"msghdr"],[3,"if_nameindex"],[3,"utmpx"],[3,"glob_t"],[3,"sockaddr_storage"],[3,"addrinfo"],[3,"mach_timebase_info"],[3,"stat"],[3,"dirent"],[3,"siginfo_t"],[3,"sigaction"],[3,"stack_t"],[3,"fstore_t"],[3,"radvisory"],[3,"statvfs"],[3,"Dl_info"],[3,"sockaddr_in"],[3,"statfs"],[3,"kevent"],[3,"kevent64_s"],[3,"dqblk"],[3,"termios"],[3,"flock"],[3,"sf_hdtr"],[3,"lconv"],[3,"pthread_attr_t"],[3,"pthread_mutex_t"],[3,"pthread_mutexattr_t"],[3,"pthread_cond_t"],[3,"pthread_condattr_t"],[3,"pthread_rwlock_t"],[3,"fd_set"],[3,"fsid_t"]]};
searchIndex["winapi"] = {"doc":"","items":[],"paths":[]};
searchIndex["ansi_term"] = {"doc":"This is a library for controlling colours and formatting, such as\nred bold text or blue underlined text, on ANSI terminals.","items":[[3,"ANSIGenericString","ansi_term","An ANSIGenericString includes a generic string type and a Style to\ndisplay that string.  ANSIString and ANSIByteString are aliases for\nthis type on str and [u8], respectively.",null,null],[3,"Prefix","","Like `ANSIString`, but only displays the style prefix.",null,null],[3,"Suffix","","Like `ANSIString`, but only displays the style suffix.",null,null],[3,"Infix","","Like `ANSIString`, but only displays the difference between two\nstyles.",null,null],[3,"Style","","A style is a collection of properties that can format a string\nusing ANSI escape codes.",null,null],[3,"ANSIGenericStrings","","A set of `ANSIGenericString`s collected together, in order to be\nwritten with a minimum of control characters.",null,null],[12,"0","","",0,null],[4,"Colour","","A colour is one specific type of ANSI escape code, and can refer\nto either the foreground or background colour.",null,null],[13,"Black","","Colour #0 (foreground code `30`, background code `40`).",1,null],[13,"Red","","Colour #1 (foreground code `31`, background code `41`).",1,null],[13,"Green","","Colour #2 (foreground code `32`, background code `42`).",1,null],[13,"Yellow","","Colour #3 (foreground code `33`, background code `43`).",1,null],[13,"Blue","","Colour #4 (foreground code `34`, background code `44`).",1,null],[13,"Purple","","Colour #5 (foreground code `35`, background code `45`).",1,null],[13,"Cyan","","Colour #6 (foreground code `36`, background code `46`).",1,null],[13,"White","","Colour #7 (foreground code `37`, background code `47`).",1,null],[13,"Fixed","","A colour number from 0 to 255, for use in 256-colour terminal\nenvironments.",1,null],[13,"RGB","","A 24-bit RGB color, as specified by ISO-8613-3.",1,null],[5,"ANSIStrings","","A function to construct an ANSIStrings instance.",null,null],[5,"ANSIByteStrings","","A function to construct an ANSIByteStrings instance.",null,null],[6,"ANSIString","","An ANSI String is a string coupled with the Style to display it\nin a terminal.",null,null],[6,"ANSIByteString","","An ANSIByteString represents a formatted series of bytes.  Use\nANSIByteString when styling text with an unknown encoding.",null,null],[6,"ANSIStrings","","A set of `ANSIString`s collected together, in order to be written with a\nminimum of control characters.",null,null],[6,"ANSIByteStrings","","A set of `ANSIByteString`s collected together, in order to be\nwritten with a minimum of control characters.",null,null],[11,"clone","","",2,null],[11,"fmt","","",2,null],[11,"eq","","",2,null],[11,"ne","","",2,null],[11,"fmt","","",3,null],[11,"clone","","",3,null],[11,"fmt","","",4,null],[11,"clone","","",4,null],[11,"fmt","","",5,null],[11,"clone","","",5,null],[11,"fmt","","",6,null],[11,"write_to","","Write an ANSIByteString to an io::Write.  This writes the escape\nsequences for the associated Style around the bytes.",7,null],[11,"from","","",2,{"inputs":[{"name":"i"}],"output":{"name":"ansigenericstring"}}],[11,"deref","","",2,null],[11,"fmt","","",3,null],[11,"fmt","","",4,null],[11,"fmt","","",5,null],[11,"fmt","","",1,null],[11,"clone","","",1,null],[11,"eq","","",1,null],[11,"ne","","",1,null],[11,"normal","","Return a Style with the foreground colour set to this colour.",1,null],[11,"paint","","Paints the given text with this colour, returning an ANSI string.\nThis is a short-cut so you don&#39;t have to use Blue.normal() just\nto get blue text.",1,null],[11,"prefix","","The prefix for this colour.",1,null],[11,"suffix","","The suffix for this colour.",1,null],[11,"infix","","The infix between this colour and another.",1,null],[11,"bold","","Returns a Style with the bold property set.",1,null],[11,"dimmed","","Returns a Style with the dimmed property set.",1,null],[11,"italic","","Returns a Style with the italic property set.",1,null],[11,"underline","","Returns a Style with the underline property set.",1,null],[11,"blink","","Returns a Style with the blink property set.",1,null],[11,"reverse","","Returns a Style with the reverse property set.",1,null],[11,"hidden","","Returns a Style with the hidden property set.",1,null],[11,"strikethrough","","Returns a Style with the strikethrough property set.",1,null],[11,"on","","Returns a Style with the background colour property set.",1,null],[11,"fmt","","",8,null],[11,"clone","","",8,null],[11,"eq","","",8,null],[11,"ne","","",8,null],[11,"new","","Creates a new Style with no differences.",8,{"inputs":[],"output":{"name":"style"}}],[11,"paint","","Paints the given text with this colour, returning an ANSI string.",8,null],[11,"prefix","","The prefix for this style.",8,null],[11,"suffix","","The suffix for this style.",8,null],[11,"infix","","The infix between this style and another.",8,null],[11,"bold","","Returns a Style with the bold property set.",8,null],[11,"dimmed","","Returns a Style with the dimmed property set.",8,null],[11,"italic","","Returns a Style with the italic property set.",8,null],[11,"underline","","Returns a Style with the underline property set.",8,null],[11,"blink","","Returns a Style with the blink property set.",8,null],[11,"reverse","","Returns a Style with the reverse property set.",8,null],[11,"hidden","","Returns a Style with the hidden property set.",8,null],[11,"strikethrough","","Returns a Style with the hidden property set.",8,null],[11,"fg","","Returns a Style with the foreground colour property set.",8,null],[11,"on","","Returns a Style with the background colour property set.",8,null],[11,"default","","",8,{"inputs":[],"output":{"name":"style"}}],[11,"fmt","","",9,null],[11,"write_to","","Write ANSIByteStrings to an io::Write.  This writes the minimal\nescape sequences for the associated Styles around each set of\nbytes.",10,null]],"paths":[[3,"ANSIGenericStrings"],[4,"Colour"],[3,"ANSIGenericString"],[3,"Prefix"],[3,"Suffix"],[3,"Infix"],[6,"ANSIString"],[6,"ANSIByteString"],[3,"Style"],[6,"ANSIStrings"],[6,"ANSIByteStrings"]]};
searchIndex["encode_unicode"] = {"doc":"Alternative and extension to the unstable `char.encode_utf8()` and `char.encode_utf16()`.","items":[[3,"Utf8Char","encode_unicode","Store a `char` as UTF-8 so it can be borrowed as a `str`",null,null],[3,"Utf16Char","","Store a `char` as UTF-16 so it can be borrowed as a slice",null,null],[3,"Utf8Iterator","","Read or iterate over the bytes in the UTF-8 representation of a codepoint.",null,null],[3,"Utf16Iterator","","Iterate over the units in an UTF-16 representation of a codepoint.",null,null],[11,"default","","",0,{"inputs":[],"output":{"name":"utf8char"}}],[11,"cmp","","",0,null],[11,"partial_cmp","","",0,null],[11,"lt","","",0,null],[11,"le","","",0,null],[11,"gt","","",0,null],[11,"ge","","",0,null],[11,"eq","","",0,null],[11,"ne","","",0,null],[11,"clone","","",0,null],[11,"from_str","","The string must contain exactly one codepoint",0,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from","","",0,{"inputs":[{"name":"char"}],"output":{"name":"self"}}],[11,"into_iter","","Iterate over the byte values.",0,null],[11,"as_ref","","",0,null],[11,"as_ref","","",0,null],[11,"borrow","","",0,null],[11,"borrow","","",0,null],[11,"deref","","",0,null],[11,"hash","","",0,null],[11,"fmt","","",0,null],[11,"from_slice_start","","Validate the start of a UTF-8 slice and store it.\nAlso returns how many bytes were needed.",0,null],[11,"from_array","","Validate the array and store it.",0,null],[11,"len","","Result is 1...4 and identical to `.as_ref().len()` or `.as_char().len_utf8()`.\nThere is no .is_emty() because it would always return false.",0,null],[11,"to_char","","Convert from UTF-8 to UTF-32",0,null],[11,"to_slice","","Write the internal representation to a slice,\nand then returns the number of bytes written.",0,null],[11,"to_array","","Expose the internal array and the number of used bytes.",0,null],[11,"clone","","",1,null],[11,"from","","",1,{"inputs":[{"name":"utf8char"}],"output":{"name":"self"}}],[11,"from","","",1,{"inputs":[{"name":"char"}],"output":{"name":"self"}}],[11,"next","","",1,null],[11,"size_hint","","",1,null],[11,"len","","",1,null],[11,"read","","Always returns Ok",1,null],[11,"fmt","","",1,null],[11,"default","","",2,{"inputs":[],"output":{"name":"utf16char"}}],[11,"eq","","",2,null],[11,"ne","","",2,null],[11,"clone","","",2,null],[11,"from","","",2,{"inputs":[{"name":"char"}],"output":{"name":"self"}}],[11,"into_iter","","Iterate over the units.",2,null],[11,"as_ref","","",2,null],[11,"borrow","","",2,null],[11,"deref","","",2,null],[11,"hash","","",2,null],[11,"fmt","","",2,null],[11,"partial_cmp","","",2,null],[11,"cmp","","",2,null],[11,"from_slice","","Validate and store the first UTF-16 codepoint in the slice.\nAlso return how many units were needed.",2,null],[11,"from_tuple","","Validate and store a UTF-16 pair as returned from `char.to_utf16_tuple()`.",2,null],[11,"len","","Returns 1 or 2.\nThere is no `.is_emty()` because it would always return false.",2,null],[11,"to_char","","Convert from UTF-16 to UTF-32",2,null],[11,"to_slice","","Write the internal representation to a slice,\nand then returns the number of `u16`s written.",2,null],[11,"to_tuple","","The second `u16` is used for surrogate pairs.",2,null],[11,"clone","","",3,null],[11,"from","","",3,{"inputs":[{"name":"char"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"utf16char"}],"output":{"name":"self"}}],[11,"next","","",3,null],[11,"size_hint","","",3,null],[11,"len","","",3,null],[11,"fmt","","",3,null],[0,"error","","Errors returned by various conversion methods in this crate.",null,null],[4,"FromStrError","encode_unicode::error","Reason why Utf8Char::from_str() failed.",null,null],[13,"SeveralCodePoints","","Utf8Char cannot store more than a single codepoint.",4,null],[13,"Empty","","Utf8Char cannot be empty.",4,null],[4,"InvalidCodePoint","","Reasons why an u32 is not a valid utf codepoint.",null,null],[13,"Utf16Reserved","","It&#39;s reserved for utf-16 surrogate pairs.",5,null],[13,"TooHigh","","It&#39;s higher than the highest codepoint of 0x10ffff.",5,null],[4,"InvalidUtf8FirstByte","","Reasons why a byte is not the start of a UTF-8 codepoint.",null,null],[13,"TooLongSeqence","","Sequences cannot be longer than 4 bytes. Is given for bytes &gt;= 240.",6,null],[13,"ContinuationByte","","This byte belongs to a previous seqence. Is given for values between 128 and 192 (exclusive).",6,null],[4,"InvalidUtf8","","Reasons why a byte sequence is not valid UTF-8, excluding invalid codepoint.\nIn sinking precedence.",null,null],[13,"FirstByte","","Something is certainly wrong with the first byte.",7,null],[13,"NotAContinuationByte","","One of the continuation bytes doesnt fit the pattern 0b10xx_xxxx.",7,null],[13,"OverLong","","There are too many leading zeros; it could be a byte shorter.",7,null],[4,"InvalidUtf8Slice","","Reasons why a byte slice is not valid UTF-8, in sinking precedence.",null,null],[13,"Utf8","","Something is certainly wrong with the first byte.",8,null],[13,"CodePoint","","The encoded codepoint is invalid:",8,null],[13,"TooShort","","The slice is too short; n bytes was required.",8,null],[4,"InvalidUtf16Slice","","Reasons why a slice of `u16`s doesn&#39;t start with valid UTF-16.",null,null],[13,"EmptySlice","","The slice is empty.",9,null],[13,"FirstLowSurrogate","","The first unit is a low surrogate.",9,null],[13,"MissingSecond","","The first and only unit requires a second unit.",9,null],[13,"SecondNotLowSurrogate","","The first unit requires a second one, but it&#39;s not a low surrogate.",9,null],[4,"InvalidUtf8Array","","Reasons why a byte array is not valid UTF-8, in sinking precedence.",null,null],[13,"Utf8","","Something is certainly wrong with the first byte.",10,null],[13,"CodePoint","","The encoded codepoint is invalid:",10,null],[4,"InvalidUtf16Tuple","","Reasons why one or two `u16`s are not valid UTF-16, in sinking precedence.",null,null],[13,"FirstIsTrailingSurrogate","","The first unit is a trailing/low surrogate, which is never valid.",11,null],[13,"SuperfluousSecond","","You provided a second unit, but the first one stands on its own.",11,null],[13,"MissingSecond","","The first and only unit requires a second unit.",11,null],[13,"InvalidSecond","","The first unit requires a second unit, but it&#39;s not a trailing/low surrogate.",11,null],[8,"CharExt","encode_unicode","Extension trait for `char` that adds methods for converting to and from UTF-8 or UTF-16.",null,null],[10,"to_utf8","","Get the UTF-8 representation of this codepoint.",12,null],[10,"to_utf16","","Get the UTF-16 representation of this codepoint.",12,null],[10,"iter_utf8_bytes","","Iterate over or [read](https://doc.rust-lang.org/std/io/trait.Read.html)\nthe one to four bytes in the UTF-8 representation of this codepoint.",12,null],[10,"iter_utf16_units","","Iterate over the one or two units in the UTF-16 representation of this codepoint.",12,null],[10,"to_utf8_slice","","Convert this char to UTF-8, and then\nreturns the number of bytes written.",12,null],[10,"to_utf16_slice","","Convert this char to UTF-16, and then\nreturns the number of units written.",12,null],[10,"to_utf8_array","","Convert this char to an UTF-8 array and lenght,\nThe returned array is left-aligned, and the usize is how many bytes are used.\nThe unused bytes are zero.",12,null],[10,"to_utf16_tuple","","Convert this char to UTF-16.\nThe second `u16` is `Some` if a surrogate pair is required.",12,null],[10,"from_utf8_slice","","Create a `char` from the start of a slice intepreted as UTF-8, and return how many bytes were needed.",12,null],[10,"from_utf16_slice","","Read one or two UTF-16 units into a `char`, and also return how many units were needed.",12,null],[10,"from_utf8_array","","Convert an UTF-8 sequence as returned from `.to_utf8_array()` into a `char`",12,null],[10,"from_utf16_tuple","","Convert a UTF-16 pair as returned from `.to_utf16_tuple()` into a `char`.",12,null],[10,"from_utf8_exact_slice_unchecked","","Convert an UTF-8 sequence into a char.\nThe length of the slice is the length of the sequence, should be 1,2,3 or 4.",12,null],[10,"from_utf16_tuple_unchecked","","Convert a UTF-16 tuple as returned from `.to_utf16_tuple()` into a `char`.",12,null],[10,"from_u32_detailed","","Perform some extra validations compared to `char::from_u32_unchecked()`",12,{"inputs":[{"name":"u32"}],"output":{"name":"result"}}],[8,"U8UtfExt","","Methods for working with `u8`s UTF-8.",null,null],[10,"extra_utf8_bytes","","How many more bytes will you need to complete this codepoint?\nFailures:",13,null],[10,"extra_utf8_bytes_unchecked","","How many more bytes will you need to complete this codepoint?\nAssumes that self is a valid UTF-8 start.\nReturns `self.not().leading_zeros().saturating_sub(1)`",13,null],[8,"U16UtfExt","","Methods for working with `u16`s as UTF-16 units.",null,null],[10,"utf16_needs_extra_unit","","Will you need an extra unit to complete this codepoint?",14,null],[10,"utf16_is_leading_surrogate","","Does this `u16` need another `u16` to complete a codepoint?\nReturns `(self &amp; 0xfc00) == 0xd800`",14,null],[11,"eq","encode_unicode::error","",4,null],[11,"fmt","","",4,null],[11,"clone","","",4,null],[11,"description","","",4,null],[11,"fmt","","",4,null],[11,"eq","","",5,null],[11,"fmt","","",5,null],[11,"clone","","",5,null],[11,"error_range","","Get the range of values for which this error would be given.",5,null],[11,"description","","",5,null],[11,"fmt","","",5,null],[11,"eq","","",6,null],[11,"fmt","","",6,null],[11,"clone","","",6,null],[11,"description","","",6,null],[11,"fmt","","",6,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"fmt","","",7,null],[11,"clone","","",7,null],[11,"description","","",7,null],[11,"cause","","When `Some` is returned, the `Error` is a `InvalidUtf8FirstByte`.",7,null],[11,"fmt","","",7,null],[11,"eq","","",10,null],[11,"ne","","",10,null],[11,"fmt","","",10,null],[11,"clone","","",10,null],[11,"description","","",10,null],[11,"cause","","Always returns `Some`.",10,null],[11,"fmt","","",10,null],[11,"eq","","",8,null],[11,"ne","","",8,null],[11,"fmt","","",8,null],[11,"clone","","",8,null],[11,"description","","",8,null],[11,"cause","","",8,null],[11,"fmt","","",8,null],[11,"eq","","",11,null],[11,"fmt","","",11,null],[11,"clone","","",11,null],[11,"description","","",11,null],[11,"fmt","","",11,null],[11,"eq","","",9,null],[11,"fmt","","",9,null],[11,"clone","","",9,null],[11,"description","","",9,null],[11,"fmt","","",9,null]],"paths":[[3,"Utf8Char"],[3,"Utf8Iterator"],[3,"Utf16Char"],[3,"Utf16Iterator"],[4,"FromStrError"],[4,"InvalidCodePoint"],[4,"InvalidUtf8FirstByte"],[4,"InvalidUtf8"],[4,"InvalidUtf8Slice"],[4,"InvalidUtf16Slice"],[4,"InvalidUtf8Array"],[4,"InvalidUtf16Tuple"],[8,"CharExt"],[8,"U8UtfExt"],[8,"U16UtfExt"]]};
searchIndex["unicode_width"] = {"doc":"Determine displayed width of `char` and `str` types according to\n[Unicode Standard Annex #11](http://www.unicode.org/reports/tr11/)\nrules.","items":[[17,"UNICODE_VERSION","unicode_width","The version of [Unicode](http://www.unicode.org/)\nthat this version of unicode-width is based on.",null,null],[8,"UnicodeWidthChar","","Methods for determining displayed width of Unicode characters.",null,null],[10,"width","","Returns the character&#39;s displayed width in columns, or `None` if the\ncharacter is a control character other than `&#39;\\x00&#39;`.",0,null],[10,"width_cjk","","Returns the character&#39;s displayed width in columns, or `None` if the\ncharacter is a control character other than `&#39;\\x00&#39;`.",0,null],[8,"UnicodeWidthStr","","Methods for determining displayed width of Unicode strings.",null,null],[10,"width","","Returns the string&#39;s displayed width in columns.",1,null],[10,"width_cjk","","Returns the string&#39;s displayed width in columns.",1,null]],"paths":[[8,"UnicodeWidthChar"],[8,"UnicodeWidthStr"]]};
searchIndex["quick_error"] = {"doc":"A macro which makes errors easy to write","items":[[3,"Context","quick_error","",null,null],[12,"0","","",0,null],[12,"1","","",0,null],[8,"ResultExt","","",null,null],[10,"context","","",1,null],[11,"fmt","","",0,null],[14,"quick_error!","","Main macro that does all the work",null,null]],"paths":[[3,"Context"],[8,"ResultExt"]]};
initSearch(searchIndex);
